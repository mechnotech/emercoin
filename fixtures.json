[{"model": "info.promo", "pk": 1, "fields": {"link": "http://ya-tube.ru", "bg_color": "#FFFFFF", "mobile_img": "info/emer710rusMobile.png", "desktop_img": "info/emer710rus.png", "mobile_img_en": "info/emer710engMobile.png", "desktop_img_en": "info/emer710eng.png"}}, {"model": "info.promo", "pk": 2, "fields": {"link": "https://news.ru", "bg_color": "#FFFFFF", "mobile_img": "info/BDAL_ru_450x350.png", "desktop_img": "info/BDAL_ru_1110x390.png", "mobile_img_en": "", "desktop_img_en": ""}}, {"model": "info.aboutemer", "pk": 1, "fields": {"title": "Безопасность", "title_en": "Security", "text": "Гибкость Emercoin никогда не идёт в ущерб безопасности. В отличие от «умных» контрактов, которые уже не раз привели к многомиллионным кражам и взломам, логика NVS-контрактов Emercoin не является Тьюринг-полной, и с её помощью нельзя написать вредоносный код.", "text_en": "Emercoin will never sacrifice security for flexibility. Unlike “smart” contracts, which have already caused multi-million scams and security compromising in the past, Emercoin’s NVS logic is not Turing-complete and cannot be used to write malicious code.", "image": "info/security_6EwOMA2.svg"}}, {"model": "info.aboutemer", "pk": 2, "fields": {"title": "Надёжность", "title_en": "Reliability", "text": "Хотя Emercoin поддерживает как традиционный PoW-майнинг, так и комайнинг с Bitcoin, основной механизм в нём — PoS-минтинг. Это исключает «гонку вооружений» за вычислительную мощность и гарантирует доход 6% годовых просто за владение монетами.", "text_en": "Although Emercoin supports traditional PoW mining and merged mining with Bitcoin, its main mechanism is Proof-of-Stake mining. This eliminates the “arm’s race” for mining capacity.", "image": "info/reliability_vw0MvDe.svg"}}, {"model": "info.aboutemer", "pk": 3, "fields": {"title": "Гибкость", "title_en": "Flexibility", "text": "В основе Emercoin лежит EmerNVS — хранилище пар «имя-значение». Эта простая, но мощная идея позволила хранить в блокчейне произвольные данные и построить целый ряд распределённых сервисов — от DNS до голосовой телефонии.", "text_en": "Emercoin’s Name-Value Storage is a simple yet powerful concept that allows you to store arbitrary data within the blockchain. This has already allowed a range of distributed services, from a decentralized network.", "image": "info/flexibility_mBqg1rW.svg"}}, {"model": "info.services", "pk": 1, "fields": {"title": "EmerDNS", "slug": "emerdns", "text": "<p>Боитесь, что ваш сайт могут заблокировать власти? Возможно, не зря, учитывая &laquo;закручивание гаек&raquo; по всему миру.</p>\r\n\r\n<p>Вам поможет EmerDNS. EmerDNS не грозит цензура, ведь это полностью децентрализованная система. Никто, кроме вас, не сможет изменить созданную вами DNS-запись.</p>\r\n\r\n<p>Сайты на EmerDNS легко резолвятся &mdash; через браузерные расширения, серверы OpenNIC или прокси-серверы.</p>", "text_en": "<p>Are you afraid your website could be suspended by authorities? With &ldquo;the screws tightening&rdquo; around the world, your fears might well be justified.</p>\r\n\r\n<p>EmerDNS is the way out. Completely decentralized, EmerDNS is safe from any kind of censorship. No other user can modify your record &mdash; only the record creator can manipulate its content.</p>\r\n\r\n<p>EmerDNS websites can be easily resolved with the help of several browser extensions, by using OpenNIC servers, or via proxies.</p>", "text_more": "<p>EmerDNS поддерживает полный набор DNS-записей. В рамках NVS система работает под абревиатурой &ldquo;dns&rdquo;.</p>\r\n\r\n<p>Благодаря безопасному блокчейну Emercoin, записи о доменных именах полностью децентрализованы и нецензурируемы. Никакой регулятор не сможет их изменить, отозвать или заблокировать. Только владелец записи &mdash; тот, у кого есть закрытый ключ от соответствующего платёжного адреса, &mdash; может совершать над ней действия. Работать над записями в NVS можно через GUI-кошелёк Emercoin или используя API-команды &ldquo;name_new/name_update&rdquo;.</p>\r\n\r\n<p>DNS-записи можно легко получить по API от любого Emercoin-кошелька через JSON-RPC, командную строку, или стандартный RFC1034-протокол, встроенный в каждый кошелёк.</p>", "text_more_en": "<p>EmerDNS is a decentralized domain name system supporting the full range of DNS records. EmerDNS operates under the &ldquo;dns&rdquo; service abbreviation in the Emercoin NVS.</p>\r\n\r\n<p>Thanks to Emercoin&#39;s secure and distributed blockchain, domain name records are completely decentralized and uncensorable. They cannot be altered, revoked, or suspended by any authority. Only the record owner, i.e. the one who controls the private key to the associated payment address, can modify or transfer it to another owner. These actions can be performed using the Emercoin NVS in the Emercoin wallet GUI, or via the name_new or name_update commands in the Emercoin API.</p>\r\n\r\n<p>DNS records can easily be retrieved from any Emercoin wallet via the Emercoin API using JSON-RPC or the command line, or via the standard RFC1034 DNS protocol built into every Emercoin wallet.</p>", "scenarios": "для защиты веб-сайтов от блокировки властями | для предотвращения изменения, отзыва или приостановки доменных имен | иметь доступ к нескольким доменным зонам вместо одной | арендовать DNS-запись с настраиваемым сроком аренды | легко удалять любые записи | использовать встроенный DNS-сервер rfc1035 | управлять несколькими поддоменами | дешевле, чем где-либо", "scenarios_en": "to protect websites from being blocked by any authorities | to prevent domain names from being altered, revoked, or suspended | to have access to multiple domain zones instead of one | to rent a DNS record with a customizable rental period | to easily delete any records | to use the built-in DNS-server rfc1035 | to manage a few subdomains", "image": "info/emerdns_big_L8QgPng.png", "icon": "info/emerdns_icon_PuHhjuQ.svg"}}, {"model": "info.services", "pk": 2, "fields": {"title": "EmerSSH", "slug": "emerssh", "text": "<p>Используете серверную PKI? Представьте, что случится, если вашему администратору захочется пошалить.</p>\r\n\r\n<p>С EmerSSH вы в безопасности.</p>\r\n\r\n<p>Благодаря децентрализации, никто не сможет получить ключ к вашему корневому сертификату и таким образом расшировать передаваемые данные.</p>\r\n\r\n<p>EmerSSH можно бесшовно связать с OpenSSH, получив гибкость в дополнение к безопасности.</p>", "text_en": "<p>Do you use a server-based PKI? Don&rsquo;t ask what happens if the server&rsquo;s administrator wants to act dirty.</p>\r\n\r\n<p>With EmerSSH, you&rsquo;re totally safe. Through its decentralized nature, EmerSSH makes it impossible for anyone to obtain root certificate keys and thus decrypt the data being transmitted.</p>\r\n\r\n<p>EmerSSH can be seamlessly bridged with OpenSSH, giving you flexibility in addition to security.</p>", "text_more": "<p>EmerSSH &mdash; система для управления инфраструктурой открытых ключей (PKI) и списками контроля доступа (ACL) на базе блокчейна Emercoin.</p>\r\n\r\n<p>Если EmerSSH связать с Open SSH, вы получите удобный, безопасный и гибкий способ SSH-подключения ко многим серверам. Для этого в OpenSSH надо указать ссылку на утилиту &ldquo;emcssh&rdquo;, которая будет &laquo;общаться&raquo; с блокчейном и получать SSH-креды в процессе аутентификации.</p>\r\n\r\n<p>Добавлять и изменять записи об открытых ключах в блокчейне можно через GUI или командную строку. Таким же образом можно управлять группами пользователей, которые могут в свою очередь ссылаться на другие группы или отдельных пользователей, организовывая рекурсивные деревья для аутентификации.</p>\r\n\r\n<p>В рамках NVS система работает под абревиатурой &ldquo;ssh&rdquo;.</p>", "text_more_en": "<p>EmerSSH is a system for managing Public Key Infrastructures (PKI) and Access Control Lists (ACL) using the Emercoin blockchain.</p>\r\n\r\n<p>EmerSSH can be bridged to OpenSSH, providing a comfortable, safe, and flexible way to log in to multiple servers via SSH. In this case,OpenSSH is configured to refer to the emcssh utility, which queries the Emercoin blockchain and retrieves SSH credentials during the authentication process.</p>\r\n\r\n<p>With EmerSSH, users can manage their own public keys by submitting and modifying records in the Emercoin blockchain via the GUI or command line. Similarly, admins can manage user groups for their services that may contain references to other groups as well as individual users &mdash; allowing for the creation of recursive authentication trees.</p>\r\n\r\n<p>EmerSSH operates under the &ldquo;ssh&rdquo; service abbreviation in the Emercoin NVS.</p>", "scenarios": "для децентрализации авторизации и, как следствие, повышенной безопасности | для легкого администрирования и использования | для автоматического обновления ключей и групп без помощи администратора | для удешевления поддержки инфраструктуры и ее администрирования | создает абсолютное доверие между распределенными участниками инфраструктуры", "scenarios_en": "for decentralization of authority and as a result increased security |\r\nfor easy administration and use |\r\nfor automatic updating of keys and groups without the help of the administrator |\r\nfor reduction in price for infrastructure support and its administration |\r\nto create absolute trust between distributed participants of infrastructure", "image": "info/emerssh_big_8gUJCHi.png", "icon": "info/emerssh_icon_zUeJOFO.svg"}}, {"model": "info.services", "pk": 3, "fields": {"title": "EmerSSL", "slug": "emerssl", "text": "<p>Если вы используете беспарольную аутентификацию на базе SSL-сертификатов, вы знаете, что это может обойтись в копеечку. Хуже того, если ваш сертификационный центр будет скомпрометирован, вам крышка. Но не с EmerSSL.</p>\r\n\r\n<p>Эта полностью децентрализованная инфраструктура SSL-сертификатов исключает возможность MITM-атаки. Стоить она будет НАМНОГО дешевле, чем использование централизованного ЦС.</p>\r\n\r\n<p>А использовать её &mdash; проще простого: один раз сгенерировал закрытый сертификат &mdash; и можешь годами безопасно заходить без пароля на поддерживаемые сайты.</p>", "text_en": "<p>If you are used to passwordless authentication via SSL certificates, you know how costly these are. Worst of all, if your certification authority is compromised, you&rsquo;re screwed.</p>\r\n\r\n<p>Now meet EmerSSL.</p>\r\n\r\n<p>A totally decentralized infrastructure of SSL certificates, it makes man-in-the-middle attacks impossible. And it&rsquo;s WAY cheaper than doing it with a central CA.</p>\r\n\r\n<p>And it&rsquo;s so easy to use: Generate your private certificate once, and enjoy passwordless &mdash; and secure &mdash; access to selected websites for years.</p>", "text_more": "<p>EmerSSL &mdash; система беспарольной аутентификации на сайтах, использующая блокчейн Emercoin в качестве децентрализованного хранилища хеш-сумм для клиентских SSL-сертификатов. Сертификаты можно создавать прямо на своём компьютере, без вовлечения какого-либо центра сертификации, и при необходимости легко заменять. Так что ни плановые обновления, ни срочные отзывы скомпрометированных сертификатов не вызовут проблем.</p>\r\n\r\n<p>EmerSSL полностью децентрализована &mdash; в отличие от систем типа Kerberos, OpenID, TeddyID и т. д., здесь нет никакого единого органа, который контролирует аутентификацию. Поэтому EmerSSL не подвержена системным перебоям &mdash; будь то из-за технических сбоев или хакерских атак. И ни один пользовательский аккаунт не может быть заблокирован произволом какой-либо &laquo;власти&raquo;.</p>\r\n\r\n<p>Помимо беспарольного входа, EmerSSL поддерживает автозаполнение форм на базе содержащихся в блокчейне данных. Для этого используется связанная технология EmerSSL InfoCard.</p>", "text_more_en": "<p>EmerSSL is a system for passwordless website authentication that uses the Emercoin blockchain as a decentralized and trusted store of hash sums for client SSL certificates. Certificates can be generated by users on their own computers, without any central authority, and quickly replaced as needed. This makes the system effective for both scheduled updates and rapid recalls of compromised certificates.</p>\r\n\r\n<p>EmerSSL enables the complete decentralization of the system. In other words, there is no single entity controlling the authentication, unlike systems such as Kerberos, OpenID, TeddyID, and the like. Thus, EmerSSL cannot suffer a system-wide service disruption whether due to technical failure or through a malicious attack on the servers. Neither can a user&rsquo;s account be globally suspended at the whim of a single authority.</p>\r\n\r\n<p>Associated with the EmerSSL technology is EmerSSL InfoCard &mdash; a &ldquo;business card&rdquo; system that complements EmerSSL&#39;s passwordless logins with website form autocompletion based on the data residing on the Emercoin blockchain.</p>", "scenarios": "для многократного использования одного клиентского SSL-сертификата для авторизации на любом сервере в системе EmerSSL без ущерба для безопасности | для начала безопасного сеанса SSL только после успешного процесса аутентификации сертификата | для автозаполнения новой формы учетной записи данными, записанными в блокчейн", "scenarios_en": "for repeated use of one client SSL certificate for authorization on any server in EmerSSL system without compromising security |\r\nfor the start of secure SSL session only after successful certificate authentication process |\r\nto autofill a new account form with data recorded in the blockchain", "image": "info/emerssl_big_oEqhHTX.png", "icon": "info/emerssl_icon_oQ3TaEQ.svg"}}, {"model": "info.content", "pk": 1, "fields": {"date": "2021-03-08", "link": "https://news.ru", "brif": "Едем дальше"}}, {"model": "info.content", "pk": 2, "fields": {"date": "2018-04-16", "link": "https://www.reuters.com/article/us-blockchain-coca-cola-labor/coca-cola-u-s-state-dept-to-use-blockchain-to-combat-forced-labor-idUSKCN1GS2PY", "brif": "Coca-Cola, U.S. State Dept to use blockchain to combat forced labor"}}, {"model": "info.content", "pk": 3, "fields": {"date": "2021-03-05", "link": "http://forbes.ge", "brif": "От Форбс"}}, {"model": "info.content", "pk": 4, "fields": {"date": "2021-03-12", "link": "http://forbes.ge", "brif": "Ещё от Форбс"}}, {"model": "info.content", "pk": 5, "fields": {"date": "2021-02-03", "link": "http://euronews.com", "brif": "От Евроньюс"}}, {"model": "info.media", "pk": 1, "fields": {"name": "Reuters", "logo": "info/Reuters_lit_logo.png", "logo_big": "info/Reuters_big_logo.png"}}, {"model": "info.media", "pk": 2, "fields": {"name": "Forbes", "logo": "info/Forbes_lit_logo.png", "logo_big": "info/Forbes_big_logo.png"}}, {"model": "info.media", "pk": 3, "fields": {"name": "Euronews", "logo": "info/Euronews_lit_logo.png", "logo_big": "info/Euronews_big_logo.png"}}, {"model": "info.mediacontent", "pk": 1, "fields": {"t_media": 1, "t_content": 2}}, {"model": "info.mediacontent", "pk": 2, "fields": {"t_media": 1, "t_content": 1}}, {"model": "info.mediacontent", "pk": 3, "fields": {"t_media": 2, "t_content": 3}}, {"model": "info.mediacontent", "pk": 4, "fields": {"t_media": 2, "t_content": 4}}, {"model": "info.mediacontent", "pk": 5, "fields": {"t_media": 3, "t_content": 5}}, {"model": "info.roadmap", "pk": 1, "fields": {"year": 2013, "text": "<p>Запущен 11 декабря&nbsp;2013 года, как форк Peercoin.</p>", "text_en": "<p>Launched in December 2013 as a fork of Peercoin.</p>"}}, {"model": "info.roadmap", "pk": 2, "fields": {"year": 2014, "text": "<p>Реализация обнаружения IP через STUN dyndns.org.</p>\r\n\r\n<p>Запуск Name-Value Storage &mdash; универсальной платформы для расширения блокчейн-сервисов.</p>\r\n\r\n<p>Запуск EmerDNS &mdash; децентрализованной, неизменной и надёжной системы доменных имён.</p>", "text_en": "<p>Added STUN IP discovery to remove usage centralized commercial service&nbsp;dyndns.org.</p>\r\n\r\n<p>Added Name-Values Storage - a universal trusted platform for external blockchain-based services.</p>\r\n\r\n<p>Implemented EmerDNS, a decentralized domain system that provides irrevocable domain names and robustness to the DNS infrastructure.</p>"}}, {"model": "info.roadmap", "pk": 3, "fields": {"year": 2015, "text": "<p>Создание и реализация блокчейн-сервисов в области безопасности.</p>\r\n\r\n<p>EmerSSH &mdash; децентрализованная инфраструктура открытых ключей и списки контроля доступа.</p>\r\n\r\n<p>EmerSSL &mdash; беспарольная аутентификация на сайтах.</p>\r\n\r\n<p>InfoCard &mdash; подсистема электронных визитных карточек в рамках EmerSSL.</p>\r\n\r\n<p>Начало работы над EmerDPO, EmerTTS и Magnet.</p>\r\n\r\n<p>Emercoin появляется на биржах Livecoin, Cryptopia и YoBit</p>\r\n\r\n<p>Emercoin входит в список двадцати самых популярных валют на Coinmarketcap</p>", "text_en": "<p>Invented and implemented blockchain-based security services.</p>\r\n\r\n<p>EmerSSH, Worldwide Public Key Infrastructure and Access Control List.</p>\r\n\r\n<p>EmerSSL, Passwordless identification and secure web-login.</p>\r\n\r\n<p>InfoCard, electronic business-card, works together with EmerSSL.</p>\r\n\r\n<p>Invented concepts of EmerDPO, EmerTTS, Magnet.</p>\r\n\r\n<p>Emercoin officially appears at Livecoin.com, Cryptopia and YoBit</p>\r\n\r\n<p>Emercoin is in the list of TOP20 cryptocurrencies on Coinmarketcap</p>"}}, {"model": "info.roadmap", "pk": 4, "fields": {"year": 2016, "text": "<p>Emercoin появляется на биржах BTC38 и xBTCe.</p>\r\n\r\n<p>Сотрудничество с Организацией Объединённых Наций.</p>\r\n\r\n<p>Партнёрство с Microsoft BaaS и появление приложения &ldquo;Blockchain Engine&rdquo; в каталоге MS Azure.</p>\r\n\r\n<p>Первое реальное использование EmerDPO фермой &laquo;Колионово&raquo;.</p>\r\n\r\n<p>Оптимизатор транзакций, защищающий блокчейн от &laquo;раздувания&raquo;.</p>\r\n\r\n<p>Распределённые и динамические контрольные точки.</p>", "text_en": "<p>Emercoin officially appears at BTC38 and хBTCe</p>\r\n\r\n<p>Cooperation work with the United Nations</p>\r\n\r\n<p>Established partnership with Microsoft BaaS program and released &ldquo;Blockchain Engine&rdquo; MS Azure application.</p>\r\n\r\n<p>First real usage of EmerDPO - Kolionovo farm shares.</p>\r\n\r\n<p>Transaction optimizer &mdash; preserves blockchain from unnecessary inflation.</p>\r\n\r\n<p>Distributed and dynamic checkpoints.</p>"}}, {"model": "info.roadmap", "pk": 5, "fields": {"year": 2017, "text": "<p>Emercoin включён в каталог сертифицированного ПО RedHat.</p>\r\n\r\n<p>Тройной майнинг: PoS + PoW + комайнинг.</p>\r\n\r\n<p>Улучшения в ядре, включая полную децентрализацию.</p>\r\n\r\n<p>Мгновенный обмен Emercoin на другие криптовалюты через API внешних обменников (ShapeShift, CoinReform и т. д.).</p>\r\n\r\n<p>Создание и запуск ENUMER &mdash; блокчейн-платформы голосовой связи.</p>\r\n\r\n<p>Запуск публичного тестового блокчейна с веб-обозревателем.</p>\r\n\r\n<p>UnaDesk пытается децентрализовать рынок недвижимости и коммунальных услуг с использованием блокчейна Emer</p>\r\n\r\n<p>Истории успеха: Deloitte, eZuce, РЖД, SipXcom, HashCoin, AbitSystems</p>\r\n\r\n<p>Emercoin появляется на биржах HitBTC, Indacoin, BITTREX и USDX</p>", "text_en": "<p>Emercoin included in RedHat catalog of certified programs.</p>\r\n\r\n<p>Three-in-one mining mechanism: POS + POW + MergedMining.</p>\r\n\r\n<p>Lot of core improvements, including full decentralization.</p>\r\n\r\n<p>On-the-fly exchange emercoin to other cryptos with external exchanges API (shapeshift, coinreform).</p>\r\n\r\n<p>Invented and implemented ENUMER, a blockchain-based telecommunications platform.</p>\r\n\r\n<p>Started public testnet with web-explorer.</p>\r\n\r\n<p>UnaDesk strives to decentralize the real estate and utilities markets and uses the Emer blockchain.</p>\r\n\r\n<p>Tech adoption cases with: Deloitte, eZuce, Russian Railroads, SipXcom, HashCoin, AbitSystems</p>\r\n\r\n<p>Emercoin officially appears at HitBTC, Indacoin, BITTREX, USDX</p>"}}, {"model": "info.roadmap", "pk": 6, "fields": {"year": 2018, "text": "<p>Выпущена версия&nbsp;0.7.0 кошелька с поддержкой Segwit и улучшенными ядром и DNS-подсистемой.</p>\r\n\r\n<p>Завершено внедрение ATOM &mdash; безопасного протокола для P2P-продажи NVS-записей (DNS, земельные сертификаты и т. д.).</p>\r\n\r\n<p>Запущен Randpay &mdash; второе поколение лотерейной агрегации платежей.</p>", "text_en": "<p>Released version 0.7.0 of the wallet with Segwit support and improved core and DNS subsystem.</p>\r\n\r\n<p>Completed implementation of ATOM, a secure protocol for P2P sale of NVS records (DNS, land certificates, etc.).</p>\r\n\r\n<p>Randpay, the second generation of lottery payment aggregation, launched.</p>"}}, {"model": "info.roadmap", "pk": 7, "fields": {"year": 2019, "text": "<p>Обновление кошелька до версии 0.7.9</p>\r\n\r\n<p>Блокчейн Эмеркоина используется в Финансовой Академии &ldquo;Актив&rdquo;</p>", "text_en": "<p>Updating the wallet to version 0.7.9</p>\r\n\r\n<p>Emercoin blockchain is used at the Aktiv Financial Academy</p>"}}, {"model": "info.roadmap", "pk": 8, "fields": {"year": 2020, "text": "<p>Релиз File Validator,&nbsp;cервиса&nbsp;доказательства валидности файлов на базе технологии блокчейн, с использованием Emercoin NVS.</p>\r\n\r\n<p>Emercoin доступен на Docker</p>", "text_en": "<p>Release of File Validator, a blockchain-based file validation service using Emercoin NVS.</p>\r\n\r\n<p>Emercoin is available on Docker</p>"}}, {"model": "info.roadmap", "pk": 9, "fields": {"year": 2021, "text": "<p>Будем кодить</p>\r\n\r\n<p>ревьювить</p>\r\n\r\n<p>рефакторить</p>", "text_en": "<p>We will code</p>\r\n\r\n<p>and review</p>\r\n\r\n<p>and refactor</p>"}}, {"model": "info.news", "pk": 1, "fields": {"title": "Дайджест-Март 2021", "title_en": null, "slug": "daidzhest-mart-2021", "date": "2021-03-24T12:01:06Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "<p>Текст - такой текст</p>\r\n\r\n<p><img alt=\"\" src=\"/media/uploads/2021/03/25/yesno.jpg\" style=\"height:500px; width:500px\" /></p>", "text_en": null}}, {"model": "info.news", "pk": 2, "fields": {"title": "Что делать, если с кошельком Emercoin что-то пошло не так?", "title_en": "Here's what to do if something goes wrong with your Emercoin wallet", "slug": "chto-delat-esli-s-koshelkom-emercoin-chto-to-poshlo-ne-tak", "date": "2019-10-10T12:20:30Z", "image": "chto-delat.png", "image_en": "whats-wrong-wallet.jpg", "text": "<p>Редко, но такое бывает: Вы включили кошелек, а он не может завершить синхронизацию с сетью, не исчезает сообщение &ldquo;обратитесь к разработчику кошелька&rdquo;. Такая ситуация может возникнуть, если Вы очень долго не включали кошелек и пропустили важные обновления. Иногда это случается, если кошелек был некорректно закрыт (например, компьютер был внезапно обесточен).</p>\r\n\r\n<p>Обычно проблему можно решить, обновив кошелек до последней версии с официального сайта&nbsp;<a href=\"https://emercoin.com/ru\" rel=\"noopener\" target=\"_blank\">Emercoin</a>. Но если после обновления проблема не исчезла, то, возможно, Ваш кошелек находится в форке. Что же делать в таком случае?</p>\r\n\r\n<h2>Для начала - в основной ли мы сети?</h2>\r\n\r\n<p>Вам потребуется проверить, совпадают ли хэшсуммы последних блоков у Вас с таковыми у основной сети.</p>\r\n\r\n<p>Для этого нужно открыть в браузере страницу обозревателя блоков Emercoin&nbsp;(<a href=\"https://explorer.emercoin.com/\">https://explorer.emercoin.com</a>).</p>\r\n\r\n<p><img alt=\"\" src=\"/media/f8jQNdT6lGLUlfVXfuj2ZJsBHnft60D27HkYzciB.png\" style=\"height:637px; width:943px\" /></p>\r\n\r\n<p>Номер последнего блока находится слева вверху. Проверим, что предпоследний блок (в примере на картине - блок номер 364341) присутствует у Вас в блокчейне. Щелкнем мышкой по иконке этого блока в списке справа (вторая сверху строчка). На открывшейся странице мы можем посмотреть хеш этого блока:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/AqiOdddcDu4M10FKnuF1sA24MWkluKykdw6lPEjS.png\" style=\"height:661px; width:1003px\" /></p>\r\n\r\n<p>Проверим теперь, что в нашей копии блокчейна этот блок тоже есть, и хеш его совпадает. Для этого откроем кошелек (ниже приведены картинки для компьютера с Windows. Внешний вид окон для других систем аналогичен.</p>\r\n\r\n<p>Открываем консоль в графическом клиенте Emercoin:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/DtUIDdcytB40wCcxCvtiAI2JabJ0qPkfo0Tamk04.png\" style=\"height:150px; width:926px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"/media/Zeb9BJhMviLg6BS5di7zqXqi93qCXmPRUZ6mwXD7.png\" style=\"height:454px; width:928px\" /></p>\r\n\r\n<p>В строке введем команду&nbsp;getblockhash&nbsp;с номеном нашего блока&nbsp;и нажмем Enter.</p>\r\n\r\n<p>Например, для блока 364341 (getblockhash 364341) это будет выглядеть так:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/eBYhglCImnSIbvBfQfN3P4VjV2KGKgkZbOukt2vb.png\" style=\"height:371px; width:842px\" /></p>\r\n\r\n<p>Если выполнение команды прошло успешно, и напечатанный хеш совпадает с тем, что мы видим на странице обозревателя, то всё в порядке и ничего делать не требуется.&nbsp;Если же такой блок не находится, или хеш отличается - нам потребуется переиндексировать блокчейн и перейти в основную сеть.</p>\r\n\r\n<p>Следуйте инструкции ниже для выполнения этих действий.</p>\r\n\r\n<h2>Если мы действительно оказались в форке - перейдем в основную сеть. Ниже приведены инструкции для разных ОС:</h2>\r\n\r\n<h3>Для Windows:</h3>\r\n\r\n<p><strong>Переиндексация базы данных блокчейна в кошельке Emercoin</strong></p>\r\n\r\n<p>Самый простой способ проверить и упорядочить базу данных блокчейна после сбоя - переиндексация. Для этого надо записать в файл emercoin.conf строчку&nbsp;reindex = 1&nbsp;.&nbsp;Чтобы это сделать, необходимо зайти в меню кошелька &ldquo;Помощь - Окно отладки&rdquo; на вкладке &ldquo;Информация&rdquo;. Там будет указан путь (Datadir), где лежит файл emercoin.conf:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/WOEMfJOy0dat3EoUEOowbV7DfmORnV9IBRMgJ7jW.png\" style=\"height:376px; width:928px\" /></p>\r\n\r\n<p>Копируем путь в Проводник и переходим туда:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/EaV70hWBtL59tN8BTWpHuHYKDttc0LppiMsXN5aa.png\" style=\"height:434px; width:936px\" /></p>\r\n\r\n<p>Открываем emercoin.conf в текстовом редакторе (например, Notepad), записываем строку&nbsp;reindex = 1&nbsp;:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/7BgaOSvnmnq6NC2Lpd769bed8LVwZpXfp0xkJAvA.png\" style=\"height:189px; width:721px\" /></p>\r\n\r\n<p>Сохраняем и закрываем конфиг. Запускаем клиент Emercoin.</p>\r\n\r\n<p>После запуска снова открываем emercoin.conf и удаляем эту строку (если не удалить, реиндексация будет происходить каждый запуск).</p>\r\n\r\n<p>Реиндекс завершится примерно через 2 часа.&nbsp;</p>\r\n\r\n<p>Затем следует повторить проверку и убедиться, что хэшсуммы блоков совпадают.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>Для Mac (в версии Emercoin для Mac есть отличия от Windows):</strong></h3>\r\n\r\n<p>Вот мы висим в форке:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/7b8Klo5SjLGm1gYBPOg1lL1L4Ob9IC655nxdyxo2.png\" /></p>\r\n\r\n<p>Заходим в Окно отладки:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/ErGHDHoaOp81doedMFSeKf4g0rdVJVLNSKu7pgek.png\" /></p>\r\n\r\n<p>На вкладке Информация, находим путь, где находится emercoin.conf :</p>\r\n\r\n<p><img alt=\"\" src=\"/media/wk4Sd12wa3eLcpMoavC1SjkZKfE0B31hewMEk3Xc.png\" /></p>\r\n\r\n<p>Открываем Проводник:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/lCFppXMyVsnBhdZgyv3gYes6KKZrCvKTo08XMSUy.png\" /></p>\r\n\r\n<p>Вводим скопированный ранее путь:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/9BFqtGrqxxfl7SpSTfZdm0729ylKcvny6l5OYRrd.png\" style=\"height:733px; width:1017px\" /></p>\r\n\r\n<p>Открываем папку. Открываем emercoin.conf в текстовом редакторе. Если ни один текстовый редактор не сопоставлен для файлов с таким расширением, делаем это вручную:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/VorcTMHPJ6t2sTj8nDi0InKw6zZsezMSfjoYsZzR.png\" /></p>\r\n\r\n<p><img alt=\"\" src=\"/media/0WDiP7Njm29BLrJRx7JY8TgJoG5P9kJ4EJfNOGyE.png\" /></p>\r\n\r\n<p><img alt=\"\" src=\"/media/riwXobFreIUnR12bQXq8S0kl7RdIujbjfiGHlq42.png\" /></p>\r\n\r\n<p>Запишем строку&nbsp;reindex = 1, сохраняем документ и запускаем кошелек Emercoin:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/Cw7YZKP3QJw67siBMNP3fIYf9cTf1DfifoJ1aLWO.png\" style=\"height:715px; width:1011px\" /></p>\r\n\r\n<p>Реиндекс завершится примерно через 2 часа.&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"/media/Kf4iYBA3WqzdaIiZIDzJyVCn7EDasAu9qj8w943M.png\" /></p>\r\n\r\n<p>После запуска снова открываем emercoin.conf и удаляем эту строку (если не удалить, реиндексация будет происходить каждый запуск).&nbsp;Затем следует повторить проверку и убедиться, что хэшсуммы блоков совпадают.</p>\r\n\r\n<p>Этих мер должно быть достаточно, чтобы выбраться из форка. В следующих версиях кошелька мы значительно упростим эти процедуры, вы сможете реанимировать свой кошелек из его интерфейса.</p>\r\n\r\n<p>Подписывайтесь на наши каналы, задавайте вопросы и оставайтесь с нами!</p>", "text_en": "<p>In very rare cases, when you turn on your wallet, it might not be able to sync with the network and keeps showing a &ldquo;please contact the developer&rdquo; message. This can happen if you have not turned on your wallet for a very long time and missed some important updates. Or maybe the wallet wasn&#39;t closed properly, e.g. if the computer was suddenly switched off.</p>\r\n\r\n<p>Usually, you can solve the issue by upgrading the wallet to the latest version from the&nbsp;<a href=\"https://emercoin.com/en\" rel=\"noopener\" target=\"_blank\">official Emercoin website</a>. But if an update does not help, your wallet may have been forked. What do we do then?</p>\r\n\r\n<h2>First, are we on the main chain?</h2>\r\n\r\n<p>You&rsquo;ll need to check if the hash sums of your most recent blocks match those on the main chain.</p>\r\n\r\n<p>To do this, open the&nbsp;<a href=\"https://explorer.emercoin.com/\"><u>Emercoin Block Explorer</u></a>&nbsp;in your browser:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/Y66QprccLdb8aENEAtYObscYDZmniq2SiUgxnLqh.png\" style=\"height:637px; width:943px\" /></p>\r\n\r\n<p>The number of the last block is at the top left. Let&#39;s check that your blockchain contains the second-to-last mainchain block (block #364341 in the example). Click on this block&rsquo;s icon in the list on the right (the second line at the top). On the page that opens, we can see this block&rsquo;s hash:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/AQbtm3nCt99N818VLCJUskFA0nAd2dNMQnUFue05.png\" style=\"height:661px; width:1003px\" /></p>\r\n\r\n<p>Now let&#39;s make sure our blockchain copy also contains this block, with the same hash. To do this, open the wallet (screenshots below are for computers with Windows &mdash; other systems have similar windows).</p>\r\n\r\n<p>Open the console in the Emercoin GUI:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/7TctZkZjHXQGYBSPyrd19YYyeOZlUnPbfjS8yyVQ.png\" style=\"height:150px; width:926px\" /></p>\r\n\r\n<p><img alt=\"\" src=\"/media/UYhqCYUnXJyKkTe7FscbqeBowehtkJ5DoW9gv8Wy.png\" style=\"height:454px; width:928px\" /></p>\r\n\r\n<p>Enter the getblockhash&nbsp;command with our block number&nbsp;and press Enter.</p>\r\n\r\n<p>For example, for block 364341 (getblockhash 364341) it will look like this:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/FSqlqdwRKxqlcLCUmblowWXehSXbN1auCPjyF2b6.png\" style=\"height:371px; width:842px\" /></p>\r\n\r\n<p>If the command is successful and the printed hash matches what we see on the browser page, everything is fine and no further action is required.</p>\r\n\r\n<p>If there is no such block, or the hash is different, we&rsquo;ll have to re-index the blockchain and switch over to the main chain.</p>\r\n\r\n<p>To do this, follow the steps below.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>If we&#39;re really in a fork, we&#39;ll need to get to the main chain. Below are the steps for different operating systems:</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>For Windows:</h3>\r\n\r\n<p><strong>Re-indexing the blockchain database in the Emercoin wallet</strong></p>\r\n\r\n<p>The easiest way to test and arrange the blockchain database after a crash is by re-indexing it. To do this, we need to add the following line to the emercoin.conf file: reindex = 1.&nbsp;In the wallet menu, go to Help &gt; Debug window &gt; Information tab. There you will see the path (Datadir) to the emercoin.conf file:&nbsp;</p>\r\n\r\n<p><img alt=\"\" src=\"/media/7mO7smrri56oPu0P3eL6HcJIkC45MY9qrRkRrDCt.png\" style=\"height:376px; width:928px\" /></p>\r\n\r\n<p>Copy the path and open it in Explorer:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/c1MUxzrrQDTdLk9J3JhBlKTmxP2tRZWq91cEAqyi.png\" style=\"height:434px; width:936px\" /></p>\r\n\r\n<p>Open emercoin.conf in a text editor (e.g. Notepad), and add a line, reindex = 1:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/d0wylUB1kKXYLP19Fm6SN5CPqQchln4d6oKspfV1.png\" style=\"height:189px; width:721px\" /></p>\r\n\r\n<p>Save and close the config. Start the Emercoin client.</p>\r\n\r\n<p>After the client starts, open emercoin.conf again and delete this line (to avoid re-indexing at every startup).</p>\r\n\r\n<p>Re-indexing should take around two hours.</p>\r\n\r\n<p>Once finished, repeat the check to make sure that the blocks&rsquo; hash sums match.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>For Mac:</h3>\r\n\r\n<p>Here&#39;s what being in a fork looks like:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/CmBdz5f2rgHvz3QxgF8PB1t7gST6TxZ3jgYVN94E.png\" /></p>\r\n\r\n<p>Open the debug window:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/cGWRaqYk4u9QMKapD8CQyzUNXTJmQhvONmAXc1pr.png\" /></p>\r\n\r\n<p>On the Information tab, find the path to emercoin.conf:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/fxKrWwxXZipORL5SccUW4jVAeITnMam6Hl3XDGRp.png\" style=\"height:705px; width:1014px\" /></p>\r\n\r\n<p>Open Finder:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/LDG0FxccxoixUWLXpHXZH33hFrqBMKi2WbYgbsuu.png\" style=\"height:706px; width:1019px\" /></p>\r\n\r\n<p>Enter the previously copied path:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/9PZ1D2IxqhGO41Iq2w62boQfHPr6uLKklCv6ln8x.png\" /></p>\r\n\r\n<p>Open the folder. Open emercoin.conf in a text editor. If no text editor is associated with this extension, do it manually:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/lVokTVfQMPaVShJmyV05BqldXesnqM5CczaztWgn.png\" /></p>\r\n\r\n<p><img alt=\"\" src=\"/media/hWSHaspeHpQZHE6H0IxfMX3RLweeRtNZXBFbN8bE.png\" /></p>\r\n\r\n<p><img alt=\"\" src=\"/media/WSOOLaBZypNkGZvK6Rwucbj8dsMHB3rQWWg1Rn3v.png\" style=\"height:724px; width:1007px\" /></p>\r\n\r\n<p>Add reindex = 1, save the document, and start the Emercoin wallet:</p>\r\n\r\n<p><img alt=\"\" src=\"/media/63K91KAzlBu0hy5APvo9Rrxcwz5JFVaqXmOHB12S.png\" style=\"height:715px; width:1011px\" /></p>\r\n\r\n<p>Re-indexing should take around two hours.</p>\r\n\r\n<p><img alt=\"\" src=\"/media/DhcwerTBKhEXYvztw2DbvoPcOCg03rdWnemmQBQe.png\" style=\"height:728px; width:969px\" /></p>\r\n\r\n<p>After the client starts, open emercoin.conf again and delete this line (to avoid re-indexing at every startup).</p>\r\n\r\n<p>Once finished, repeat the check to make sure that the blocks&rsquo; hash sums match.</p>\r\n\r\n<p>These measures should be enough to get out of the fork. In future wallet versions we will make these procedures much simpler so that you can recover your wallet from the UI.</p>\r\n\r\n<p>Subscribe to our channels, ask us any questions, and stay tuned!</p>"}}, {"model": "info.news", "pk": 3, "fields": {"title": "На биржу LiveCoin.net можно зайти используя блокчейн-сертификат EmerSSL", "title_en": null, "slug": "logging-on-to-livecoinnet-with-emerssl", "date": "2019-09-16T12:22:59Z", "image": "ssl-sert-livecoin.jpg", "image_en": "", "text": "<p>Важное&nbsp;<a href=\"https://www.livecoin.net/ru/news/view/326\">событие</a>!&nbsp;&nbsp;Livecoin стала первой биржей применяющей блокчейн приложение&nbsp;<a href=\"https://emercoin.com/ru/emerssl\">EmerSSL</a>&nbsp;для доступа пользователей к аккаунту. Пользователи могут установить личный сертификат и настроить вход на биржу самостоятельно. Этот вариант не отменяет двухфакторный способ авторизации (Google Authenticator), но является более безопасной и удобной альтернативой системе входа по паролю (<a href=\"https://habr.com/ru/post/257605/\">Хабр</a>).</p>\r\n\r\n<p><strong>Зачем это нужно?</strong></p>\r\n\r\n<p>Вход только по паролю давно признан устаревшим и небезопасным способом. Сам метод имеет фундаментальные недостатки: пароли уязвимы к подбору, перехвату клавиатурными шпионами, видеокамерами, поддельными сайтами, методами социальной инженерии, а также перехватом через публичные точки доступа. Ситуация также осложнена тем, что большинство пользователей склонны использовать несложный пароль на многих сайтах.&nbsp;В общем, нет покоя пользователям пароля.</p>\r\n\r\n<p>Блокчейн сертификат EmerSSL, который нужно установить однократно, позволяет решить вышеуказанные проблемы. Этот способ устанавливает защищенное соединение с биржей напрямую, что делает бессмысленными атаки &ldquo;посредника&rdquo;, а также с помощью фишинговых сайтов. При этом вход на биржу по паролю, остается резервным.</p>\r\n\r\n<p><strong>Что нужно делать?</strong></p>\r\n\r\n<p>Перед тем как создать сертификат EmerSSL, вам потребуется:</p>\r\n\r\n<ul>\r\n\t<li><a href=\"https://emercoin.com/ru/for-coinholders#download\">кошелек Эмеркоин</a>, установленный, синхронизированный (потребуется от 1-1.5 часов при установке в первый раз)</li>\r\n\t<li>Небольше число монет EMC (их можно&nbsp;<a href=\"https://www.livecoin.net/ru/trading/EMC_USD\">приобрести на бирже</a>&nbsp;Livecoin.net)</li>\r\n\t<li>Для Windows пользователей, программа OpenSSL.exe (для генерации сертификатов, скачать&nbsp;<a href=\"https://wiki.openssl.org/index.php/Binaries\">тут</a>&nbsp;или&nbsp;<a href=\"https://indy.fulgan.com/SSL/\">тут</a>)</li>\r\n\t<li>существующий аккаунт на бирже Livecoin</li>\r\n</ul>\r\n\r\n<p>Видео-инструкция: Как установить сертификат EmerSSL для входа на биржу Livecoin</p>\r\n\r\n<p><iframe align=\"middle\" frameborder=\"0\" height=\"300\" scrolling=\"no\" src=\"https://www.youtube.com/watch?v=mF5jzSXb1dc\" width=\"600\"></iframe></p>", "text_en": null}}, {"model": "info.news", "pk": 4, "fields": {"title": "рдрВреенрАВредВдрдАннеА", "title_en": null, "slug": "rdrvreenravredvdrdannea", "date": "2021-03-31T12:53:47.598Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "снВБВВккВВВкжГнеджккГнБкИснсзджиББГнкВскжссАеВнВГжзВдекрзкАВБдВсзсрАккБГнрдднрдзикдГВррБзнжджБВнИкнрГИскдкВАнАББесГдисдздГкжсрВдекГГкБккАрВскИГИзжзрнжжВежИкИсИнеИБнниБГжБВкБкнинрГжГГрАБкдкГдБААддзеедкжркАрАндксАикВБрБззБскиАВВзИжИдндВсАВИиеГнГкеидждсрднждВиВкесдз", "text_en": null}}, {"model": "info.news", "pk": 5, "fields": {"title": "рнедееАднАнрАд", "title_en": null, "slug": "rnedeeadnanrad", "date": "2021-03-31T12:53:47.612Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "ГикснББИиксиАдекрздесБекздВижскджАккнИИсГрзВГсжжББИГдкБзрнИрБАИГАрсАБАВИизеАГсрААГсГГеВжзсенрИжВИкзААиесВГГнББГерБкссБАжБн", "text_en": null}}, {"model": "info.news", "pk": 6, "fields": {"title": "АенекдВенВнкесеедкВеАсАсеВдкс", "title_en": null, "slug": "aenekdvenvnkeseedkveasasevdks", "date": "2021-03-31T12:53:47.621Z", "image": "chto-delat.png", "image_en": "", "text": "здГдждАВджикВееБнжиксксГдсБкккГзрГидзидрГИкизГБГнжАикАдеАежГБкеАкзрВИГжинжзрсеГдГрнежнГнВднзсздАнкдБеГдрекккжнзБВдВжБеБкдкдкБдБркдГниждсждсАрждГиддБББВдисдззкБд", "text_en": null}}, {"model": "info.news", "pk": 7, "fields": {"title": "еВдАнрнедАнскеВАе", "title_en": null, "slug": "evdanrnedanskevae", "date": "2021-03-31T12:53:47.630Z", "image": "chto-delat.png", "image_en": "", "text": "АБсИГсзИезсзрсИАсзксннееддиеВВАкжздИднсБдГзжАИАиГреБкддсззАдкГисГкрреВГГзВВГкИГБАкБкБГккндзкдБжеддидВАкГиБкдИГВнВидИАеиАижВВззкриекГнеБкВББВскВкдксАежАсВедкеБАккИзеВеееБжВБАкВИАд", "text_en": null}}, {"model": "info.news", "pk": 8, "fields": {"title": "нкесеВсВАркеВкреАрндскнеА", "title_en": null, "slug": "nkesevsvarkevkrearndsknea", "date": "2021-03-31T13:07:03.130Z", "image": "chto-delat.png", "image_en": "", "text": "БккждссириГсдкскнБсжнВддИдсдееждннкнсиржкркирИсиркрИрдИВеснзГеккиижзГкеизГкИВВрикИиВАеедсГзИиГВВнсдрнзкАдкдИБдзБсВккккрАИИжрсВндиксеБкрдиВдржзриАГдниздннзБжГГБеикисеАжБГккдИВБнВВккГриГИеезкдиБзкИзидкджжГжрГАВсрИзВккдАккижБскезАзздБААддднднкАрксрВжисзВиннкБГднзнБзкежжАзАикдскнБВжВеАкАжАГАдБдИддкдГксГнжежндедИБзВжрИедИсеГнесГзрннИГГкесдИж", "text_en": null}}, {"model": "info.news", "pk": 9, "fields": {"title": "нднВВВкАекккВАнВАнВкАддАдсскснк", "title_en": null, "slug": "ndnvvvkaekkkvanvanvkaddadssksnk", "date": "2021-03-31T13:07:03.140Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "дрикАсАГдИрдсГБздрсБнБкжирАзкБиднАБсркрисннкБрАзВБГИГзИесзкВенкжекБдреБикдВнВБдсИсИкндндАдГИИГАБдИиАБзнВкИежддржинГрИБизжБГждкВрздждкИждидБнндсБкБВИжИсднзиАБеБзБежАГВзнББкБАБииАдВиВсИАсеВнИГжзисИдВидБжзердВдиГрБекржднкдБдесБжредБсАрГкеВнеИБАдркБдрГрББГкдАдрБирГГдзсВздджрзидже", "text_en": null}}, {"model": "info.news", "pk": 58, "fields": {"title": null, "title_en": "Flexibility", "slug": "flexibility", "date": "2021-03-31T13:10:32Z", "image": "", "image_en": "YesNo.jpg", "text": "", "text_en": "<p>1111111111111111111111111111111</p>"}}, {"model": "info.news", "pk": 59, "fields": {"title": "нерссернкдррднАсрАее", "title_en": null, "slug": "nerssernkdrrdnasraee", "date": "2021-03-31T13:33:39.062Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "сндриГАкИВГБизБдиГкждижденАВИжеАБИжккжржсрзИжжсндзксжжАжкГББкнВрГАниБкИеБзГИАрГинндеАксккрАрдкИИВнкИАкесБердВкВдккВрБкдАкижВизГкВидАнИсИзБГнАнкжГАкжнкАкднБнкнжжГкдАзрзБдГдАиИенеерекБикждИздАВВБжБкедИкГнИджеГАисзБкиеБдВГзжААисГкБк", "text_en": null}}, {"model": "info.news", "pk": 60, "fields": {"title": null, "title_en": "wSRzoSgzqnqRqFoggzonnFFwSg", "slug": "wsrzosgzqnqrqfoggzonnffwsg", "date": "2021-03-31T13:33:39.073Z", "image": "", "image_en": "ssl-sert-livecoin.jpg", "text": "", "text_en": "nzXoXRnShngRRngyGGyngSFeqFwgVXhngqunghoRSwyRGnXSzwyqSogRRFqyXSwSzlhelywleVeolgeluFyyuVXeVRgzweyRSXhwezlVGhgwgGelwVqhqSzzSohSXSlVlyoqlXGqoGlluyyzXGuGXzwGSlRzeeqlwFhhgyozGyhVlgFSoqGhhqozRlqoyRuVuuGnwXqRwugzuqwVeeughqGwVeSVwhRwlFVgunqnFXVogVXXGwlnRXeFXguogFehuglgRwuzyXnueeoyXhnXSwznhVuFlyRyFqgFRqzwqzSwSFzlyuSholhSwnoluGgSRqugRwwyuRSSVhRneuSVoynyougneoFGywGhuXogXwXqqhFzhwFVyGuRVVluhngXzwuVXXnwuzRyzqGoFogoeyzGzqlFSGgzV"}}, {"model": "info.news", "pk": 61, "fields": {"title": "ееееВрААккВнднкдВВрВек", "title_en": null, "slug": "eeeevraakkvndnkdvvrvek", "date": "2021-03-31T13:33:39.079Z", "image": "ssl-sert-livecoin.jpg", "image_en": "", "text": "ддзсежсБГжГдзГжржсжГеБдсинИеркеккБГекГИзВздБкдААжрнннддзжржГизИдиискдеджкеИсдрддИзГИкззнИВзжИнВАезкААдеГкГркИсИВрБрВиБрссВзееГИжрскдииБкреднкккизеГднжд", "text_en": null}}, {"model": "info.news", "pk": 62, "fields": {"title": null, "title_en": "FqSSzFnFoogRqhSzqon", "slug": "fqsszfnfoogrqhszqon", "date": "2021-03-31T13:33:39.087Z", "image": "", "image_en": "670ce7133c778048e50b48217f04fbe5.jpg", "text": "", "text_en": "eRqgeSzFlyzShSSwhGSyRoVoSnXyRooReVSeoneFzFFXywogGqhnGVRnFySuGSGzznXGVhRuuXVFoVozoVglwynueGohehleyqlhzwRSzwqwVGyeqqGnFRenSnGVoRVSgoGwnenlqGeVReolyFFhSeXzVuwXlFhegSnqozXwRlXwVuhywFGnuSwuoXRhSSqSGhGzgSRGVSGlyznyhwuVRhzgGSuRhXGwVzwXGqlhGSywuGGlwFFRFGeqVluzgeFluugGuSlVyXwznShnRqlySeXewllRXoGFFqXhVyeFSGezVlgGwlgoXRVwoSezGFzhnRlugGXGFSeFFwwgRSqlyGqlSuRGgFlzXgwGGRqgqFolouGeRqwoSqnGVqhShggFVyXlRywqwyuFRlygqnXouznqG"}}, {"model": "info.news", "pk": 63, "fields": {"title": null, "title_en": "nnnnnnRqSRzzgSSh", "slug": "nnnnnnrqsrzzgssh", "date": "2021-03-31T13:33:39.094Z", "image": "", "image_en": "670ce7133c778048e50b48217f04fbe5.jpg", "text": "", "text_en": "XXGogShXXuXlqlRgwueqRShlgneVzguyqGzzXgVlFyFXqeGFFoeeXXqwzVFzwnVXhnVluqFnewzSeqqRhoRqGqehVuhoolGhXGqRlFllFwGnenGGoleVhRGXVhegXXFGFnzoewezlGwXeohXoogGeqXqnGneyGlXwnGogqReeyRuXGoRReyVSnFFuhwGoVynFzuygRwqhuVlehnqzzVyoSohlgRgzhzqGVlyhzXqReXqRlqeSgnSuoGGgzuzRlRFqhwwelSnFSqSelzyVuwFwXGVhRSoGhlenwFuVFGzGGggRVSSFRzSyznRwFeRwzwqegXlqweGRuVqghqFylFSVhXSzwoluFeyzqye"}}, {"model": "info.news", "pk": 64, "fields": {"title": null, "title_en": "RRogShRFwhgnRnwogznozSoSqRn", "slug": "rrogshrfwhgnrnwogznozsosqrn", "date": "2021-03-31T13:33:39.106Z", "image": "", "image_en": "ssl-sert-livecoin.jpg", "text": "", "text_en": "XVXXFeXVwuhXFnSzllXRSzVGelhGGqGyoqlzXowunhqwngGoqlqXzzqVgRyegwSloFReGSwlVGweheFoVnzReFhhunXguhqwqGwVRuXFFyGFzlVGFonSRFFggzGVeRhoqoXyngzwhVVzgzuygoqRXwRgzySeolyVGzoqeVeuzSVwhSuyXuuzhoFSleSVSRySXXzhzyoGVVGeSGRRSFeGzhwohuouFnogGFllFSVwwXzXlVeozXuhuwlyeGeeleuuqSFRRlXgghnnFoyhqVGuwqyuoueXXRznlwVgSwVXeohShgqRRnVReSRGqlyFVgllVglRzXRwRlRenzzqgllhgGguXnugVlwlngFyVwlRegyynqhXzVSeogzSwFwogzzSuzhuSoFwXGXnoSSygGgRq"}}, {"model": "info.news", "pk": 65, "fields": {"title": "ААнснВВнесе", "title_en": null, "slug": "aansnvvnese", "date": "2021-03-31T13:33:39.113Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "нсБиВБИксАкддркекИсБндкднГдкГАдкрГГкБИрАкзГркддБкБрнзИижижГдБкжеркезАззИсзИАрАкИжкИИИсВзкржАксБкирдниВиБжкБсИзккнГдеИАиикжВиВдриекжИдВеезеВкАжизнжззрдВкридддккАнжежкГИБздАИИдБдГрдсАБАкрИдрИдикВзиднжИсИкснАндекГиИИнсидсзиздждИВдАксзрВВниркИИГсрГнсденГкрАзГкВИАкИд", "text_en": null}}, {"model": "info.news", "pk": 66, "fields": {"title": null, "title_en": "wqhFwSnhow", "slug": "wqhfwsnhow", "date": "2021-03-31T13:33:39.118Z", "image": "", "image_en": "ssl-sert-livecoin.jpg", "text": "", "text_en": "FRewqFlSnoRyzRwgwyhXzwXyGRyyeqXnGVuhwhozeGzSoXSXnGzewwguqRXoGzyhFwSzXlhoXSRGXyRXuGeFFwqyGgquFqRRzRVhegyeVlGunnqhwhRVGRVhwllwXeqgunFReXu"}}, {"model": "info.news", "pk": 67, "fields": {"title": "еАрдссекАсрнеАскннВАд", "title_en": null, "slug": "eardssekasrneasknnvad", "date": "2021-03-31T13:33:39.130Z", "image": "ssl-sert-livecoin.jpg", "image_en": "", "text": "еАкирБжкикидзАБккзБАИкИкБкГкВВсВддАкВВрдкддГкиесззсВсАкккдкирзкдБАБсежкИздккдкзИинеААБкИВиВкААдесрИсдАнБриИезркВрГсикжзВеГжГкИкрАснАдВАБскздГсИкдАкВБеддИкнБкВесиксГжИжБнрндИзиВВИнкжзкВдИнрдзсАБрдижсерИеБккзкдрикВжирижГкдБАдрднердГдАнсекжидАнжнИГсеБжжснБнсеесжнккАкжеВдизАжжнирАГГАеГиидсрдИдкждАдИеИккВнкрИснАсиИеГАсиисжнджидззБВИрнркБИннзнАдААки", "text_en": null}}, {"model": "info.news", "pk": 68, "fields": {"title": "екеАднААВскснрАнАснднреАрннАВАВ", "title_en": null, "slug": "ekeadnaavsksnranasndnrearnnavav", "date": "2021-03-31T13:33:39.138Z", "image": "ssl-sert-livecoin.jpg", "image_en": "", "text": "еиГнзГиссдижИкждкВИдВсдезсБзжркдБиГркБрВиАрдкиАддкиеГВеАридВжеГжрГсжддинИеджАдИдржнГдкнддАВдззднкБГдрБддиБВзиззекБккдГзеААеиздИскВВенАкдГВркезИреинжжАркИккздеВрррИАиедкдАкАжИИрсскВжГкВкБизБзизкГГкрИАкВднВжзеГкнВккГзррзАдднжиГдкБрАннИнскндИдеИкжеиГкВзежАИжАВкдскекдкБзкрАздзеИсдрдкдБкБдссрнИкжжедБжВнджБкВнГГрдИнкААккАссААджГГИждкВзИИнжсинзидкИИАкнкдГнсрдккА", "text_en": null}}, {"model": "info.news", "pk": 69, "fields": {"title": "кекнрндедАссВсАВАдннкре", "title_en": null, "slug": "keknrndedassvsavadnnkre", "date": "2021-03-31T13:33:39.152Z", "image": "chto-delat.png", "image_en": "", "text": "кИБВддкВБкжкиИзесзИдкжАсдсБзрсрГГИеддииБВсАрГВсдВзжндкАзнееББссдждинжкздрБГВдрИкГИГикВсВееидджкддБВинАдАзИекндАдксИиеднзнздекБГИсреББдндГеежнздВсдсБИизжкденсдкседАзВндзАеикАдсжАБрГГкззкжкВеБсИеррГдскжднккАкдИИеБдВикжккдИикГАрждГИснБкзекеззезддизВВИВнИдсАздВдкБсГГззАИркзксдкезБАГкБкрВИкжИсГсАББдсГккВБрВГГБИзИИдрнБАГБжБзБриккдИГГдееВзиГррБВдкГдИАВсжиизрддзекнВкИнднидкдсГАкжАрААВГждрезиИдсеИежИсдиккГжАнккБГВирдИеГИАВдВккААкАзкГнзИИдкднВАнИдиксездИкВдБВкГкБкндижБнБГБкжзсиБГИкиГдИдВВнждджБГГкееннекВк", "text_en": null}}, {"model": "info.news", "pk": 70, "fields": {"title": "рВрсАкдВВдВде", "title_en": null, "slug": "rvrsakdvvdvde", "date": "2021-03-31T13:33:39.161Z", "image": "chto-delat.png", "image_en": "", "text": "дннрддГркдидИкзАзВжеАдИдАрБиБзкккБВдГБзВАВкАнГИндАВкедВнзАежкззГнзАИВкккдИиГсБкАВжИиннеГкрИИееАдББеддАснсГсриддедкИркидсздкнИсккссВсИжВжзкнсржжВИИржжккдсАдрзИжВеБГИрБсржГииБеидИсАБГГеджкдзисдИжАдиГИежжеАкиВсдсзрсИиАкдрАиВркидздждддкББднкИнБсдкссидАБнАсБкрдАинзИзжИдкиИккдГАскркГИжзкзддБдГекеАкидекседБзГнГдзГсезиздГГсВВирдддАВддндкАздсГккБкздидБкИБдреГрАздВАкИкеркиВнккдБиИезБдидизВиГииИдБниеисикГнИзрсИкенжВждБдИзрдГккздиВдВсирБсиккАидГнжрГИждкдИиААИреркГджИкдрнеиАГсВсВиесАИикнзкАеиннждАжсзсБзИеБ", "text_en": null}}, {"model": "info.news", "pk": 71, "fields": {"title": null, "title_en": "SFSohRnSqRFgqghngn", "slug": "sfsohrnsqrfgqghngn", "date": "2021-03-31T13:33:39.177Z", "image": "", "image_en": "ssl-sert-livecoin.jpg", "text": "", "text_en": "FynGquShoRXXzwzgFVzyzyuVeSSgSVzlygqlVGnlSoRlRwuVlyXwlVzhVSqgyXlgFwSySXznluFShGeyVqSqFXlwhlGgonVqwwlegweVSquGyeuuqwFqnuozhowRVlqgFXXelhySlVSunwhRXRnRnnnSlzoXFXzzGhenFnhuyeueXXGlRGRuylewlgooqGhVzoohXohlVoFVzhnweGoSolSoqGwoSnGyzXluwgShzVozoRyzFXSgwgnFwuuVXwuSnwRnuVeoyhRlFhFwhVuVwGqRquVyoGGuFhnRwwFRlFyqgRqSqoVgnezgwlllGuVhFezewooXwRFGhzgnonVezwRohgqSnhzwqzuoSnRSownRXqgwGqeeXgzwelzhwSlgoyeRwhgwGqVglo"}}, {"model": "info.news", "pk": 72, "fields": {"title": "ВкдедВкдсрд", "title_en": null, "slug": "vkdedvkdsrd", "date": "2021-03-31T13:33:39.184Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "ннГкИкииИкдВБрдидзззББжзИеидсГекиндджБсзиеснжкГВиГдкАИендееБрзАВндкееБркзИИдзкисИАдрГккженАВАкГИсжБскГеиИдИИдддеИжкБдкрринжкиееГккВАнзБИидкджГИВВзекБИИнГИрдежеГИкБиВсреддрзснижБГжнккВГВБдИкАжзрскААкддкдижесВдизБдддГГАиджВскдиддрзИждддкнздзААВсддГдИГкнАри", "text_en": null}}, {"model": "info.news", "pk": 73, "fields": {"title": null, "title_en": "gzggnSRhnRw", "slug": "gzggnsrhnrw", "date": "2021-03-31T13:33:39.192Z", "image": "", "image_en": "670ce7133c778048e50b48217f04fbe5.jpg", "text": "", "text_en": "zGwGXwSVSRyqquuRqlSGylGzGwGXGXeSquXgowzewGFGzgegyVnlFGzwgguVuVquwzhVuhVXeRFGXnhuuSlyyXShlGnVySygVyFRGuelnulXoeVRXnGyg"}}, {"model": "info.news", "pk": 74, "fields": {"title": "екдекрекнед", "title_en": null, "slug": "ekdekrekned", "date": "2021-03-31T13:33:39.215Z", "image": "chto-delat.png", "image_en": "", "text": "БзеекеизАкенкрзсиддксжззккИГрБсАзеИАсрдББкрГжзсИГдкБкиВкнркжнндИеГБдсзрерИреддкВддзсрсддВкГкеедерсАеБксГсГжжББдИВВдкГБВАжрАренГАкреАкБВААГАккекнждкББдВАкВнБддкВБесВГВдВеБисБидБнкежкАнксААкзидБржАндрсксИикдАкБкнизнеИИзкАнжикеенззкирдБИБрирдБрГкдВсеАкеекенВГжБрнкБиГИздВдББВрВдкдБАжИдккдзжндкзкдекккрИдкБкБдккАирИсисАжридзГкнжджкдБГеБИАерзкАГжжкнжГеБАзднАеиеекздкнАГрАГИиндИИердддААркнркнкИВИдиБВддсГГИВсдБкИсВВнАеВГднккдзксерИзГдркисИнАдидидкдИкИркБАирИизкГнзеинеБИдз", "text_en": null}}, {"model": "info.news", "pk": 75, "fields": {"title": "ерккдВВрВсрккнеекд", "title_en": null, "slug": "erkkdvvrvsrkkneekd", "date": "2021-03-31T13:33:39.224Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "кнГдксБнГдИГрежжАГдднкдИндВеинниекжБиежккрАИБндкВкеБВддГздекидкиИкВБВАдБкИнжддзиВдкБдИВскзжГнждрАВжжГАджИдикеднсБзидндГнИГАИджисБАГГБАрдВзддГжжедкдкнжиААкАржкжддкннзкнИВкдзрддкрзкжддАрзкдсдАБексИдИБеАкижкиИдссВнндГБкБзрАжБдВкрГдВржзеББнддзИсзксИкеИБдкИзГжБкГеиАенсиезкнБждсджсднккеАГрГАкниГГиГиГнББАГржеИсВГзинедккрнИдеГкиеВссксБзнкдВИВджжеВнззизиАнБддГВБердсдсескдБГкИИдиИрзд", "text_en": null}}, {"model": "info.news", "pk": 76, "fields": {"title": "креденВскеАВеенркВннсеАдеВке", "title_en": null, "slug": "kredenvskeaveenrkvnnseadevke", "date": "2021-03-31T13:33:39.230Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "еИдрдБИекзГкжззндВкджсдннеждсГБеАжкздрржБГВизБкдГринезеБАккезкджркжГдкдАГжкАсИсжжИкндкжИБнкиеАВсжАжрИБдеАерАдрзсИсднВеикеззкинсскВдкрИеГАжсдскИИнрВнркИнздВсИИАкррнзнжкрААкИрсИкБкзррр", "text_en": null}}, {"model": "info.news", "pk": 77, "fields": {"title": null, "title_en": "SgFFwwSwzwnnoongznzwgqhzqqgFh", "slug": "sgffwwswzwnnoongznzwgqhzqqgfh", "date": "2021-03-31T13:33:39.246Z", "image": "", "image_en": "chto-delat.png", "text": "", "text_en": "lnugSVoyghoGFzSqFuGeqowlVgeGRlwuuwelwewwlRRGFoRRlnhVFqqgVeqngwunRunhnzGeehFulllqnRVqyeGRzhnRyuouqySSXouFnnVwuRwhRnywqngRVRnuleoRSuwSgwuXwnSXXqzXnzzzGqhnlhyRwVXeGywwXqoVRgzwwqVgGunqeqGyhhhozVeuwyoqhnlRVlhuqlwngXwzSVzzXVyRqVylhFquuSFFqwhnqwXShuenyGqFySVzoqzuylwgRw"}}, {"model": "info.news", "pk": 78, "fields": {"title": "дВдесддВВАркндВекВкдннсАддррн", "title_en": null, "slug": "dvdesddvvarkndvekvkdnnsaddrrn", "date": "2021-03-31T13:33:39.257Z", "image": "chto-delat.png", "image_en": "", "text": "рдБдГиддГкГиГеенкГрржГИИдрВредижАГзГркГГреБежИГдБВскИИИВВеекексрддАжзндскзкБрсзАрБИГжГкжджсБднАБкидВрВзБдииВсВдВеВдзГддБзкзекксдкБиИезриекБВкдАкВрдежрВдкджВжиАеикдрсниАИкдГркнБГАидАдззеркрАБсАддкнкБнксксискккГИАркББррсзВежВкГкдеснсВАзжрАГср", "text_en": null}}, {"model": "info.news", "pk": 79, "fields": {"title": null, "title_en": "qFzhwqoRgnonohgoqgnnFzSSqgqw", "slug": "qfzhwqorgnonohgoqgnnfzssqgqw", "date": "2021-03-31T13:33:39.270Z", "image": "", "image_en": "670ce7133c778048e50b48217f04fbe5.jpg", "text": "", "text_en": "gzoVlogFRozFSquFqoSuzVehuyylFlqzzuXFqzloqwlyRSywlhlVhnFFVeSlSFlgnFghgXSeyGhwzzRnulVSXezRRelGlweVSeqowSlhholSoGoyFhRRgqXueqooyeReeyewRqShoowuuyzSlyFXoGlnznoohuye"}}, {"model": "info.news", "pk": 80, "fields": {"title": null, "title_en": "wnnqhnFSSoqqRohgqhnzFoggnqRFoRz", "slug": "wnnqhnfssoqqrohgqhnzfoggnqrforz", "date": "2021-03-31T13:33:39.285Z", "image": "", "image_en": "chto-delat.png", "text": "", "text_en": "gegqSeSRowyywSyFoVwRhSngyunoGyyRoqnyXgeqGgewlgeglRuogynVeXoFoGnzwGqonoGhelqeuVSgwhyqSoSlGezgwwoezzGynSgXXohXSuGuwXVuFhqnuSXznyXqegGwyRGFuVlGXqllwXnSXnuoFooVennwnhuzFuSlXFGXFlzGXyoqRqRXSeqwznXnoeVhlRhhleXhgSeqeVqhywgFhSeeFlhwFougVuShShRuyhgSgSohRnlVRhqSwnVGGwSwhGgzgwSVoXXXSSRGgFqFhXgSzyhquVnGlXegGXzuFRululoznGeFSGyXugGSgzRuywnRqwuounVzhzFeoueuyVFVgenRhXehguGwGqFRRzShluzVeoneSXFzXhXeXwoVXeoyFnlRGwFGuFFguuhyVqeGwyqowSGFezRXVFnggzwFegRFnhyqullyoylGyeVFFzhRlGRnVezwhnelgguwqgVoGezqowX"}}, {"model": "info.news", "pk": 81, "fields": {"title": null, "title_en": "qqwFqzhhzFog", "slug": "qqwfqzhhzfog", "date": "2021-03-31T13:33:39.304Z", "image": "", "image_en": "670ce7133c778048e50b48217f04fbe5.jpg", "text": "", "text_en": "VolzhXqeXqVyeeSFhFGugqyGFXFXwyXzughhhhSnznlXneRluRoRlewoSghzeyheySyFnGeqXyolFVhnnVVRFwwGSqyFVwyneuGVyGeRglRGFqVlhyXhwlRnyRSuoeXRzXVgVVylGqqneySRgRqRuRnFzhSneuouySeqluRozzlnSRollGnzRenlSSVXylwGGSlRlXRnFyGeughFFXSnyowXSynRRGRoXGSyFXnhFeRuzzeXwhhyoRlRGeSySozzzzeoqgqRghXoyXyeXlzXRgwSnFoGVnRuuunwwuGXwhyRghSuqSlwhXRqGnzegRVVgqVynqneFlFhGRGSuzeqRquSGeqSVueuFlSGzhuwlXnFzFSVnzzVegeRyzGRSnnywVuzFhlynqghgGSXwewonwgwoegFnqqySFggeyuozRlRGgqSzhFlyyywFhwzVRFgFlRlGhylFhFuwuogngwhlwFewonSFVqGRVoeVRwRyzegVqeGVX"}}, {"model": "info.news", "pk": 82, "fields": {"title": null, "title_en": "nzgRnnhwRznRhzoRohonwS", "slug": "nzgrnnhwrznrhzorohonws", "date": "2021-03-31T13:33:39.316Z", "image": "", "image_en": "670ce7133c778048e50b48217f04fbe5.jpg", "text": "", "text_en": "zGFnuyzRSuGlqgyyhueFugoohVVwhueyFewhgoyyguhgqhFwqGoezwyRShFXuzRGyRRzlwouwVogqRzFlyeVGXeoeeGXgeRSXShuSugqGgGgFGuhheRoqXGooVhgFSGFnegRRgyzlwqVyVXVenlgggRzVqXGXzwwzRglqySRoqRlySGXgnlunzVRylFXluqyRVFynSoquunznyozFyzyouuyhhlullonoqRSywSzeeyuhSuXRwXFGggGnhGegwSoSeFlnRgweyywXyyhyXzhFyohyVlzSFFzX"}}, {"model": "info.news", "pk": 83, "fields": {"title": null, "title_en": "hgnRwohqRFSShzozSgghqwgqRqSRg", "slug": "hgnrwohqrfsshzozsgghqwgqrqsrg", "date": "2021-03-31T13:33:39.327Z", "image": "", "image_en": "chto-delat.png", "text": "", "text_en": "SwzwoXqGwlqRzoFXuRqeVFzVheRzGnhSugSuwgheSloVFFFXgFqnlhGRGXXunoSyoFulSlFnhGuzwyggyFRqzSlhFwwwwGhnlFnnVwuzgwhynXleyVhgFGFlllhRSFezhzzFhqghVoXzwuSoeSwXehgFuVqGFFSFqFnFoueelyeRVynhzelolFVnwReunFeogVuynSlSwehzgqeghVyRXVSnhwXwuSeSzeXnSqRVowoyenVuwzXySyygXoohloSlShgRSlSGqRFSunXwewqGueXzVluqwehuRnFGygXXwRSyqgwS"}}, {"model": "info.news", "pk": 84, "fields": {"title": null, "title_en": "qgownwqSFR", "slug": "qgownwqsfr", "date": "2021-03-31T13:33:39.346Z", "image": "", "image_en": "chto-delat.png", "text": "", "text_en": "zoeSXwXnXnynSoSGnhyzlFnnhGwhFVFggFhqzXyheoFXzwRXXhyXohShVgXFhRyXGhFhVelgVgeVFuRSowFeqgoheGgqFleXwnhyogulXVuwnewzzyyhGVyoFgVSFhuwuVqzengwneGzXenGVwzFzlyonzFGqwSgXlzqnSVqzuyonRSqwoywnFuhyqhhVzlllGXwhywFoReVneuFogqqwGSzyXeFXGnholoGhqRzyznnqVwozqFVhSgXwRRynqRFXVnFzeSqlzqozoSlXwogwghghnygwRzlSyGnFVhguqogSlnXFGwFRhXSSVReewlVqlnSzqhzzGGhFwunqoFzVznullGGyRoqReonRnzoFFeeShqSVuzyhGwgXuRVFXSgGqowRRFzlFXwGzwgFGqzVGwVglqSzVwSVRSoXFRuFwoVoquyyhehhFgnFwRgXFlyVRXRwhXhSugnoSGlqRFzunShSeXqwgllySwqXSgqzuwnzGRRy"}}, {"model": "info.news", "pk": 85, "fields": {"title": "АкснАнАкееркнксАдеед", "title_en": null, "slug": "aksnanakeerknksadeed", "date": "2021-03-31T13:33:39.355Z", "image": "ssl-sert-livecoin.jpg", "image_en": "", "text": "езсрГБкАдиАВдИзнААИеИжесдВддкккрззИнддижнкВиАкезсежАГзежГзИВВИГзеАиАзжВрзВкзБАкнБнИБдскжкИжАкВИкдзВжИжкГжАеддВнжиднкрддрддзнИИИккнсдиВГдБиВВенедГжждАежздИеддкжирнВсзеИждИкрсБВкАинзкиеБекГсВеБеддижкккАсрВБИГБкБАкБеИенГкГАкежГждсдрВИААррАкдзАдкАджБзнкинсБИекиБВВБдГжИсзнзИнжрдкзИнкГзксВжГБГзжИжВзВжнВкеннжАдБГндидГизнкИГВедИИндиддкзрезкрскжВГзздзсБзесВнАееднддккБиж", "text_en": null}}, {"model": "info.news", "pk": 86, "fields": {"title": null, "title_en": "ShnzFhoghhqFhhwqhhRgRngw", "slug": "shnzfhoghhqfhhwqhhrgrngw", "date": "2021-03-31T13:33:39.366Z", "image": "", "image_en": "670ce7133c778048e50b48217f04fbe5.jpg", "text": "", "text_en": "zhquSooohwggqezXwynwyyhRzqyFghlFyguRSuwouguuSqSwezgygSXeXgFoqouSnGuwuVwnFwnhgoeGnyeSzFFzVquywhzVyFznSwzeFFeoFRleGlqhyneGogFXoVVueFwlFGyhRwlnVeFVzXFeuehgXeXwleulhXhhwzSeXVGGFuoyowRnyuGXeXRSnqqlzqeFSqzGFgRGeRoFGqlgwqlGllGFeuhXgVlhRlhVFFuoXluXhGVVoGlSwqqnolhXunSGXoVFFSFGnehwzlSoVGloXFlnzgyuSnohXqzXezuqhFhlSXuSlnSuXGuwRoGuleGhoVSgnFhoRFGRXhV"}}, {"model": "info.news", "pk": 87, "fields": {"title": null, "title_en": "zzqFSwqSqRShowhwhohwowwFoqnwh", "slug": "zzqfswqsqrshowhwhohwowwfoqnwh", "date": "2021-03-31T13:33:39.373Z", "image": "", "image_en": "ssl-sert-livecoin.jpg", "text": "", "text_en": "uhunFweyVunyXRluVzzllSwGugheluVySXuwyuezwVeoSoGloGRuzXozyzgRXgGVyeuqRueReqySgguXXSzhVVXzqSGgVzwFnFuoVzXRXVVRghFRSgglRXeSGqSoqnuuVGohhoXqVulFqFzXhwShehSR"}}, {"model": "info.news", "pk": 88, "fields": {"title": "едкдсВесАрдВдрВдррВсАрсВАрВдкден", "title_en": null, "slug": "edkdsvesardvdrvdrrvsarsvarvdkden", "date": "2021-03-31T13:33:39.384Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "зИеижкАжзскнидрИзИВИдГжИрИБИкБеГрдГкИнржддИдАидИиреАГБнениИГАссБжиААкзсскикГИсжждБкиенкзВГннкИеАжеАААедижерАдзБддксВдзкБеБГИГжжГжГкдидВВднГкекАкГдзждВднБдзИсзжждБжсИнкБерзссрднедзддезииИВнзнрсГсздеВрзискжрБГжежкннжАеджГкАиВжсИдджзВжнкддсГкААжкГикедГзедИкеридГАБГнззиржГддАзиксдГВзВеВБАнВесИзсГеГззнжескирнкБеикскзезВсзежИИккрВнкГАГИдинВдАИнскВжВрнзсизиеисдедеВГжГдАеАкеГдрВксжеГдБдркрБВИзнВГИИеАГБВкАнрдксВижрдзАнжрзБннндрзБрдиИррВААГекезнзВжинВАсеИзГАзкзкАккжжкнАГВсИкБВззкАржАе", "text_en": null}}, {"model": "info.news", "pk": 89, "fields": {"title": null, "title_en": "nRSwhqSoSFSFSnwFhFRwngooqwwhoSh", "slug": "nrswhqsosfsfsnwfhfrwngooqwwhosh", "date": "2021-03-31T13:33:39.390Z", "image": "", "image_en": "ssl-sert-livecoin.jpg", "text": "", "text_en": "neFhRVFRFhzVquSogggyhXqznzgXVozVzSelhgnoqyeRzlqnoeXzRVqoqSwqeRVoGGyFySGhGVnGhlgRRlwewlXXuygzyRFugnwyFRnFloVlSqGwnoqSozSnhwgylwXqVquqleoqoVFVVwoReGnFznnyRulqghV"}}, {"model": "info.news", "pk": 90, "fields": {"title": "АсенкАВдАдс", "title_en": null, "slug": "asenkavdads", "date": "2021-03-31T13:33:39.398Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "зинеВдАдрдзсеАГиИрБдскжБжВнжкккИГдиИИждрБнБкнВИкдГкБИИдижИВИБжВГнжВдБИсддАджнкиесжГрББнирдеИкВкреАннГИеИкздИИксдздАБсккИБзсжГАрВржкБИнддеИАеднирБжсжеиесГеГкиезжрсжджккнзАГнзрд", "text_en": null}}, {"model": "info.news", "pk": 91, "fields": {"title": "деАрдккАкс", "title_en": null, "slug": "deardkkaks", "date": "2021-03-31T13:33:39.406Z", "image": "chto-delat.png", "image_en": "", "text": "ежГГжВрВзккедАскБекГексзИиАкрИинкзсГАикскексиеБкдкднВАеБикккднзддИИкрзнзВдБерсзИднкАБАдИнкиирИБдкерднсдВрГеркзсГдВзВдиГАжеддкГезркжсГникерАВИиИзекзГсрзнедГАГБксВБГАнГВнВкдждекИиддддсскджккзсирИдзАдВжАдиеВдВВркнррББизикзрдАжидсГИБАзААежендддс", "text_en": null}}, {"model": "info.news", "pk": 92, "fields": {"title": "едркВрркВснВддАс", "title_en": null, "slug": "edrkvrrkvsnvddas", "date": "2021-03-31T13:33:39.417Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "жВсизрдГАдекрзкзАГБееАВВАИезекжВсдержексББВВдГсирААВВкзрГеВннИккдкрдиБАензБИкИВрВеАрдБГВГкрАГесБрБкВккекеГеккндржзжГББеИзиГседдВАркдизАекБиБиВнрАзиВАиеАВрАрБрГдиГниккзерВисИжБндИБджеиАдсГресзБнрдГкдБрзздВижзВкдккГИкБААГИГджддиджжАжкккнннкИкзкГкИкАИБВВВАежГсГдркВиАдВдзкккежВсззкскБкИкнГдкГБжжкедзБзАжерВкАГИсзержкдееБеВжксдГжнрАзБзкдсрВдГдикредАднБдкАржддАдндАнжркАдАккрдАжкиБкжнрнрАзБзГндкзИекдсАкВАГБсИирдкИБдзБИкАдксззсдн", "text_en": null}}, {"model": "info.news", "pk": 93, "fields": {"title": null, "title_en": "RSgRwRRqghgoSRozFzqRg", "slug": "rsgrwrrqghgosrozfzqrg", "date": "2021-03-31T13:33:39.428Z", "image": "", "image_en": "chto-delat.png", "text": "", "text_en": "znnuyzzloohFlSFwXegXXhRhhwnoohGVuzSnyRFShyGhGXXyFlXqVFnGzqngogSFywzyhXwgoeXVRwShqSFlogzlXSSllFgeloReqVzuVeeFXzqleyXgVVlqFReenhSSGGuqgSGzhgqlhqSSoVRFzGGougGwFhRyVuwzegVhqFXXhezqRhRVlXnyySRgghwGRyhhzqonRegqwVueXyygGGhwFzznXlegRhqnRFXohSqhglXqFRuuzooVzGqueqVzgzGgRGFuGyXgSgGgwgzgFRVwXXhVVGFFheVyXXyVgqnonVoVRRRwFwoqXVFoVwuXGoRVzXglgwVonSSoFVwGRhqzRgSwGVnlezelnhgqqhyzuzhzFwqggXRzlhqhSeGwoyeoFlXXqFlhXVRyzVVwqSzFSVezXgFqFSSFeRwoRzguwnoyze"}}, {"model": "info.news", "pk": 94, "fields": {"title": "ВААеВкВдсдкрекдннАрВрнк", "title_en": null, "slug": "vaaevkvdsdkrekdnnarvrnk", "date": "2021-03-31T13:33:39.445Z", "image": "chto-delat.png", "image_en": "", "text": "зИнеждрАИкАдИдИржиВиИккАееБИБдкАндВксВАсВВжкдГззГнсВредизкГИГндИкИдГАжкжИВздкИдГГБжзАИнекждкБВкдкнИБдрГдеБсГкжздАкнркидкрдднржГИВсАжВжднедеииридВГжГАржкрИсеИГекИкАекесВГдИдзнИВсдк", "text_en": null}}, {"model": "info.news", "pk": 95, "fields": {"title": null, "title_en": "qhzzhFShnqgoRnghSznRRzgzFqhwh", "slug": "qhzzhfshnqgornghsznrrzgzfqhwh", "date": "2021-03-31T13:33:39.456Z", "image": "", "image_en": "chto-delat.png", "text": "", "text_en": "qzuyeeyqVyeqGGVegyquFlGuqwlzyRVelzuRRhFquqFhwyqFzywnqVqhnRoyyyhwweRzenVzqGuGngVSzSqhuqulGyewXqXVXVGegqgSSRFFXVzhhRweeFzFGlooqVRRXnFXywwloSzhzXhoFRGuelhGVenygzVuowhoVlulRwloXeVFSwlXgRqVVFohhFVulSuqoRhlSRFGhReuzXVFRhqGwwwylXqRnVhqhXuXlhVlXhGwzRqXqVqyqGeoSzlhGugFSlzSgoRRyghFhgSlXnzqzqnVezqwgFXRFhhXXVXeXggVFXewoeFwgXXRGqyVyhXXFlXeGXGRVullGgVoSowFuVSylhwqloRzwgVgweShuwGeGnzySGgnooohFnXguXVFeqnzwloqSoFuwVuhqXluRzSzu"}}, {"model": "info.news", "pk": 96, "fields": {"title": null, "title_en": "hqzRwFzghSgSSzSSSqzhoF", "slug": "hqzrwfzghsgsszsssqzhof", "date": "2021-03-31T13:33:39.465Z", "image": "", "image_en": "chto-delat.png", "text": "", "text_en": "GooRRRhyeXnlVgVnSVgSFlnzXqeShFRFhqulenFXVSolySngXwehzzuhXSnyVGglVXoSnXggzloqVuGGyggnnolhuXSouGSnqyGVSRGnoghqSewhqunzhoheeoyhFlogVnzyhVRXzwqF"}}, {"model": "info.news", "pk": 97, "fields": {"title": "дккнсеАдркдАнсрнндндес", "title_en": null, "slug": "dkknseadrkdansrnndndes", "date": "2021-03-31T13:33:39.481Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "ддГАзВВрнресинжсрГдккккркнГсжИсдГБкндскксБдкИГААнжжскнБАжВАеддкджиззисдБААднддескикГдсИсАкВердедИкдднИреАрВкндАиИджнижжииВВГддндкАГГзрсзИАБАдкрИркддИдкдИнзсзедзВжддсскАдкнддржкнексзждзАжкнрБзкжкджсВИдАнзикирВАГГИБсддсжИнреИИрдВзГдддзждИдкднБсББирерИИГднБнккжАнИБИнАГидИнААИжБриАнБВжкеВкддрБкГжИнАИдкзБксИииедиИрдБикрркВБИБиИддБзВкскдерскикдерВжжВдкнеиИАГдизГекГГирИииГкАрБГГдзнАГИИжкекиБжкснВжГВддиниБдБзинкжкИжнжекжИиВкдсдАВккнкррАнАкБдБдкжрАднВБГжджкБсжВ", "text_en": null}}, {"model": "info.news", "pk": 98, "fields": {"title": "рекВсднеденАрнссАекВсрннВВ", "title_en": null, "slug": "rekvsdnedenarnssaekvsrnnvv", "date": "2021-03-31T13:33:39.493Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "жниГзкддВзкИзВБкВкррикжсисенжниБиккВздИеГкнеГсИнсВрсржБдВкВжнесБдннннзнИжГИнИиАждсИкжкБдВрзеВАкдАккзднГжкедежГдВрАснкнИдАГрИрИГррнИиАрИАжижБдижесжзнВрркзкдиАИИВВВеБсзиГИАдИдкдкнсжБерркГдиеждкИдесрБжАГднеАркжБрсВИссекрсксАрАИзВкАзксББдджззГеижждрГкрГиГБжкриижедВзВиИАзГидГжкзкзкАкАсБксжБАВВрккиБрксдБдБиннГкГкджББкжГсГБГАирГзеииежекжрддсзБссжИАИдикддзВГВкиВИскИАиАкзжикБеБВдБдзИсиГАкзиежииГжикнинк", "text_en": null}}, {"model": "info.news", "pk": 99, "fields": {"title": "еАВнеекВВе", "title_en": null, "slug": "eavneekvve", "date": "2021-03-31T13:33:39.501Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "сБВиБИББкккддБкдджкрржкиББзИВдкккдздБсдГВИБжИкддзИзкАржГкзкнИдиикиджзкнирзкжркБГИдГзИежеАжднеежБижидскеГниеБжжжжрисрзздкжрржжзкГкАИжкезрнАнИдВзБкескАрдриИИиГзндсГжрИеВГдИВзедИиеБИдикрГсБрВскБннридкнсАдкжнкнрзВкБиржАсГджжнкВрВИеГрсВзГзрдкИиззрВкжБскиИндккБдеВднВИжжГррнсрриддриндкВжГкдИсБзИВнзккВиБзжесжБрдджГжВБАккиБАрВккдВкззнккдздрИдВкджзжндГБдриднБнИИнАдИАнижи", "text_en": null}}, {"model": "info.news", "pk": 100, "fields": {"title": "еденннАенкВреВАдррАВВ", "title_en": null, "slug": "edennnaenkvrevadrravv", "date": "2021-03-31T13:33:39.511Z", "image": "chto-delat.png", "image_en": "", "text": "зееАзкАинднжзсккекндскБикежБркАВАжридИсрИиИдесзВкрнжВркрБГиБкжИсГзекиГГсААнГАБнкжкжекккБдждВАнжддзккинАГИнсБсждедГнздсАжекИВккзИензденккИкдАнжжкГГИАдГдррГидрнзеекАкрсдкГдИИБнАжджААнГжржзИснВВАиВкждсГнжИГркИжсждБГзжВсВБкниедрБИдИзндБкннднБАкжсджБсдАкБсденнИиежГдИВжкжАкрАсВрГИсрнзнкжсржзжВГИБГржсдддБАБрАБАГжАсиВзГкГкБдзАкАВзжзикБГБИрИднВкАГкззрВрВГисдкжккдрдкзкдБдГГкАкГннддВзрждредкдидкжеБзГедкд", "text_en": null}}, {"model": "info.news", "pk": 101, "fields": {"title": "ерВседдрндкАрААкАрдерк", "title_en": null, "slug": "ervseddrndkaraakarderk", "date": "2021-03-31T13:33:39.518Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "зсиеркдднззГАнИеиркскИВГАеИВкГжснБИдекддкВнржнжидсссрдБсдрдикзнИБВдиГГкГжддкАВкдВинрдББсиренИБВкркБВВБккидАндззеБзжккндеждкжкИедГдредднжВзГедВиникккзржГикксАрАнАсснААБинрдрессИрежеИдиджзрдессеижркИкерзидрВАГкжВекжискежддБскскккГВсежеИкрИкекАсзИАИдиААеИдкВИрнзкВдкБждВееГжджсдиддБВВккеГииГзсВБеднжИииддкВкедддВдеенВАВдддиБАИБеддАеИжБжкирежи", "text_en": null}}, {"model": "info.news", "pk": 102, "fields": {"title": "ВкеАеекВкдеАВесдсВнААс", "title_en": null, "slug": "vkeaeekvkdeavesdsvnaas", "date": "2021-03-31T13:33:39.527Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "изкннАВрсГддкААБкжГБдикреееББнздеВриГБрБнБИкккдБрежииджВиАидИкдБИВВсккрдддВдджсиБсАккВГнВБВднББнжкзкИзАрИзрескжзВВреГдрдГИрАнинАИеиААидржИрАдсдкжздкБдеидсВжзссзВрдиккАрББкВдГБжсжВирААИкИрАзБзржГкБеидддежнерБнсринжизААБдиззВнсжскБдддизндАдскВГдкррВзкИдИиззжниднзИГкдАзГждВжкккГГзВисБккзВкБкрркГижГдсжиджжБдАВзккИжнИиАдеВнесжендддББеИкск", "text_en": null}}, {"model": "info.news", "pk": 103, "fields": {"title": null, "title_en": "oSRFhgSSzFgqogSFgoSRgzwnhnRnq", "slug": "osrfhgsszfgqogsfgosrgzwnhnrnq", "date": "2021-03-31T13:33:39.533Z", "image": "", "image_en": "670ce7133c778048e50b48217f04fbe5.jpg", "text": "", "text_en": "owuwFgXhnewVuuqyRVuywVzGXRquuoqwqnnXVGwFywgoXVoySnoqSnwnyoVwSgyzFegSgXqGVunGqzSwRoXuSgqylwyzgRqVXRGweRoggRzgFFVzqnwSwqzVluFyGyRRVlzewoVyXXhXSFezlVowXuGzFwFzXVVGgneqzlueeeXnVohSolFhRGwlwXVnyFyeyqlGnwyXewzywXgzzhqSyqgwRnlqglwgeugXgggGzwFqVySXwnhqGVwXghleRXylwSGqVSluRGllywhSqyVzlhzzSVlyXFnFloSeznleylo"}}, {"model": "info.news", "pk": 104, "fields": {"title": "ВВрдВАдркдВсесАВкеВнкнккеВ", "title_en": null, "slug": "vvrdvadrkdvsesavkevnknkkev", "date": "2021-03-31T13:33:39.539Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "БкеАИГиГжезенББИдкзсАкИИАсдВзжддГирБикдреккжГААкАессджрИАжАеиеиджГВжриАзрсеИнскднрИркджкиднАндБзрннБВАикздсАБдБББАзрАкрдсиАдждрзизБкзАеиБААнсжснжкиБкГкнВБГкркеГкИВрВкИВБдБкеИжиждкжрз", "text_en": null}}, {"model": "info.news", "pk": 105, "fields": {"title": "нрсАекВкАекрексеррр", "title_en": null, "slug": "nrsaekvkaekrekserrr", "date": "2021-03-31T13:33:39.547Z", "image": "670ce7133c778048e50b48217f04fbe5.jpg", "image_en": "", "text": "ВжкИАкзидВдежАИБккзссдИИВВзжИксБАекзиБикзекАнИденВиддВБАГрАИрдерИВБдГсеАнреГрддинккАкдиГержикИдескизБкиИдГезБннИВсинннГкссндкИнГБсидикжздеИВкАизджинерВВБрАднжжБзАкиГикезГрБдзИГздГрБдИВжГВИВрннБедБннркИдзжГрсждкедзАддБГкГБскВАрзрзкИжиВВАдиГндркжкАзИАедндГИГикнезкБединБжкизБекжжиркдИнкГкИБрВеиАрИнИиИдиИедВзАиВАжАенкддрзА", "text_en": null}}, {"model": "info.news", "pk": 106, "fields": {"title": null, "title_en": "SggzqwRzzSSoq", "slug": "sggzqwrzzssoq", "date": "2021-03-31T13:33:39.553Z", "image": "", "image_en": "chto-delat.png", "text": "", "text_en": "wgnngXRRuqGwSuVzRqehoeFeGlRVlnyhwolwVyhRhueFVhVuXzzgqoFwoXXghhogGGwhnzquqzFoSVRXenFezgXVgzVyongqFShhuuguhS"}}, {"model": "info.news", "pk": 107, "fields": {"title": null, "title_en": "nggzFogFRFhhzSzqqnhwRnznwFz", "slug": "nggzfogfrfhhzszqqnhwrnznwfz", "date": "2021-03-31T13:33:39Z", "image": "", "image_en": "ssl-sert-livecoin.jpg", "text": "", "text_en": "<h2>First, are we on the main chain?</h2>\r\n\r\n<p>You&rsquo;ll need to check if the hash sums of your most recent blocks match those on the main chain.</p>\r\n\r\n<p>To do this, open the&nbsp;<a href=\"https://explorer.emercoin.com/\"><u>Emercoin Block Explorer</u></a>&nbsp;in your browser:</p>\r\n\r\n<p><img alt=\"\" src=\"https://emercoin.com/storage/images/Y66QprccLdb8aENEAtYObscYDZmniq2SiUgxnLqh.png\" style=\"height:637px; width:943px\" /></p>\r\n\r\n<p>The number of the last block is at the top left. Let&#39;s check that your blockchain contains the second-to-last mainchain block (block #364341 in the example). Click on this block&rsquo;s icon in the list on th</p>"}}, {"model": "info.news", "pk": 108, "fields": {"title": null, "title_en": "zzRFzSFzzFFhoFzSh", "slug": "zzrfzsfzzffhofzsh", "date": "2021-03-31T13:33:39Z", "image": "", "image_en": "chto-delat.png", "text": "", "text_en": "<h2>First, are we on the main chain?</h2>\r\n\r\n<p>You&rsquo;ll need to check if the hash sums of your most recent blocks match those on the main chain.</p>\r\n\r\n<p>To do this, open the&nbsp;<a href=\"https://explorer.emercoin.com/\"><u>Emercoin Block Explorer</u></a>&nbsp;in your browser:</p>\r\n\r\n<p><img alt=\"\" src=\"https://emercoin.com/storage/images/Y66QprccLdb8aENEAtYObscYDZmniq2SiUgxnLqh.png\" style=\"height:637px; width:943px\" /></p>\r\n\r\n<p>The number of the last block is at the top left. Let&#39;s check that your blockchain contains the second-to-last mainchain block (block #364341 in the example). Click on this block&rsquo;s icon in the list on th</p>"}}, {"model": "info.person", "pk": 1, "fields": {"name": "Евгений Шумилов", "name_en": "Eugene Shumilov", "image": "team22x.jpg", "whois": "Основатель", "whois_en": "Founder", "info_short": "<p>Сторонник распределенных вычислений и опенсорсных проектов, уверен в том, что блокчейн Эмеркоина обеспечит устойчивую, прозрачную и достоверную среду для бизнеса и индивидуальных проектов.</p>", "info_short_en": "<p>A proponent of distributed computing and open source projects, he is sure that the Emercoin blockchain will provide a stable, transparent and reliable environment for business and individual projects.</p>", "info": "", "info_en": "", "is_team": true, "is_adviser": false, "linkedin": "https://www.linkedin.com/in/eugene-shumilov-108671b2/", "facebook": "", "twitter": ""}}, {"model": "info.person", "pk": 2, "fields": {"name": "Олег Ховайко", "name_en": "Oleg Khovayko", "image": "405006fcc04233119f2db3c92fcdb3bc.jpg", "whois": "Эксперт по криптографии и финансовым технологиям", "whois_en": "CTO of Emercoin | Cryptography and Financial Expert", "info_short": "<p>Гуру криптографии и блокчейн-технологий с солидным опытом в финансовой сфере.</p>", "info_short_en": "<p>Has a strong background in the realm of finance and specializes in the technical aspects of blockchains and cryptography.</p>", "info": "", "info_en": "", "is_team": true, "is_adviser": false, "linkedin": "https://www.linkedin.com/in/oleg-khovayko-78a2165/", "facebook": "https://www.facebook.com/oleg.khovayko", "twitter": ""}}, {"model": "info.person", "pk": 3, "fields": {"name": "Евгений Меренков", "name_en": "Eugene Merenkov", "image": "6aff4cf6b15afd46474d734fb1d4d3f0.jpg", "whois": "Ведущий разработчик", "whois_en": "Senior Software Engineer", "info_short": "<p>Разработчик и тестировщик, делающий Emercoin лучше и технологичнее день ото дня.</p>", "info_short_en": "<p>Focuses on improving Emercoin&#39;s currency and blockchain offerings through the testing and development of new technology.</p>", "info": "", "info_en": "", "is_team": true, "is_adviser": false, "linkedin": "", "facebook": "", "twitter": ""}}, {"model": "info.person", "pk": 4, "fields": {"name": "Марк ван дер Хейс", "name_en": "Marc van der Chijs", "image": "22fa7b5954c76fa6c0f3008eb5b507f6.jpg", "whois": "Основатель First Block Capital", "whois_en": "Founder, First Block Capital", "info_short": "<p>Основатель и директор First Block Capital, первой канадской инвестиционной фирмы, вкладывающей средства в криптоактивы.</p>", "info_short_en": "<p>Founder and Director of First Block Capital, Canada&rsquo;s first fully registered investment firm that invests in crypto assets.</p>", "info": "<p>Основатель и директор First Block Capital, первой канадской инвестиционной фирмы, вкладывающей средства в криптоактивы. Начал активность в блокчейн-сфере в начале 2013 года, став партнёром в CrossPacific Capital. Полностью сосредоточился на криптопроектах в конце 2016-го.</p>\r\n\r\n<p>Карьера Марка началась в середине 1990-х в международном автогиганте Daimler, где он занимал ряд позиций, связанных с финансовым контроллингом. В 2004-м он стал сооснователем Tudou, крупнейшего китайского видеохостинга, который в 2011-м попал на NASDAQ, а затем был приватизирован обратно Alibaba за миллиарды долларов.</p>\r\n\r\n<p>Марк твёрдо верит, что блокчейн-технологии полностью изменят все аспекты ведения бизнеса в следующие пару лет, и активно поддерживает разработчиков, которые ставят технологии во главу угла.</p>", "info_en": "<p>Founder and Director of First Block Capital, Canada&rsquo;s first fully registered investment firm that invests in crypto assets. He has been in active in the blockchain space since early 2013 as partner in venture capital firm CrossPacific Capital and has been working full time on crypto projects since late 2016.</p>\r\n\r\n<p>He started his career at automotive multinational Daimler in the mid-1990s in several financial controling positions.In 2004 he co-founded China&rsquo;s largest online video site Tudou.com, that was listed on the NASDAQ in 2011 and later taken private by Alibaba in a multi-billion dollar deal.</p>\r\n\r\n<p>He is a big believer that blockchain technology will completely change every aspect of business over the next couple of years and wants to actively support teams that put technology first.</p>", "is_team": false, "is_adviser": true, "linkedin": "https://www.linkedin.com/in/chijs/", "facebook": "https://www.facebook.com/chijs", "twitter": "https://twitter.com/chijs"}}, {"model": "info.person", "pk": 5, "fields": {"name": "Алексей Петров", "name_en": "Alex Petrov", "image": "79161799989236c9feb9969a86dfd3b0.jpg", "whois": "CIO, Bitfury Group", "whois_en": "CIO, Bitfury Group", "info_short": "<p>Алекс имеет более 35 лет опыта работы в IT-индустрии &mdash; как с &laquo;софтом&raquo;, так и с &laquo;железом&raquo;.</p>", "info_short_en": "<p>With over 35 years in IT, Alex Petrov has the expertise in both hardware and software solutions.</p>", "info": "<p>Алекс имеет более 35 лет опыта работы в IT-индустрии &mdash; как с &laquo;софтом&raquo;, так и с &laquo;железом&raquo;. Специализируется на оптимизации высоконагруженных систем, базах данных, больших данных и масштабных сетях передачи данных.</p>\r\n\r\n<p>В прошлом аудитор информационной безопасности с упором на оптимизацию бизнес-процессов и кризисное управление. За свою карьеру запустил несколько успешных бизнесов и глобальных потребительских брендов.</p>\r\n\r\n<p>Благодаря его помощи многие бизнес-команды смогли наладить быстрые и надёжные транзакции в основных криптовалютах, что создало фундамент для будущего роста Bitfury Group. Алекс отвечает за координацию технической консультационной деятельности в рамках Emercoin.</p>", "info_en": "<p>With over 35 years in IT, Alex Petrov has the expertise in both hardware and software solutions. He has expertise in high-load systems optimization, databases, big-data analysis, data networking and communications on a large scale.</p>\r\n\r\n<p>He is a former IT security auditor, with specialties in business processes optimizations and crisis management. His track record includes the launch of new successful businesses and global consumer brands.</p>\r\n\r\n<p>He has been leading high-performance teams to enable fast and reliable transactions in world-renown cryptocurrencies, creating the ground for future growth with the Bitfury Group. Alex will be responsible for overseeing technical advisory efforts for Emercoin.</p>", "is_team": false, "is_adviser": true, "linkedin": "", "facebook": "https://www.facebook.com/sysman.net", "twitter": ""}}, {"model": "info.company", "pk": 1, "fields": {"title": "Deloitte", "slug": "deloitte", "logo": "info/project-1.png", "logo_big": "info/project-12x.png", "is_partner": false, "is_used": true, "text": "<p>Deloitte &ndash; это международная компания, предоставляющая консалтинговые услуги по аудиту, налогам, корпоративным рискам и финансам.</p>", "text_en": "<p>Deloitte is a multinational company providing audit, tax, consulting, enterprise risk and financial advisory services.</p>", "text_more": "<p><a href=\"https://www2.deloitte.com/ua/en.html\" rel=\"nofollow noopener\" target=\"_blank\">Deloitte</a>&nbsp;&ndash; это международная компания, предоставляющая консалтинговые услуги по аудиту, налогам, корпоративным рискам и финансам.</p>\r\n\r\n<p>Deloitte использовала EmerDPO и применила технологию к юридическим обязывающим документам для создания собственного решения &ndash;&nbsp;<a href=\"https://www2.deloitte.com/ua/uk/pages/press-room/press-release/2017/doc-sensus-ru.html\" rel=\"nofollow noopener\" target=\"_blank\">DocSensus</a>. Оно конвертирует документ в формат Base64 и сохраняет его в EmerNVS под уникальным ID.</p>\r\n\r\n<p>Каждый документ сопровождается QR-кодом, который перенаправляет к веб-приложению DocSensus. Оно обращается к EmerNVS для получения идентификатора документа, извлекает и декодирует содержимое документа и показывает его пользователю. Таким образом, каждый может быстро проверить электронный оригинал онлайн и подтвердить подлинность документов.</p>\r\n\r\n<p>Вместо хранения бумажных копий документов, которые подвержены фальсификации, утери и краже, Deloitte хранит их в электронной форме в распределенной базе данных, которая защищена от любых манипуляций. И, что не менее важно, это позволяет сохранить около 5000 деревьев в год!</p>", "text_more_en": "<p><a href=\"https://www2.deloitte.com/ua/en.html\" rel=\"nofollow noopener\" target=\"_blank\">Deloitte</a>&nbsp;is a multinational company providing audit, tax, consulting, enterprise risk and financial advisory services.</p>\r\n\r\n<p>Deloitte has used EmerDPO and applied it to legally binding documents to create its branded&nbsp;<a href=\"https://www2.deloitte.com/ua/uk/pages/press-room/press-release/2017/doc-sensus-ru.html\" rel=\"nofollow noopener\" target=\"_blank\">DocSensus</a>&nbsp;solution. The solution converts the document to the Base64 format and stores it in the Emercoin NVS under a unique ID.</p>\r\n\r\n<p>Each document is accompanied with a QR code that leads to the DocSensus web app, which queries the NVS for the document&rsquo;s ID, retrieves and decodes the document content, and shows it to the user. Thus, anyone can quickly check the electronic original online and confirm the authenticity of the document in their hands.</p>\r\n\r\n<p>Thus, instead of storing paper copies of documents that are prone to falsification, loss, and theft, Deloitte keeps them in electronic form and stores in a distributed database that is secure against any form of manipulation. And, last but not least, this saves around 5,000 trees a year!</p>"}}, {"model": "info.company", "pk": 2, "fields": {"title": "eZuce", "slug": "ezuce", "logo": "info/esuze_lit.jpg", "logo_big": "info/esuze_big.jpg", "is_partner": true, "is_used": false, "text": "<p>eZuce &ndash; это инновационная технологическая компания, предоставляющая предприятиям сервисы для видео и голосовых конференций.</p>", "text_en": "<p>eZuce is an innovative technology company that provides enterprises with services for video and voice conferences.</p>", "text_more": "<p><a href=\"https://ezuce.com\" rel=\"nofollow noopener\" target=\"_blank\">eZuce</a>&nbsp;&ndash; это инновационная технологическая компания, предоставляющая предприятиям сервисы для видео и голосовых конференций.</p>\r\n\r\n<p>Это первый поставщик услуг, который использует блокчейн для улучшения телефонной и видеосвязи. Цель eZuce &ndash; изменить взаимодействие команд.</p>\r\n\r\n<p><a href=\"https://ezuce.com/ezuce-emercoin-speed-adoption-blockchain-phone-video-services/\">Партнерство с Emercoin</a> помогает сократить время соединения и расходов на звонки для клиентов с помощью блокчейн-технологий. ENUMER позволил сократить время соединения с трех секунд до менее половины секунды.</p>", "text_more_en": "<p><a href=\"https://ezuce.com/\" rel=\"nofollow noopener\" target=\"_blank\">eZuce</a>&nbsp;is an innovative technology company that provides enterprises with services for video and voice conferences.</p>\r\n\r\n<p>It is the first service provider to use blockchain to improve phone and video communications. eZuce aims to transform the way teams communicate.</p>\r\n\r\n<p>The partnership with Emercoin helps to reduce call connection times and costs for customers by using blockchain technologies. ENUMER allowed reducing the connection time from three seconds to less than half a second.</p>"}}, {"model": "info.company", "pk": 3, "fields": {"title": "Coca Cola Company", "slug": "coca-cola-company", "logo": "info/project-8.png", "logo_big": "info/project-82x.png", "is_partner": false, "is_used": true, "text": "<p>Coca Cola Company &ndash; это американская компания, крупнейший производитель и поставщик безалкогольных напитков, концентратов и сиропов.</p>", "text_en": "<p>Coca Cola Company is an American food company, the world&rsquo;s largest manufacturer and supplier of nonalcoholic beverage concentrates and syrups.</p>", "text_more": "<p><a href=\"https://www.coca-colacompany.com/\" rel=\"nofollow noopener\" target=\"_blank\">Coca Cola Company</a>&nbsp;&ndash; это американская компания, крупнейший производитель и поставщик безалкогольных напитков, концентратов и сиропов.</p>\r\n\r\n<p>Проект по борьбе с принудительным трудом является совместным проектом Coca Cola, Государственного департамента США, Bitfury Group и Emercoin.</p>\r\n\r\n<p><a href=\"https://www.reuters.com/article/us-blockchain-coca-cola-labor/coca-cola-u-s-state-dept-to-use-blockchain-to-combat-forced-labor-idUSKCN1GS2PY\">Объединение усилий</a> позволило создать блокчейн-систему для борьбы с одним из самых популярных преступлений нашего мира &ndash; принудительным трудом. В качестве основы безопасного реестра для работников и их контрактов используются блокчейн-сервисы Emercoin. Подлинность записей обеспечивается верификацией и подтверждением подлинности на блокчейне. Это отличный пример того, как блокчейн можно использовать не только для бизнеса, но и для социальных нужд.</p>", "text_more_en": "<p><a href=\"https://www.coca-colacompany.com/\" rel=\"nofollow noopener\" target=\"_blank\">Coca Cola Company</a>&nbsp;is an American food company, the world&rsquo;s largest manufacturer and supplier of nonalcoholic beverage concentrates and syrups.</p>\r\n\r\n<p>Project to combat forced labor is a joint project of Coca Cola, U.S. State Department, Bitfury Group and Emercoin. Combined forces allowed to create a blockchain system to fight one of the most popular crimes in our world &ndash; forced labor.</p>\r\n\r\n<p>Emercoin blockchain services were used as a basis of a secure registry for workers and their contracts. Blockchain&rsquo;s validation and digital notary capabilities are used to ensure the authenticity of all records. It&rsquo;s a great example of how blockchain can be used not only for business but also for social affairs.</p>"}}, {"model": "info.company", "pk": 4, "fields": {"title": "Bitfury", "slug": "bitfury", "logo": "info/bitfury_lit.png", "logo_big": "info/bitfury_big.png", "is_partner": true, "is_used": false, "text": "<p>Bitfury Group &mdash; ведущая мировая блокчейн-компания с полным спектром услуг, а также один из крупнейших частных поставщиков инфраструктуры в сфере блокчейн.</p>", "text_en": "<p>The Bitfury Group is the largest full-service blockchain technology company in the world.</p>", "text_more": "<p><a href=\"https://bitfury.com\">Bitfury</a> разрабатывает и предоставляет программное обеспечение и технику для бизнеса, правительств, организаций и отдельных лиц, чтобы безопасно перемещать активы в системе блокчейн.</p>\r\n\r\n<p><a href=\"http://bitfury.com/content/downloads/_ru_bitfury-risk-cooperative-and-beazley-partner-on-blockchain-based-risk-registry.pdf\">Партнеры работают</a> с командой разработчиков проекта Emercoin &mdash; лидера в области децентрализованных и безопасных бизнес-сервисов.</p>\r\n\r\n<p>&nbsp;</p>", "text_more_en": "<p>The Bitfury Group is the largest full-service blockchain technology company in the world.</p>\r\n\r\n<p>Bitfury Group develops and delivers cutting-edge software and hardware solutions necessary for businesses, governments, organizations and individuals to securely move assets across the blockchain. Their expertise ensures successful, easy, fast, secure, and cost-effective connectivity to the blockchain.</p>\r\n\r\n<p>In January 2018 the Bitfury Group and First Block Capital announced they have invested in Emercoin and will support the ground-breaking provider of blockchain solutions and services for customers around the world. The decision to support and invest in the Emercoin Blockchain enabled Bitfury to expand the scope of future applications it designs.</p>"}}, {"model": "info.company", "pk": 5, "fields": {"title": "Microsoft", "slug": "microsoft", "logo": "info/microsoft_lit.png", "logo_big": "info/microsoft_big.png", "is_partner": true, "is_used": false, "text": "<p>Ма́йкрософт &mdash; одна из крупнейших транснациональных компаний по производству проприетарного программного обеспечения для различного рода вычислительной техники &mdash; персональных компьютеров, игровых приставок, КПК, мобильных телефонов и прочего.</p>", "text_en": "<p>Microsoft Corporation is an American multinational technology company with headquarters in Redmond, Washington.</p>", "text_more": "<p>Ма́йкрософт &mdash; одна из крупнейших транснациональных компаний по производству проприетарного программного обеспечения для различного рода вычислительной техники &mdash; персональных компьютеров, игровых приставок, КПК, мобильных телефонов и прочего.</p>\r\n\r\n<p><a href=\"https://habr.com/en/company/microsoft/blog/310812/\">Emercoin присоединился к Microsoft Azure</a> в январе 2016 года, став одним из первых партнеров-провайдеров сервиса блокчейна. А с сегодняшнего дня Emercoin Blockchain Engine стал первым в Microsoft Azure Market приложением, предоставляющим блокчейн-сервисы конечному потребителю.</p>\r\n\r\n<p>На данный момент проект&nbsp;Emercoin Blockchain Engine заморожен.</p>", "text_more_en": "<p>Microsoft Corporation is an American multinational technology company with headquarters in Redmond, Washington.</p>\r\n\r\n<p>Microsoft develops, manufactures, licenses, supports and sells computer software, consumer electronics, personal computers, and services. Its best known software products are the Microsoft Windows line of operating systems, the Microsoft Office suite, and the Internet Explorer and Edge web browsers. Its flagship hardware products are the Xbox video game consoles and the Microsoft Surface lineup of touchscreen personal computers. As of 2016, it is the world&#39;s largest software maker by revenue, and one of the world&#39;s most valuable companies.</p>\r\n\r\n<p>On June 19, 2016 Emercoin released the Emercoin Blokchain Engine - the first application based on blockchain technology in the Microsoft&rsquo;s Azure Marketplace, designed for the end user. With it, any user can deploy ready-to-use Emercoin Blockchain Engine with EMCSSH service and a e-wallet by subscribing to Microsoft Azure, without any additional settings and settings. Blockchain Engine is a functional and robust, yet simple to use system for designing applications. It contains an expansive suite of tools that can be used to create an entirely new project, or to improve upon an existing application already in operation. Speaking about implementation UN, Microsoft and Emercoin have already used Blockchain Engine to find out whether blockchain can provide a more effective way of managing the UN car fleet.</p>"}}, {"model": "emerdocs.docpage", "pk": 1, "fields": {"url": "about-emercoin", "text": "<p>Этот раздел ещё не переведен на русский язык</p>\r\n\r\n<p>Вы поможете сообществу, если переведете этот раздел на английский</p>", "text_en": "<p><img alt=\"Emercoin logo\" src=\"/media/Logo_2017.png\" style=\"width:200px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Emercoin is a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Blockchain\" rel=\"nofollow\" target=\"_blank\">blockchain</a>&nbsp;platform supporting a wide range of distributed trusted services. Distinctive features include high reliability, robustness and 3-in-one hybrid mining (PoW+MergedMining+PoS). Currently, the Emercoin platform already runs the network security services&nbsp;<a href=\"https://emercoin.com/en/documentation/blockchain-services/emerssl/emerssl-introduction\">EmerSSL</a>/<a href=\"https://emercoin.com/en/documentation/blockchain-services/emerssh\">EmerSSH</a>, decentralized domain system&nbsp;<a href=\"https://emercoin.com/en/documentation/blockchain-services/emerdns/emerdns-introduction\">EmerDNS</a>, an anti-counterfeit solution&nbsp;<a href=\"https://emercoin.com/en/documentation/blockchain-services/emerdpo/emerdpo-introduction\">EmerDPO</a>, VOIP solution&nbsp;<a href=\"https://emercoin.com/en/documentation/blockchain-services/enumer\">ENUMER</a>, as well as several other&nbsp;<a href=\"https://emercoin.com/en/documentation/blockchain-services/introduction-to-emercoin-services\">bundled blockchain services</a>. At the heart of many of these innovations is the&nbsp;<a href=\"https://emercoin.com/en/documentation/blockchain-services/emernvs\">Emercoin NVS</a>&nbsp;which allows for the arbitrary storage of&nbsp;<strong>name-&gt;value</strong>&nbsp;pairs on the blockchain.</p>\r\n\r\n<p>The official project website can be found at&nbsp;<a href=\"https://emercoin.com/en/\">emercoin.com</a></p>"}}, {"model": "emerdocs.docpage", "pk": 2, "fields": {"url": "the-emc-currency", "text": "<p>Этот раздел ещё не переведен на русский язык</p>\r\n\r\n<p>Вы поможете сообществу, если переведете этот раздел на английский</p>", "text_en": "<h1>The EMC Currency</h1>\r\n\r\n<p>EMC or &quot;emercoin&quot; (lower case) is the&nbsp;<a href=\"https://en.wikipedia.org/wiki/Unit_of_account\" rel=\"nofollow\" target=\"_blank\">monetary unit of account</a>&nbsp;used for financial transactions on the Emercoin blockchain, and for&nbsp;<a href=\"https://emercoin.com/en/documentation/blockchain-services/introduction-to-emercoin-services\">Emercoin blockchain services</a>. An EMC cent (EMc) is 0.01 EMC.</p>\r\n\r\n<h2>Obtaining EMC</h2>\r\n\r\n<p>There are several main ways to obtain EMC:</p>\r\n\r\n<ul>\r\n\t<li>Mint EMC with&nbsp;<a href=\"https://emercoin.com/en/documentation/block-generation/proof-of-stake-minting\">Proof-of-Stake</a>&nbsp;minting (PoS).</li>\r\n\t<li>Mine EMC with&nbsp;<a href=\"https://emercoin.com/en/documentation/block-generation/proof-of-work-mining\">Proof of Work</a>&nbsp;mining (PoW).</li>\r\n\t<li>Earn EMC by providing products or services in return for it.</li>\r\n\t<li>Trade EMC on one of the participating exchanges that supports EMC.</li>\r\n</ul>"}}, {"model": "emerdocs.docpage", "pk": 3, "fields": {"url": "specifications", "text": "<p>Этот раздел ещё не переведен на русский язык</p> <p>Вы поможете сообществу, если переведете этот раздел на английский</p>", "text_en": "<h1>Emercoin Specifications</h1>\r\n\r\n<p>Emercoin (EMC) is a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Cryptocurrency\" rel=\"nofollow\" target=\"_blank\">cryptocurrency</a>&nbsp;with hybrid&nbsp;<a href=\"https://en.wikipedia.org/wiki/Proof-of-stake\" rel=\"nofollow\" target=\"_blank\">PoS</a>&nbsp;and&nbsp;<a href=\"https://en.wikipedia.org/wiki/Proof-of-work_system\" rel=\"nofollow\" target=\"_blank\">PoW</a>&nbsp;mining (merge-mined with Bitcoin). Coin generation is focused mostly on production of coins by energy-conservative PoS as PoW difficulty gradually increases over time.</p>\r\n\r\n<table>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Total Supply:</td>\r\n\t\t\t<td>Algorithmically increasing at approx. 6% per year [<a href=\"https://explorer.emercoin.com/stats\" rel=\"nofollow\" target=\"_blank\">click here for latest stats</a>].</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Block frequency:</td>\r\n\t\t\t<td>10 minute average.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>PoW Algorithm:</td>\r\n\t\t\t<td><a href=\"https://en.wikipedia.org/wiki/SHA-2\" rel=\"nofollow\" target=\"_blank\">SHA-256</a>&nbsp;(merge-mined with Bitcoin).</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>PoW block reward:</td>\r\n\t\t\t<td>5020 EMC, decreasing according to PoW difficulty.<br />\r\n\t\t\t<br />\r\n\t\t\t<code>Formula: Reward = 5020 / sqrt(sqrt(difficulty))</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>PoS reward:</td>\r\n\t\t\t<td>Approx. 6% pa.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>PoS stake-weight maturity:</td>\r\n\t\t\t<td>30 days.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Max. stake-weight:</td>\r\n\t\t\t<td>90 days.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Difficulty adjustment:</td>\r\n\t\t\t<td>Recalculated each block. Adjustment gradually increases over time to favor PoS minting.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Maturity for newly mined reward:</td>\r\n\t\t\t<td>32 blocks until new coins can be spent.</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Base58Check encoding&nbsp;<a href=\"https://en.bitcoin.it/wiki/List_of_address_prefixes\" rel=\"nofollow\" target=\"_blank\">address prefix</a>:</td>\r\n\t\t\t<td>33</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Default p2p port:</td>\r\n\t\t\t<td>6661</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Default RPC port:</td>\r\n\t\t\t<td>6662</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>"}}, {"model": "emerdocs.docpage", "pk": 4, "fields": {"url": "security-principles", "text": "<p>Этот раздел ещё не переведен на русский язык</p> <p>Вы поможете сообществу, если переведете этот раздел на английский</p>", "text_en": "<h1>Emercoin Security Principles</h1>\r\n\r\n<p>Inheriting all the security advantages of bitcoin, Emercoin uses peer-to-peer technology to operate without a centralized authority. Transaction verification and currency issuance is carried out collectively by the network through consensus. All records are completely decentralized and uncensorable and cannot be altered, revoked or suspended by any authority.</p>\r\n\r\n<p>While blockchains are&nbsp;<a href=\"https://en.wikipedia.org/wiki/Secure_by_design\" rel=\"nofollow\" target=\"_blank\">secure by design</a>, the possibility of&nbsp;<a href=\"https://www.google.com/search?q=51+percent+attack\" rel=\"nofollow\" target=\"_blank\">51% attacks</a>&nbsp;exist where an entity controls more than half of the network hashing power.</p>\r\n\r\n<p>But with PoW and PoS working in tandem, the Emercoin blockchain possesses an enhanced degree of security. A 51% attack on Emercoin would require someone having both a minimum of 51% of the network hashpower and at least 51% of the total coin supply in their possession. Such an attack on the Emercoin blockchain would be a self destructive move by the attacker since they would simultaneously be damaging the network and devaluing their own massive coin holdings.</p>\r\n\r\n<p>Now that Emercoin is&nbsp;<a href=\"https://emercoin.com/en/documentation/block-generation/proof-of-work-mining\">merge-mined</a>&nbsp;with Bitcoin, it benefits from a significant portion of the mining power of the Bitcoin network.</p>\r\n\r\n<p>Technically a 51% attack on Emercoin would have been possible before merge-mining began but it would have been a fruitless move that required spending a large sum of money to perform, and only someone with several million dollars to waste and a serious grudge against the Emer blockchain would have had the means to do it.</p>"}}, {"model": "emerdocs.docpage", "pk": 5, "fields": {"url": "gui-wallet", "text": "<p>Этот раздел ещё не переведен на русский язык</p> <p>Вы поможете сообществу, если переведете этот раздел на английский</p>", "text_en": "<h2>Emercoin GUI wallet</h2>\r\n\r\n<p><img alt=\"emercoin-qt GUI\" src=\"/media/Wallet-GUI.png\" style=\"width:512px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The latest GUI for Linux, OSX, and Windows, can be downloaded from&nbsp;<a href=\"https://sourceforge.net/projects/emercoin/files\" rel=\"nofollow\" target=\"_blank\">Emercoin&#39;s offical page on Sourceforge</a>.</p>"}}, {"model": "emerdocs.docpage", "pk": 6, "fields": {"url": "cli-daemon", "text": "<p>Этот раздел ещё не переведен на русский язык</p> <p>Вы поможете сообществу, если переведете этот раздел на английский</p>", "text_en": "<h2>Emercoin Command Line Daemon (headless)</h2>\r\n\r\n<p><img alt=\"Emercoin on the command line\" src=\"/media/Wallet-headless.png\" style=\"width:512px\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>The latest emercoin daemon can be installed as a system service via repositories for the most popular flavors of Linux:</p>\r\n\r\n<h3>For Ubuntu 16.04 LTS (x64)</h3>\r\n\r\n<pre>\r\n<code>$ apt-key adv --keyserver keyserver.ubuntu.com --recv B58C58F4\r\n$ add-apt-repository &#39;deb http://download.emercoin.com/ubuntu xenial emercoin&#39;\r\n$ apt update &amp;&amp; apt -y install emercoin</code></pre>\r\n\r\n<h3>For Debian 8 (x64)</h3>\r\n\r\n<pre>\r\n<code>$ apt -y install software-properties-common\r\n$ apt-key adv --keyserver keyserver.ubuntu.com --recv B58C58F4\r\n$ add-apt-repository &#39;deb http://download.emercoin.com/debian jessie emercoin&#39;\r\n$ apt update &amp;&amp; apt -y install emercoin</code></pre>\r\n\r\n<p>After installation, the emercoin daemon can be invoked by typing<code>emc</code>, or controlled as a system service. e.g:</p>\r\n\r\n<pre>\r\n<code>$&nbsp;emc&nbsp;getinfo</code></pre>\r\n\r\n<p>For command help:</p>\r\n\r\n<pre>\r\n<code>$&nbsp;emc&nbsp;help</code></pre>\r\n\r\n<p>For runtime options, type:</p>\r\n\r\n<pre>\r\n<code>$&nbsp;emc&nbsp;-help</code></pre>\r\n\r\n<p>To stop the daemon in Ubuntu:</p>\r\n\r\n<pre>\r\n<code>service&nbsp;emercoind&nbsp;stop</code></pre>\r\n\r\n<p>To start the daemon in Ubuntu:</p>\r\n\r\n<pre>\r\n<code>service&nbsp;emercoind&nbsp;start</code></pre>\r\n\r\n<p>To restart the daemon in Ubuntu:</p>\r\n\r\n<pre>\r\n<code>service&nbsp;emercoind&nbsp;restart</code></pre>"}}, {"model": "emerdocs.docpage", "pk": 7, "fields": {"url": "other-wallets", "text": "<p>Этот раздел ещё не переведен на русский язык</p>\r\n\r\n<p>Вы поможете сообществу, если переведете этот раздел на английский</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><a class=\"button button-telegram\" href=\"https://t.me/emernews\" onclick=\"dataLayer.push({'event': 'telegram_community'});\" rel=\"nofollow\" target=\"_blank\">Telegram</a></p>", "text_en": "<h1>Other wallets</h1>\r\n\r\n<p>Links to 3rd party&nbsp;<strong>web wallets</strong>,&nbsp;<strong>mobile wallets</strong>, and&nbsp;<strong>paper wallets</strong>&nbsp;can be found on the&nbsp;<a href=\"https://emercoin.com/en/documentation/links-resources\">Emercoin Resources</a>&nbsp;page. Keep in mind that 3rd party wallets may not leave you in control of your private keys.</p>"}}, {"model": "emerdocs.docpage", "pk": 8, "fields": {"url": "emerdns", "text": "<p>Этот раздел ещё не переведен на русский</p>\r\n\r\n<p>Вы поможете сообществу, если переведете его</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><a class=\"button button-telegram\" href=\"https://t.me/emernews\" onclick=\"dataLayer.push({'event': 'telegram_community'});\" rel=\"nofollow\" target=\"_blank\">Telegram</a></p>", "text_en": "<p><img alt=\"EmerDNS logo\" src=\"/media/EmerDNS_logo.png\" style=\"width:256px\" /></p>\r\n\r\n<h1>EmerDNS</h1>\r\n\r\n<p>EmerDNS is a system for decentralized domain names supporting a full range of&nbsp;<a href=\"https://en.wikipedia.org/wiki/List_of_DNS_record_types\" rel=\"nofollow\" target=\"_blank\">DNS records</a>. EmerDNS operates under the&nbsp;<strong>&quot;dns&quot;</strong>&nbsp;service abbreviation in the&nbsp;<a href=\"https://emercoin.com/en/documentation/blockchain-services/emernvs\">Emercoin NVS</a>.</p>\r\n\r\n<p>Because of Emercoin&#39;s secure and distributed blockchain the domain name records are completely decentralized and uncensorable and cannot be altered, revoked or suspended by any authority. Only a record&#39;s owner can modify or transfer it to another owner, and a record&#39;s owner is determined by whoever controls the private key to the associated payment address.</p>\r\n\r\n<p>Only DNS record owners can manage their records: change values, lease times, or delete them or transfer ownership to another EMC address. These actions can be performed using the&nbsp;<a href=\"https://emercoin.com/en/documentation/blockchain-services/emernvs\">Emercoin NVS</a>&nbsp;in the Emercoin wallet GUI, or via the&nbsp;<strong>name_new</strong>&nbsp;or&nbsp;<strong>name_update</strong>&nbsp;commands in the&nbsp;<a href=\"https://emercoin.com/en/documentation/emercoin-api\">Emercoin API</a>.</p>\r\n\r\n<p>DNS records can easily be retrieved from any Emercoin wallet using the&nbsp;<a href=\"https://emercoin.com/en/documentation/emercoin-api\">Emercoin API</a>&nbsp;using JSONRPC or the command line, or by the standard&nbsp;<a href=\"https://www.ietf.org/rfc/rfc1034.txt\" rel=\"nofollow\" target=\"_blank\">RFC1034</a>&nbsp;DNS protocol that is built in to every Emercoin wallet.</p>\r\n\r\n<h2>Supported DNS zones</h2>\r\n\r\n<p>Technically, EmerDNS can support any&nbsp;<a href=\"https://en.wikipedia.org/wiki/DNS_zone\" rel=\"nofollow\" target=\"_blank\">DNS-zone</a>&nbsp;or&nbsp;<a href=\"https://en.wikipedia.org/wiki/TLD\" rel=\"nofollow\" target=\"_blank\">TLD</a>. However, for seamless integration into a standard DNS tree, and to prevent collisions with existing DNS-zones, we currently recommend creating EmerDNS records only in the zones:&nbsp;<em>*.emc</em>,&nbsp;<em>*.coin</em>,&nbsp;<em>*.lib</em>,&nbsp;<em>*.bazar</em>.</p>\r\n\r\n<p>Current root zones supported by EmerDNS, and their intended purpose:</p>\r\n\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Zone</th>\r\n\t\t\t<th>Intended Purpose</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>.coin</td>\r\n\t\t\t<td>digital currency and commerce websites</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>.emc</td>\r\n\t\t\t<td>websites associated with the Emercoin project</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>.lib</td>\r\n\t\t\t<td>from the words Library and Liberty - that is, knowledge and freedom</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>.bazar</td>\r\n\t\t\t<td>marketplace</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h2>Accessing EmerDNS zones</h2>\r\n\r\n<p>There are several ways that EmerDNS domains can be reached:</p>\r\n\r\n<h3>Browser extensions</h3>\r\n\r\n<p>Several 3rd-party browser plugins exist which allow you to easily visit EmerDNS domains:</p>\r\n\r\n<ul>\r\n\t<li><a href=\"https://peername.com/browser-extension\" rel=\"nofollow\" target=\"_blank\">Peername.com browser extension</a>&nbsp;(firefox, chrome, opera)</li>\r\n\t<li><a href=\"https://blockchain-dns.info/\" rel=\"nofollow\" target=\"_blank\">Blockchain-DNS.info</a>&nbsp;browser extension (firefox, chrome)</li>\r\n\t<li><a href=\"https://fri-gate.org/\" rel=\"nofollow\" target=\"_blank\">friGate browser extension</a>&nbsp;(firefox, chrome, opera)</li>\r\n</ul>\r\n\r\n<p>A more updated list of browser extensions that support EmerDNS may be found&nbsp;<a href=\"https://emercoin.com/en/documentation/links-resources\">here</a>.</p>\r\n\r\n<h3>OpenNIC</h3>\r\n\r\n<p>Emercoin maintains a peering agreement with the DNS provider&nbsp;<a href=\"https://opennicproject.org/\" rel=\"nofollow\" target=\"_blank\">OpenNIC</a>&nbsp;which means domains registered with EmerDNS are accessible by default to all users of OpenNIC DNS servers. Emercoin domain zones are thus accessible by visiting&nbsp;<a href=\"https://opennicproject.org/\" rel=\"nofollow\" target=\"_blank\">opennicproject.org</a>&nbsp;and following their&nbsp;<a href=\"https://wiki.opennic.org/doku.php\" rel=\"nofollow\" target=\"_blank\">guide</a>&nbsp;for setting your DNS resolver to OpenNIC servers.</p>\r\n\r\n<p>OpenNIC is a simple and convenient method to seamlessly access all websites registered in the Emercoin blockchain, as well as all other domain zones that OpenNIC supports.</p>\r\n\r\n<h3>Proxy servers</h3>\r\n\r\n<p>3rd-party proxy servers can provide access to EmerDNS zones:</p>\r\n\r\n<ul>\r\n\t<li><a href=\"http://proxy.opennicproject.org/\" rel=\"nofollow\" target=\"_blank\">OpenNIC Proxy</a></li>\r\n\t<li><a href=\"https://emerproxy.xyz/\" rel=\"nofollow\" target=\"_blank\">Emerproxy.xyz</a></li>\r\n</ul>\r\n\r\n<h2>Creating and maintaining a DNS record</h2>\r\n\r\n<h3>Record types</h3>\r\n\r\n<p>Emercoin&#39;s built-in DNS server supports the following&nbsp;<a href=\"https://en.wikipedia.org/wiki/List_of_DNS_record_types\" rel=\"nofollow\" target=\"_blank\">DNS record types</a>:</p>\r\n\r\n<table>\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Record abbreviation</th>\r\n\t\t\t<th>Service description</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>A</td>\r\n\t\t\t<td>IP V4 address</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>AAAA</td>\r\n\t\t\t<td>IP V6 address</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>NS</td>\r\n\t\t\t<td>Name server record</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>PTR</td>\r\n\t\t\t<td>Pointer record</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>CNAME</td>\r\n\t\t\t<td>Canonical name record</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>MX</td>\r\n\t\t\t<td>Mail exchange record</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>TXT</td>\r\n\t\t\t<td>Free form text message</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>SD</td>\r\n\t\t\t<td>Subdomains (<a href=\"https://emercoin.com/ru/documentation/blockchain-services/emerdns/emerdns-introduction#subdomains\">see below</a>)</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><em>Note: SOA, WKS, and SRV records are not directly supported by Emercoin&#39;s built-in DNS server.</em></p>\r\n\r\n<p>To insert a DNS record into the Emercoin blockchain, create (or update) a&nbsp;<strong>name-&gt;value</strong>&nbsp;pair under the&nbsp;<strong>&quot;dpo&quot;</strong>&nbsp;service abbreviation in the&nbsp;<a href=\"https://emercoin.com/en/documentation/blockchain-services/emernvs\">Emercoin NVS</a>&nbsp;as follows:</p>\r\n\r\n<pre>\r\n<code>&quot;name&quot; : &quot;dns:&lt;your_name_here&gt;&quot;\r\n&quot;value&quot; : &quot;&lt;list of NS-records&gt;&quot;</code></pre>\r\n\r\n<p>For example:</p>\r\n\r\n<pre>\r\n<code>&quot;name&quot; : &quot;dns:example.coin&quot;\r\n&quot;value&quot; : &quot;A=192.168.0.123,127.0.0.1|AAAA=2607:f8b0:4004:806::1001|NS=ns1.google.com|TTL=4001&quot;</code></pre>\r\n\r\n<p>In this example the domain&nbsp;<strong>example.coin</strong>&nbsp;is specified by:</p>\r\n\r\n<ul>\r\n\t<li>two A-records (192.168.0.123 and 127.0.0.1);</li>\r\n\t<li>one AAAA-record (2607:f8b0:4004:806::1001);</li>\r\n\t<li>one NS-record (ns1.google.com);</li>\r\n\t<li>a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Time_to_live\" rel=\"nofollow\" target=\"_blank\">TTL record</a>.</li>\r\n</ul>\r\n\r\n<p>The records are separated by the default separator vertical bar or pipe (&quot;|&quot;). If necessary, you can redefine the separator by prefixing the value with&nbsp;<strong>\\~\\&lt;new separator character&gt;</strong>. For example, if you wish to use a hash character &quot;#&quot; as a separator instead of a pipe you can assign it with &quot;\\~#&quot; at the start of the value as follows:</p>\r\n\r\n<pre>\r\n<code>&quot;value&quot; : &quot;~#A=192.168.0.123,127.0.0.1#AAAA=2607:f8b0:4004:806::1001#NS=ns1.google.com#TTL=4001&quot;</code></pre>\r\n\r\n<p>Note, if you use the space character &quot; &quot; as a separator, you will not be able use it inside the fields. Therefore, you should select an appropriate symbol as a separator for your records instead.</p>\r\n\r\n<p>As described above, each record can contain multiple values. In the provided example, the A-record contains two values, separated by a comma &quot;,&quot;. You can also redefine the value separator with&nbsp;<strong>\\~\\&lt;new separator character&gt;</strong>. The following example demonstrates how to redefine the separator two times: slash &quot;/&quot; as record separator, and asterisk &quot;*&quot; as value separators for multiple TXT-records:</p>\r\n\r\n<pre>\r\n<code>&quot;value&quot; : &quot;~/TXT=~*This is text, Hello!*2nd text/MX=gmail.com:33,mx.microsoft.com:66/CNAME=emc.cc.st/A=192.168.0.100,127.0.0.1&quot;</code></pre>\r\n\r\n<p>In the last example we&#39;ve demonstrated the usage of a&nbsp;<a href=\"https://en.wikipedia.org/wiki/MX_record\" rel=\"nofollow\" target=\"_blank\">MX record</a>. The value of MX contains a mail exchanger reference and priority, separated by a colon &quot;:&quot;. If priority is omitted, the default value is 1.</p>\r\n\r\n<p>Also, intentionally omitted in the last example is a TTL record. The default value for TTL is 24 hours.</p>\r\n\r\n<h3>Naming requirements</h3>\r\n\r\n<p>Domain names may be formed from the set of lowercase alphanumeric ASCII characters (a-z, 0-9). In addition the hyphen (&quot;-&quot;) is permitted if it is surrounded by characters, digits or hyphens, although it is not to start or end a name. Only lowercase letters are valid.</p>\r\n\r\n<h4>Internationalized domain names</h4>\r\n\r\n<p><a href=\"https://en.wikipedia.org/wiki/Internationalized_domain_name\" rel=\"nofollow\" target=\"_blank\">Internationalized domain names</a>&nbsp;(Arabic, Chinese, Cyrillic, etc) are technically possible using&nbsp;<a href=\"https://en.wikipedia.org/wiki/Punycode\" rel=\"nofollow\" target=\"_blank\">punycode</a>.</p>\r\n\r\n<p>For example, if we want the following internationalized domain name:</p>\r\n\r\n<pre>\r\n<code>dns:президент.emc</code></pre>\r\n\r\n<p>Then we must transcribe it using a&nbsp;<a href=\"https://www.charset.org/punycode\" rel=\"nofollow\" target=\"_blank\">punycode converter</a>&nbsp;and register the result:</p>\r\n\r\n<pre>\r\n<code>dns:xn--d1abbgf6aiiy.emc</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Subdomains</h3>\r\n\r\n<p>A general challenge with distributed DNS is that anyone can allocate any unique name, allowing someone to register a subdomain for a domain that they do not own. To remedy this situation, EmerDNS has special ways to manage subdomains:</p>\r\n\r\n<ul>\r\n\t<li>A subdomain (SD) record in the DNS parent&#39;s NVS value, permits lookup and resolution of the subdomain directly within the Emercoin DNS subsystem e.g.&nbsp;<strong>SD=www,ftp,mx</strong></li>\r\n\t<li>A nameserver (NS) record in the DNS parent&#39;s NVS value, allows reference to external nameserver(s) managed by the domain owner, to provide authoritative lookup and resolution of the subdomain external to Emercoin DNS e.g.&nbsp;<strong>NS=ns.example.com</strong></li>\r\n</ul>\r\n\r\n<p>Subdomain resolution is applied in the following order, recursively to all third-level subdomains and deeper:</p>\r\n\r\n<ol>\r\n\t<li>First, check SD record in the parent&#39;s DNS value for reference to the requested subdomain. If a reference for the subdomain is found then look up the subdomain within the Emercoin NVS subsystem.</li>\r\n\t<li>Next, check for nameserver (NS) record in the parent&#39;s DNS value. If found, generate reference to external nameserver.</li>\r\n\t<li>If no resolution results from SD or NS records, return as per parent domain (i.e. ignore subdomain prefix).</li>\r\n</ol>\r\n\r\n<p>NOTE: When utilizing external nameservers, please take care with correct name resolution in those servers, including any gateway-suffixes, e.g.&nbsp;<a href=\"http://emergate.net/\" rel=\"nofollow\" target=\"_blank\">emergate.net</a>.</p>\r\n\r\n<h4>Example 1 - parent contains SD and NS records</h4>\r\n\r\n<pre>\r\n<code>[1] dns:example.coin -&gt; A=1.2.3.4|SD=www,gopher|NS=ns.example.com\r\n[2] dns:www.example.coin -&gt; A=5.6.7.8</code></pre>\r\n\r\n<p>In this case, subdomains will resolve as follows:</p>\r\n\r\n<ul>\r\n\t<li>example.coin will be resolved by record [1], and return A=1.2.3.4</li>\r\n\t<li>www.example.coin will be approved by record [1], resolved by record [2] and return A=5.6.7.8</li>\r\n\t<li>gopher.example.coin will be approved by record [1], and not resolved, since NVS does not contain an appropriate DNS record. This will return NXDOMAIN.</li>\r\n\t<li>mail.example.coin will not be approved by record [1], but the NS record will generate a reference to external server ns.example.com, which may or may not resolve this subdomain.</li>\r\n</ul>\r\n\r\n<p>Thus a single record [1] supports flexible hybrid resolving:</p>\r\n\r\n<ul>\r\n\t<li>www is resolved by Emercoin NVS.</li>\r\n\t<li>gopher is blocked.</li>\r\n\t<li>all others are resolved by delegated NS=ns.example.com.</li>\r\n</ul>\r\n\r\n<h4>Example 2 - parent contains SD record only</h4>\r\n\r\n<pre>\r\n<code>[1] dns:example.coin -&gt; A=1.2.3.4|SD=www,gopher\r\n[2] dns:www.example.coin -&gt; A=5.6.7.8</code></pre>\r\n\r\n<p>In this case, subdomains will resolve as follows:</p>\r\n\r\n<ul>\r\n\t<li>example.coin will be resolved by record [1], and return A=1.2.3.4</li>\r\n\t<li>www.example.coin will be approved by record [1], resolved by record [2] and return A=5.6.7.8</li>\r\n\t<li>gopher.example.coin will be approved by record [1], and not resolved, since NVS does not contain an appropriate DNS record. This will return NXDOMAIN.</li>\r\n\t<li>mail.example.coin will not be approved by record [1], and (because of missing NS record) prefix &quot;mail&quot; will be ignored and resolve the same as example.coin.</li>\r\n</ul>\r\n\r\n<h4>Example 3 - parent contains NS record only</h4>\r\n\r\n<pre>\r\n<code>[1] dns:example.coin -&gt; A=1.2.3.4|NS=ns.example.com\r\n[2] dns:www.example.coin -&gt; A=5.6.7.8</code></pre>\r\n\r\n<p>In this case, subdomains will resolve as follows:</p>\r\n\r\n<ul>\r\n\t<li>example.coin will be resolved by record [1], and return A=1.2.3.4</li>\r\n\t<li>www.example.coin will not be approved by record [1], and will generate a reference to external server ns.example.com, which may or may not resolve this subdomain.</li>\r\n\t<li>Record [2] will be ignored, and will not participate in DNS resolution.</li>\r\n\t<li>mail.example.coin will not be approved by record [1], and will generate a reference to external server ns.example.com, which may or may not resolve this subdomain.</li>\r\n</ul>\r\n\r\n<h4>Example 4 - parent contains no references to subdomain</h4>\r\n\r\n<pre>\r\n<code>[1] dns:example.coin -&gt; &quot;A=1.2.3.4&quot;\r\n[2] dns:mx.example.coin -&gt; &quot;A=5.6.7.8&quot;</code></pre>\r\n\r\n<p>In this case, subdomains will resolve as follows:</p>\r\n\r\n<ul>\r\n\t<li>example.coin -&gt; &quot;A=1.2.3.4&quot;</li>\r\n\t<li>mx.example.coin -&gt; &quot;A=1.2.3.4&quot;</li>\r\n\t<li>www.example.coin -&gt; &quot;A=1.2.3.4&quot;</li>\r\n\t<li>upload.ftp.example.coin -&gt; &quot;A=1.2.3.4&quot;</li>\r\n</ul>\r\n\r\n<p>Because record [1] does not contain any SD or NS records, all subdomains will be resolved to the &quot;parent domain&quot; example.coin. Record [2] will be ignored, and will not participate in DNS resolution.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Integration into a regular DNS tree</h2>\r\n\r\n<p>First, activate the&nbsp;<a href=\"https://www.ietf.org/rfc/rfc1034.txt\" rel=\"nofollow\" target=\"_blank\">RFC1034</a>&nbsp;DNS server in Emercoin by specifing two optional parameters in the&nbsp;<strong>emercoin.conf</strong>&nbsp;config file,&nbsp;<strong>EmerDNS</strong>&nbsp;and&nbsp;<strong>EmerDNSport</strong>:</p>\r\n\r\n<pre>\r\n<code>emcdns=1 # Run DNS server. Default is 0 (don&#39;t run)\r\nemcdnsport=NNN # Port for DNS, default is 5335</code></pre>\r\n\r\n<p>To integrate Emercoin DNS server into a regular DNS tree, you can use full-service DNS or caching DNS. The standard Windows DNS-client is unable to perform this work, so you should use an additional DNS proxy server to do it. Below we will show some examples.</p>\r\n\r\n<h3>Single PC, Acrylic DNS proxy</h3>\r\n\r\n<p>Running the Emercoin wallet and everything else on a single PC is the most simple case. For this we recommend to install the lightweight&nbsp;<a href=\"http://mayakron.altervista.org/wikibase/show.php?id=AcrylicHome\" rel=\"nofollow\" target=\"_blank\">Acrylic DNS Proxy</a>&nbsp;onto your PC. Acrylic will improve the performance of your PC by resolving DNS requests with the local cache, decreasing latencies with browsing or any other Internet activity.</p>\r\n\r\n<p>For installation and initial configuration in Windows, see the&nbsp;<a href=\"http://mayakron.altervista.org/wikibase/show.php?id=AcrylicHome\" rel=\"nofollow\" target=\"_blank\">guide on the Acrylic website</a>. After installation you should configure Acrylic to integrate Emercoin domain zones. A config file example is&nbsp;<a href=\"http://mayakron.altervista.org/wikibase/show.php?id=AcrylicConfiguration\" rel=\"nofollow\" target=\"_blank\">available online</a>. To configure, you should forward all requests to EmerDNS zones (<em>*.emc</em>,&nbsp;<em>*.coin</em>,&nbsp;<em>*.lib</em>,&nbsp;<em>*.bazar</em>) to the local Emercoin wallet, and all requests to other zones to the default DNS provider. This can be configured in the Acrylic config file as follows:</p>\r\n\r\n<pre>\r\n<code>; Forward to primary (default) DNS server anything but EMC-zones\r\nPrimaryServerHostNameAffinityMask=^*.emc;^*.coin;^*.lib;^*.bazar;*\r\nPrimaryServerAddress=DNS_of_your_provider or any public DNS, for example: 8.8.4.4\r\nPrimaryServerPort=53\r\n\r\n; Forward to EMC wallet requests for EMC-zones only\r\nSecondaryServerHostNameAffinityMask=*.emc;*.coin;*.lib;*.bazar\r\nSecondaryServerAddress=127.0.0.1\r\nSecondaryServerPort=5335</code></pre>\r\n\r\n<p><em>In Windows, the default path to the Acrylic config file is: C:\\Program Files (x86)\\Acrylic DNS Proxy\\</em></p>\r\n\r\n<p>Alternately, you can download this&nbsp;<a href=\"https://emercoin.com/files/AcrylicConfiguration.ini\" target=\"_blank\">AcrylicConfiguration.ini</a>&nbsp;file, pre-configured to use&nbsp;<a href=\"https://www.opendns.com/\" rel=\"nofollow\" target=\"_blank\">OpenDNS</a>&nbsp;as the primary &amp; secondary DNS-provider (for regular DNS-tree), and local Emercoin wallet as the ternary provider, for domain zones&nbsp;<em>*.emc</em>,&nbsp;<em>*.coin</em>,&nbsp;<em>*.lib</em>,&nbsp;<em>*.bazar</em>. The Emercoin team also provides a preconfigured&nbsp;<a href=\"https://sourceforge.net/projects/emercoin/files/0.3.0/Acrylic%20%28EMC%20pre-configured%29.7z/download\" rel=\"nofollow\" target=\"_blank\">Acrylic package</a>&nbsp;for download, already set up for Emercoin DNS.</p>\r\n\r\n<h3>Single PC, BIND DNS proxy</h3>\r\n\r\n<p>Instead of installing a DNS proxy, you also have the option to install a full service DNS server. Fortunately, the full DNS server &quot;BIND&quot; is available for Windows, and is free. You can find many&nbsp;<a href=\"https://duckduckgo.com/?q=bind+DNS+windows\" rel=\"nofollow\" target=\"_blank\">tutorials on the internet</a>&nbsp;that show how to install BIND onto Windows. For example, see&nbsp;<a href=\"http://drupalmotion.com/article/dev-environment-install-and-configure-bind-dns-server-windows-7\" rel=\"nofollow\" target=\"_blank\">this manual</a>.</p>\r\n\r\n<p>After installation you should tell BIND to forward EMC-zones to the local Emercoin wallet by adding to the BIND configuration file&nbsp;<strong>named.conf</strong>&nbsp;as follows:</p>\r\n\r\n<pre>\r\n<code>zone &quot;emc&quot; {\r\n type forward;\r\n forward only;\r\n forwarders {\r\n   127.0.0.1 port 5335; // Local Emercoin wallet\r\n };\r\n};\r\nzone &quot;coin&quot; {\r\n type forward;\r\n forward only;\r\n forwarders {\r\n   127.0.0.1 port 5335; // Local Emercoin wallet\r\n };\r\n};\r\nzone &quot;lib&quot; {\r\n type forward;\r\n forward only;\r\n forwarders {\r\n   127.0.0.1 port 5335; // Local Emercoin wallet\r\n };\r\n};\r\nzone &quot;bazar&quot; {\r\n type forward;\r\n forward only;\r\n forwarders {\r\n   127.0.0.1 port 5335; // Local Emercoin wallet\r\n };\r\n};</code></pre>\r\n\r\n<h3>Local network, BIND DNS proxy</h3>\r\n\r\n<p>If you have a server with a static IP address in your LAN, you can install BIND onto your server, and point your desktop PC&#39;s primary DNS address to your BIND server. On the server you can run a headless Emercoin wallet to which BIND will forward requests to the appropriate zones. In this case configuration of BIND is exactly the same as above.</p>\r\n\r\n<p>Also you can run the Emercoin wallet on any PC of your LAN, instead of on the BIND server. If so, you should change the forwarding address in the BIND configuration from 127.0.0.1 to the IP address of that PC. Of course that PC should have a static LAN IP.</p>\r\n\r\n<h3>Local network, DNSMASQ proxy</h3>\r\n\r\n<p>Modern routers usually contain a built-in proxy DNS in their firmware. Usually this is&nbsp;<a href=\"http://www.thekelleys.org.uk/dnsmasq/doc.html\" rel=\"nofollow\" target=\"_blank\">DNSMASQ</a>. Some router firmware like&nbsp;<a href=\"https://www.dd-wrt.com/\" rel=\"nofollow\" target=\"_blank\">DD-WRT</a>&nbsp;and&nbsp;<a href=\"https://www.openwrt.org/\" rel=\"nofollow\" target=\"_blank\">OpenWrt</a>&nbsp;(as well as others) allow you to configure the built-in DNS proxy (for instance, see&nbsp;<a href=\"https://www.dd-wrt.com/wiki/index.php/DNSMasq_-_DNS_for_your_local_network_-_HOWTO\" rel=\"nofollow\" target=\"_blank\">DD-WRT DNSMASQ manual</a>[] or&nbsp;<a href=\"https://wiki.openwrt.org/doc/howto/dhcp.dnsmasq\" rel=\"nofollow\" target=\"_blank\">OpenWrt DNSMASQ manual</a>).</p>\r\n\r\n<p>In this case the wallet should be run on a PC with a static LAN IP and DNSMASQ from the router would send DNS requests to that PC. Following are examples of the configuration lines needed to add into dnsmasq.conf. In this example the PC running Emercoin has the LAN IP address 192.168.1.53.</p>\r\n\r\n<pre>\r\n<code>--server=/emc/192.168.1.53#5335\r\n--server=/coin/192.168.1.53#5335\r\n--server=/lib/192.168.1.53#5335\r\n--server=/bazar/192.168.1.53#5335</code></pre>\r\n\r\n<h3>Public Internet, direct gateway</h3>\r\n\r\n<p>The ability also exists to make a public gateway from a regular DNS tree into EmerDNS. In this case, you can lease any public domain or subdomain, and point the NS records for this domain to a machine that is running the Emercoin wallet with an active DNS server on port 53 (see in the next paragraph for how to define the port). Once you do this, all regular NS requests to that domain will be resolved by the DNS server, and answers will be retrieved from the&nbsp;<a href=\"https://emercoin.com/en/documentation/blockchain-services/emernvs\">Emercoin NVS</a>&nbsp;database in the Emercoin wallet.</p>\r\n\r\n<p>For example, the Emercoin development team has set up the domain&nbsp;<strong><a href=\"http://emergate.net/\" rel=\"nofollow\" target=\"_blank\">emergate.net</a></strong>&nbsp;(Emercoin Gateway Network). When you click&nbsp;<a href=\"http://emer.coin.emergate.net/\" rel=\"nofollow\" target=\"_blank\">http://emer.coin.emergate.net</a>, your name request is resolved by the Emercoin wallet, and you go directly to&nbsp;<strong>emer.coin</strong>&nbsp;in the EMC-supported domain zone.</p>\r\n\r\n<p>Thus, if you register any name with Emercoin DNS, the name would be resolved by any Emercoin DNS gateway - emergate.net, or any other. And your site&nbsp;<strong>site.coin</strong>&nbsp;will be available through any such gateway, by links such as site.coin.<strong>emergate.net</strong>, or site.coin.<strong>another.com</strong>.</p>\r\n\r\n<p>To configure a new domain as a public Emercoin DNS gateway, you need to specify DNS servers as authoritative for your zone (domain). For the domain emergate.net, we specified two Name Servers (NS), authoritative for this domain with our domain registrar:</p>\r\n\r\n<pre>\r\n<code>Name Server: SEED1.EMERGATE.NET\r\nName Server: SEED2.EMERGATE.NET</code></pre>\r\n\r\n<p>You can check this info using&nbsp;<a href=\"https://www.computerhope.com/unix/uwhois.htm\" rel=\"nofollow\" target=\"_blank\">whois</a>.</p>\r\n\r\n<p>On each of these nameservers runs an Emercoin wallet with an active DNS server which serves the gateway and local zone for emergate.net. DNS specific config parameters for the file&nbsp;<strong>emercoin.conf</strong>&nbsp;are as follows:</p>\r\n\r\n<p>If you are only running a DNS gateway for your local computer (with Acrylic or BIND) or for your LAN, it is enough to specify just a single parameter in&nbsp;<strong>emercoin.conf</strong>:</p>\r\n\r\n<pre>\r\n<code># enable emc dns\r\nemcdns=1</code></pre>\r\n\r\n<p>This will activate Emercoin&#39;s DNS server and run it on default port 5335, as allowed for DNS forwarding by DNS proxies (Acrylic, BIND, dnsmasq, etc).</p>\r\n\r\n<p>To run as a public DNS gateway, you need to specify some additional parameters:</p>\r\n\r\n<pre>\r\n<code># Gateway suffix. This suffix will be ignored when a request is passed to the internal gateway.\r\n# Requests for other domain suffixes will be ignored.\r\nemcdnssuffix=.emergate.net\r\n\r\n# NS Server port 53 is the default NS port and must be used if the server is public and &quot;not forward only&quot;.\r\nemcdnsport=53\r\n\r\n# Filter for allowed zones. Protection for &quot;cool hackers&quot;, who try to lookup any external domains through our server\r\n# or attack someone else by DNS amplification mechanism. Currently, only the four EMC-zones are allowed.\r\nemcdnsallowed=.coin|.emc|.lib|.bazar\r\n\r\n# Optional path for a file that contains names in the local gateway&#39;s NS zone (like www.emergate.net).\r\n# Must be full path. Example:\r\nemcdnslocalcf=/usr/share/emercoin/emcdnslocal.conf</code></pre>\r\n\r\n<p>The local config file (<strong>EmerDNSlocal.conf</strong>&nbsp;above) contains pairs in the format&nbsp;<strong>&quot;name=value&quot;</strong>. An empty name assumes &quot;gateway as is&quot;. The values use the same format as EmerDNS values in the blockchain. For example, the local file for&nbsp;<strong>emergate.net</strong>&nbsp;is as follows:</p>\r\n\r\n<pre>\r\n<code># This is local zone config\r\n# For built-in Emercoin DNS\r\n\r\n=A=192.241.241.153|TXT=Emercoin site\r\nwww=A=192.241.241.153|TXT=Emercoin www-site</code></pre>\r\n\r\n<h2>Virtual webhosts (vhosts)</h2>\r\n\r\n<p>When you run&nbsp;<a href=\"https://en.wikipedia.org/wiki/Virtual_hosting\" rel=\"nofollow\" target=\"_blank\">virtual hosts</a>, you will be required to modify your web server&#39;s config to correctly distinguish your hostname with as many possible gateway-suffixes as you wish (or without suffix if name resolved by LAN or locally). This is easy to do by creating a vname-alias with an asterisk &quot;*&quot; as the suffix. The following example shows the appropriate&nbsp;<a href=\"https://en.wikipedia.org/wiki/Apache_HTTP_Server\" rel=\"nofollow\" target=\"_blank\">Apache web server</a>&nbsp;config for the virtual server&nbsp;<strong>exchange.emc</strong>. Note the&nbsp;<strong>ServerAlias</strong>&nbsp;line:</p>\r\n\r\n<pre>\r\n<code>&lt;VirtualHost *:80&gt;\r\n  ServerAdmin okhovayko@verizon.net\r\n  DocumentRoot &quot;/var/www/exchange.emc/html&quot;\r\n  ServerName emc.cc.st\r\n  ServerAlias exchange.emc*\r\n  ErrorLog  &quot;/var/log/exchange.emc-error_log&quot;\r\n  CustomLog &quot;/var/log/exchange.emc-access_log&quot; common\r\n  ScriptAlias /cgi-bin/ &quot;/usr/local/libexec/cgi-bin/&quot;\r\n&lt;/VirtualHost&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>"}}, {"model": "emerdocs.docpage", "pk": 9, "fields": {"url": "emercoin-api", "text": "<p>Этот раздел ещё не переведен на русский</p>\r\n\r\n<p>Вы поможете сообществу, если переведете его</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><a class=\"button button-telegram\" href=\"https://t.me/emernews\" onclick=\"dataLayer.push({'event': 'telegram_community'});\" rel=\"nofollow\" target=\"_blank\">Telegram</a></p>", "text_en": "<p><img alt=\"The debug console in the emercoin-qt GUI\" src=\"/media/Gui-debug-console.png\" style=\"width:512px\" /></p>\r\n\r\n<h1>Emercoin API</h1>\r\n\r\n<p>As with&nbsp;<a href=\"https://en.bitcoin.it/wiki/Running_Bitcoin\" rel=\"nofollow\" target=\"_blank\">Bitcoin</a>, Application programming interface (API) is available via:</p>\r\n\r\n<ul>\r\n\t<li>the &quot;debug console&quot; in&nbsp;<a href=\"https://emercoin.com/en/documentation/install-software/core-wallets/gui-wallet\">Emercoin Core GUI</a>.</li>\r\n\t<li><a href=\"https://en.bitcoin.it/wiki/API_reference_%28JSON-RPC%29\" rel=\"nofollow\" target=\"_blank\">JSONRPC</a>, per settings in your&nbsp;<strong>emercoin.conf</strong>.</li>\r\n\t<li>Directly on the command line interface (emercoin-cli).</li>\r\n</ul>\r\n\r\n<h2>API commands</h2>\r\n\r\n<p>The API allows you or applications to query the blockchain and send transactions, etc. For example, to check on your EMC balance and status of the blockchain you type:</p>\r\n\r\n<pre>\r\n<code>$&nbsp;emc&nbsp;getinfo</code></pre>\r\n\r\n<p>Or to get a list of all possible commands:</p>\r\n\r\n<pre>\r\n<code>$&nbsp;emc&nbsp;help</code></pre>\r\n\r\n<p>The following API commands are accurate as of Emercoin Core version&nbsp;<strong>v0.7.1</strong>:</p>\r\n\r\n<pre>\r\n<code>== Blockchain ==\r\ngetbestblockhash\r\ngetblock &quot;blockhash&quot; ( verbose )\r\ngetblockchaininfo\r\ngetblockcount\r\ngetblockhash height\r\ngetblockheader &quot;hash&quot; ( verbose )\r\ngetchaintips\r\ngetdifficulty\r\ngetmempoolancestors txid (verbose)\r\ngetmempooldescendants txid (verbose)\r\ngetmempoolentry txid\r\ngetmempoolinfo\r\ngetrawmempool ( verbose )\r\ngettxlistfor &lt;fromblock&gt; &lt;toblock&gt; &lt;address&gt; [type=0] [verbose=0]\r\ngettxout &quot;txid&quot; n ( include_mempool )\r\ngettxoutproof [&quot;txid&quot;,...] ( blockhash )\r\ngettxoutsetinfo\r\nname_filter [regexp] [maxage=0] [from=0] [nb=0] [stat] [valuetype]\r\nname_history &lt;name&gt; [fullhistory] [valuetype]\r\nname_mempool [valuetype]\r\nname_scan [start-name] [max-returned] [max-value-length=0] [valuetype]\r\nname_scan_address &lt;address&gt; [max-value-length=0] [valuetype]\r\nname_show &lt;name&gt; [valuetype] [filepath]\r\npreciousblock &quot;blockhash&quot;\r\nverifychain ( checklevel nblocks )\r\nverifytxoutproof &quot;proof&quot;\r\n\r\n== Control ==\r\ngetinfo\r\ngetmemoryinfo\r\nhelp ( &quot;command&quot; )\r\nstop\r\n\r\n== Generating ==\r\ngenerate nblocks ( maxtries )\r\ngeneratetoaddress nblocks address (maxtries)\r\ngetgenerate\r\nsetgenerate generate ( genproclimit )\r\n\r\n== Mining ==\r\ngetauxblock [&lt;hash&gt; &lt;auxpow&gt;]\r\ngetblocktemplate ( TemplateRequest )\r\ngetmininginfo\r\ngetnetworkhashps ( nblocks height )\r\nprioritisetransaction &lt;txid&gt; &lt;priority delta&gt; &lt;fee delta&gt;\r\nsubmitblock &quot;hexdata&quot; ( &quot;jsonparametersobject&quot; )\r\n\r\n== Network ==\r\naddnode &quot;node&quot; &quot;add|remove|onetry&quot;\r\nclearbanned\r\ndisconnectnode &quot;address&quot; \r\ngetaddednodeinfo ( &quot;node&quot; )\r\ngetcheckpoint\r\ngetconnectioncount\r\ngetnettotals\r\ngetnetworkinfo\r\ngetpeerinfo\r\nlistbanned\r\nping\r\nsetban &quot;subnet&quot; &quot;add|remove&quot; (bantime) (absolute)\r\nsetnetworkactive true|false\r\n\r\n== Rawtransactions ==\r\ncreaterawtransaction [{&quot;txid&quot;:&quot;id&quot;,&quot;vout&quot;:n},...] {&quot;address&quot;:amount,&quot;data&quot;:&quot;hex&quot;,...} ( locktime )\r\ndecoderawtransaction &quot;hexstring&quot;\r\ndecodescript &quot;hexstring&quot;\r\nfundrawtransaction &quot;hexstring&quot; ( options )\r\ngetrawtransaction &quot;txid&quot; ( verbose )\r\nsendrawtransaction &quot;hexstring&quot; ( allowhighfees )\r\nsignrawtransaction &quot;hexstring&quot; ( [{&quot;txid&quot;:&quot;id&quot;,&quot;vout&quot;:n,&quot;scriptPubKey&quot;:&quot;hex&quot;,&quot;redeemScript&quot;:&quot;hex&quot;},...] [&quot;privatekey1&quot;,...] sighashtype )\r\n\r\n== Util ==\r\ncreatemultisig nrequired [&quot;key&quot;,...]\r\nestimatefee nblocks\r\nestimatepriority nblocks\r\nestimatesmartpriority nblocks\r\nsignmessagewithprivkey &quot;privkey&quot; &quot;message&quot;\r\nvalidateaddress &quot;emercoinaddress&quot;\r\nverifymessage &quot;address&quot; &quot;signature&quot; &quot;message&quot;\r\n\r\n== Wallet ==\r\nabandontransaction &quot;txid&quot;\r\naddmultisigaddress nrequired [&quot;key&quot;,...] ( &quot;account&quot; )\r\naddwitnessaddress &quot;address&quot;\r\nbackupwallet &quot;destination&quot;\r\nbumpfee &quot;txid&quot; ( options ) \r\ndumpprivkey &quot;address&quot;\r\ndumpwallet &quot;filename&quot;\r\nencryptwallet &quot;passphrase&quot;\r\ngetaccount &quot;address&quot;\r\ngetaccountaddress &quot;account&quot;\r\ngetaddressesbyaccount &quot;account&quot;\r\ngetbalance ( &quot;account&quot; minconf include_watchonly )\r\ngetnewaddress ( &quot;account&quot; )\r\ngetrawchangeaddress\r\ngetreceivedbyaccount &quot;account&quot; ( minconf )\r\ngetreceivedbyaddress &quot;address&quot; ( minconf )\r\ngettransaction &quot;txid&quot; ( include_watchonly )\r\ngetunconfirmedbalance\r\ngetwalletinfo\r\nimportaddress &quot;address&quot; ( &quot;label&quot; rescan p2sh )\r\nimportmulti &quot;requests&quot; &quot;options&quot;\r\nimportprivkey &quot;emercoinprivkey&quot; ( &quot;label&quot; ) ( rescan )\r\nimportprunedfunds\r\nimportpubkey &quot;pubkey&quot; ( &quot;label&quot; rescan )\r\nimportwallet &quot;filename&quot;\r\nkeypoolrefill ( newsize )\r\nlistaccounts ( minconf include_watchonly)\r\nlistaddressgroupings\r\nlistlockunspent\r\nlistreceivedbyaccount ( minconf include_empty include_watchonly)\r\nlistreceivedbyaddress ( minconf include_empty include_watchonly)\r\nlistsinceblock ( &quot;blockhash&quot; target_confirmations include_watchonly)\r\nlisttransactions ( &quot;account&quot; count skip include_watchonly)\r\nlistunspent ( minconf maxconf  [&quot;addresses&quot;,...] [include_unsafe] )\r\nlockunspent unlock ([{&quot;txid&quot;:&quot;txid&quot;,&quot;vout&quot;:n},...])\r\nmakekeypair [prefix]\r\nmove &quot;fromaccount&quot; &quot;toaccount&quot; amount ( minconf &quot;comment&quot; )\r\nname_delete &lt;name&gt;\r\nname_list [name] [valuetype]\r\nname_new &lt;name&gt; &lt;value&gt; &lt;days&gt; [toaddress] [valuetype]\r\nname_update &lt;name&gt; &lt;value&gt; &lt;days&gt; [toaddress] [valuetype]\r\nremoveprunedfunds &quot;txid&quot;\r\nreservebalance [&lt;reserve&gt; [amount]]\r\nsendfrom &quot;fromaccount&quot; &quot;toaddress&quot; amount ( minconf &quot;comment&quot; &quot;comment_to&quot; )\r\nsendmany &quot;fromaccount&quot; {&quot;address&quot;:amount,...} ( minconf &quot;comment&quot; [&quot;address&quot;,...] )\r\nsendtoaddress &quot;address&quot; amount ( &quot;comment&quot; &quot;comment_to&quot; subtractfeefromamount )\r\nsendtoname &lt;name&gt; &lt;amount&gt; [comment] [comment-to]\r\nsetaccount &quot;address&quot; &quot;account&quot;\r\nsettxfee amount\r\nsignmessage &quot;address&quot; &quot;message&quot;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>== Blockchain ==</strong></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><code>getbestblockhash</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns the hash of the best (tip) block in the longest blockchain.\r\n\r\nResult:\r\n&quot;hex&quot; (string) the block hash hex encoded\r\n\r\nExamples:\r\n&gt; emercoin-cli getbestblockhash\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getbestblockhash&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getblock &quot;blockhash&quot; ( verbose )</code></strong></p>\r\n\r\n<pre>\r\n<code>If verbose is false, returns a string that is serialized, hex-encoded data for block &#39;hash&#39;.\r\nIf verbose is true, returns an Object with information about block &lt;hash&gt;.\r\n\r\nArguments:\r\n1. &quot;blockhash&quot; (string, required) The block hash\r\n2. verbose (boolean, optional, default=true) true for a json object, false for the hex encoded data\r\n\r\nResult (for verbose = true):\r\n{\r\n&quot;hash&quot; : &quot;hash&quot;, (string) the block hash (same as provided)\r\n&quot;confirmations&quot; : n, (numeric) The number of confirmations, or -1 if the block is not on the main chain\r\n&quot;size&quot; : n, (numeric) The block size\r\n&quot;strippedsize&quot; : n, (numeric) The block size excluding witness data\r\n&quot;weight&quot; : n (numeric) The block weight as defined in BIP 141\r\n&quot;height&quot; : n, (numeric) The block height or index\r\n&quot;version&quot; : n, (numeric) The block version\r\n&quot;versionHex&quot; : &quot;00000000&quot;, (string) The block version formatted in hexadecimal\r\n&quot;merkleroot&quot; : &quot;xxxx&quot;, (string) The merkle root\r\n&quot;tx&quot; : [ (array of string) The transaction ids\r\n&quot;transactionid&quot; (string) The transaction id\r\n,...\r\n],\r\n&quot;time&quot; : ttt, (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\r\n&quot;mediantime&quot; : ttt, (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\r\n&quot;nonce&quot; : n, (numeric) The nonce\r\n&quot;bits&quot; : &quot;1d00ffff&quot;, (string) The bits\r\n&quot;difficulty&quot; : x.xxx, (numeric) The difficulty\r\n&quot;chainwork&quot; : &quot;xxxx&quot;, (string) Expected number of hashes required to produce the chain up to this block (in hex)\r\n&quot;previousblockhash&quot; : &quot;hash&quot;, (string) The hash of the previous block\r\n&quot;nextblockhash&quot; : &quot;hash&quot; (string) The hash of the next block\r\n}\r\n\r\nResult (for verbose=false):\r\n&quot;data&quot; (string) A string that is serialized, hex-encoded data for block &#39;hash&#39;.\r\n\r\nExamples:\r\n&gt; emercoin-cli getblock &quot;00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getblock&quot;, &quot;params&quot;: [&quot;00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getblockchaininfo</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns an object containing various state info regarding blockchain processing.\r\n\r\nResult:\r\n{\r\n&quot;chain&quot;: &quot;xxxx&quot;, (string) current network name as defined in BIP70 (main, test, regtest)\r\n&quot;blocks&quot;: xxxxxx, (numeric) the current number of blocks processed in the server\r\n&quot;headers&quot;: xxxxxx, (numeric) the current number of headers we have validated\r\n&quot;bestblockhash&quot;: &quot;...&quot;, (string) the hash of the currently best block\r\n&quot;difficulty&quot;: xxxxxx, (numeric) the current difficulty\r\n&quot;mediantime&quot;: xxxxxx, (numeric) median time for the current best block\r\n&quot;verificationprogress&quot;: xxxx, (numeric) estimate of verification progress [0..1]\r\n&quot;chainwork&quot;: &quot;xxxx&quot; (string) total amount of work in active chain, in hexadecimal\r\n&quot;pruned&quot;: xx, (boolean) if the blocks are subject to pruning\r\n&quot;pruneheight&quot;: xxxxxx, (numeric) lowest-height complete block stored\r\n&quot;softforks&quot;: [ (array) status of softforks in progress\r\n{\r\n&quot;id&quot;: &quot;xxxx&quot;, (string) name of softfork\r\n&quot;version&quot;: xx, (numeric) block version\r\n&quot;reject&quot;: { (object) progress toward rejecting pre-softfork blocks\r\n&quot;status&quot;: xx, (boolean) true if threshold reached\r\n},\r\n}, ...\r\n],\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getblockchaininfo\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getblockchaininfo&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getblockcount</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns the number of blocks in the longest blockchain.\r\n\r\nResult:\r\nn (numeric) The current block count\r\n\r\nExamples:\r\n&gt; emercoin-cli getblockcount\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getblockcount&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getblockhash height</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns hash of block in best-block-chain at height provided.\r\n\r\nArguments:\r\n1. height (numeric, required) The height index\r\n\r\nResult:\r\n&quot;hash&quot; (string) The block hash\r\n\r\nExamples:\r\n&gt; emercoin-cli getblockhash 1000\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getblockhash&quot;, &quot;params&quot;: [1000] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getblockheader &quot;hash&quot; ( verbose )</code></strong></p>\r\n\r\n<pre>\r\n<code>If verbose is false, returns a string that is serialized, hex-encoded data for blockheader &#39;hash&#39;.\r\nIf verbose is true, returns an Object with information about blockheader &lt;hash&gt;.\r\n\r\nArguments:\r\n1. &quot;hash&quot; (string, required) The block hash\r\n2. verbose (boolean, optional, default=true) true for a json object, false for the hex encoded data\r\n\r\nResult (for verbose = true):\r\n{\r\n&quot;hash&quot; : &quot;hash&quot;, (string) the block hash (same as provided)\r\n&quot;confirmations&quot; : n, (numeric) The number of confirmations, or -1 if the block is not on the main chain\r\n&quot;height&quot; : n, (numeric) The block height or index\r\n&quot;version&quot; : n, (numeric) The block version\r\n&quot;versionHex&quot; : &quot;00000000&quot;, (string) The block version formatted in hexadecimal\r\n&quot;merkleroot&quot; : &quot;xxxx&quot;, (string) The merkle root\r\n&quot;time&quot; : ttt, (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\r\n&quot;mediantime&quot; : ttt, (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\r\n&quot;nonce&quot; : n, (numeric) The nonce\r\n&quot;bits&quot; : &quot;1d00ffff&quot;, (string) The bits\r\n&quot;difficulty&quot; : x.xxx, (numeric) The difficulty\r\n&quot;chainwork&quot; : &quot;0000...1f3&quot; (string) Expected number of hashes required to produce the current chain (in hex)\r\n&quot;previousblockhash&quot; : &quot;hash&quot;, (string) The hash of the previous block\r\n&quot;nextblockhash&quot; : &quot;hash&quot;, (string) The hash of the next block\r\n}\r\n\r\nResult (for verbose=false):\r\n&quot;data&quot; (string) A string that is serialized, hex-encoded data for block &#39;hash&#39;.\r\n\r\nExamples:\r\n&gt; emercoin-cli getblockheader &quot;00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getblockheader&quot;, &quot;params&quot;: [&quot;00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getchaintips</code></strong></p>\r\n\r\n<pre>\r\n<code>Return information about all known tips in the block tree, including the main chain as well as orphaned branches.\r\n\r\nResult:\r\n[\r\n  {\r\n    &quot;height&quot;: xxxx,         (numeric) height of the chain tip\r\n    &quot;hash&quot;: &quot;xxxx&quot;,         (string) block hash of the tip\r\n    &quot;branchlen&quot;: 0          (numeric) zero for main chain\r\n    &quot;status&quot;: &quot;active&quot;      (string) &quot;active&quot; for the main chain\r\n  },\r\n  {\r\n    &quot;height&quot;: xxxx,\r\n    &quot;hash&quot;: &quot;xxxx&quot;,\r\n    &quot;branchlen&quot;: 1          (numeric) length of branch connecting the tip to the main chain\r\n    &quot;status&quot;: &quot;xxxx&quot;        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\r\n  }\r\n]\r\nPossible values for status:\r\n1.  &quot;invalid&quot;               This branch contains at least one invalid block\r\n2.  &quot;headers-only&quot;          Not all blocks for this branch are available, but the headers are valid\r\n3.  &quot;valid-headers&quot;         All blocks are available for this branch, but they were never fully validated\r\n4.  &quot;valid-fork&quot;            This branch is not part of the active chain, but is fully validated\r\n5.  &quot;active&quot;                This is the tip of the active main chain, which is certainly valid\r\n\r\nExamples:\r\n&gt; emercoin-cli getchaintips \r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getchaintips&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getdifficulty</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns the proof-of-work difficulty as a multiple of the minimum difficulty.\r\n\r\nResult:\r\nn.nnn (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\r\n\r\nExamples:\r\n&gt; emercoin-cli getdifficulty\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getdifficulty&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getmempoolancestors txid (verbose)</code></strong></p>\r\n\r\n<pre>\r\n<code>If txid is in the mempool, returns all in-mempool ancestors.\r\n\r\nArguments:\r\n1. &quot;txid&quot; (string, required) The transaction id (must be in mempool)\r\n2. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\r\n\r\nResult (for verbose=false):\r\n[ (json array of strings)\r\n&quot;transactionid&quot; (string) The transaction id of an in-mempool ancestor transaction\r\n,...\r\n]\r\n\r\nResult (for verbose=true):\r\n{ (json object)\r\n&quot;transactionid&quot; : { (json object)\r\n&quot;size&quot; : n, (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\r\n&quot;fee&quot; : n, (numeric) transaction fee in EMC\r\n&quot;modifiedfee&quot; : n, (numeric) transaction fee with fee deltas used for mining priority\r\n&quot;time&quot; : n, (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\r\n&quot;height&quot; : n, (numeric) block height when transaction entered pool\r\n&quot;startingpriority&quot; : n, (numeric) DEPRECATED. Priority when transaction entered pool\r\n&quot;currentpriority&quot; : n, (numeric) DEPRECATED. Transaction priority now\r\n&quot;descendantcount&quot; : n, (numeric) number of in-mempool descendant transactions (including this one)\r\n&quot;descendantsize&quot; : n, (numeric) virtual transaction size of in-mempool descendants (including this one)\r\n&quot;descendantfees&quot; : n, (numeric) modified fees (see above) of in-mempool descendants (including this one)\r\n&quot;ancestorcount&quot; : n, (numeric) number of in-mempool ancestor transactions (including this one)\r\n&quot;ancestorsize&quot; : n, (numeric) virtual transaction size of in-mempool ancestors (including this one)\r\n&quot;ancestorfees&quot; : n, (numeric) modified fees (see above) of in-mempool ancestors (including this one)\r\n&quot;depends&quot; : [ (array) unconfirmed transactions used as inputs for this transaction\r\n&quot;transactionid&quot;, (string) parent transaction id\r\n... ]\r\n}, ...\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getmempoolancestors &quot;mytxid&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getmempoolancestors&quot;, &quot;params&quot;: [&quot;mytxid&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getmempooldescendants txid (verbose)</code></strong></p>\r\n\r\n<pre>\r\n<code>If txid is in the mempool, returns all in-mempool descendants.\r\n\r\nArguments:\r\n1. &quot;txid&quot; (string, required) The transaction id (must be in mempool)\r\n2. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\r\n\r\nResult (for verbose=false):\r\n[ (json array of strings)\r\n&quot;transactionid&quot; (string) The transaction id of an in-mempool descendant transaction\r\n,...\r\n]\r\n\r\nResult (for verbose=true):\r\n{ (json object)\r\n&quot;transactionid&quot; : { (json object)\r\n&quot;size&quot; : n, (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\r\n&quot;fee&quot; : n, (numeric) transaction fee in EMC\r\n&quot;modifiedfee&quot; : n, (numeric) transaction fee with fee deltas used for mining priority\r\n&quot;time&quot; : n, (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\r\n&quot;height&quot; : n, (numeric) block height when transaction entered pool\r\n&quot;startingpriority&quot; : n, (numeric) DEPRECATED. Priority when transaction entered pool\r\n&quot;currentpriority&quot; : n, (numeric) DEPRECATED. Transaction priority now\r\n&quot;descendantcount&quot; : n, (numeric) number of in-mempool descendant transactions (including this one)\r\n&quot;descendantsize&quot; : n, (numeric) virtual transaction size of in-mempool descendants (including this one)\r\n&quot;descendantfees&quot; : n, (numeric) modified fees (see above) of in-mempool descendants (including this one)\r\n&quot;ancestorcount&quot; : n, (numeric) number of in-mempool ancestor transactions (including this one)\r\n&quot;ancestorsize&quot; : n, (numeric) virtual transaction size of in-mempool ancestors (including this one)\r\n&quot;ancestorfees&quot; : n, (numeric) modified fees (see above) of in-mempool ancestors (including this one)\r\n&quot;depends&quot; : [ (array) unconfirmed transactions used as inputs for this transaction\r\n&quot;transactionid&quot;, (string) parent transaction id\r\n... ]\r\n}, ...\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getmempooldescendants &quot;mytxid&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getmempooldescendants&quot;, &quot;params&quot;: [&quot;mytxid&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getmempoolentry txid</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns mempool data for given transaction\r\n\r\nArguments:\r\n1. &quot;txid&quot; (string, required) The transaction id (must be in mempool)\r\n\r\nResult:\r\n{ (json object)\r\n&quot;size&quot; : n, (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\r\n&quot;fee&quot; : n, (numeric) transaction fee in EMC\r\n&quot;modifiedfee&quot; : n, (numeric) transaction fee with fee deltas used for mining priority\r\n&quot;time&quot; : n, (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\r\n&quot;height&quot; : n, (numeric) block height when transaction entered pool\r\n&quot;startingpriority&quot; : n, (numeric) DEPRECATED. Priority when transaction entered pool\r\n&quot;currentpriority&quot; : n, (numeric) DEPRECATED. Transaction priority now\r\n&quot;descendantcount&quot; : n, (numeric) number of in-mempool descendant transactions (including this one)\r\n&quot;descendantsize&quot; : n, (numeric) virtual transaction size of in-mempool descendants (including this one)\r\n&quot;descendantfees&quot; : n, (numeric) modified fees (see above) of in-mempool descendants (including this one)\r\n&quot;ancestorcount&quot; : n, (numeric) number of in-mempool ancestor transactions (including this one)\r\n&quot;ancestorsize&quot; : n, (numeric) virtual transaction size of in-mempool ancestors (including this one)\r\n&quot;ancestorfees&quot; : n, (numeric) modified fees (see above) of in-mempool ancestors (including this one)\r\n&quot;depends&quot; : [ (array) unconfirmed transactions used as inputs for this transaction\r\n&quot;transactionid&quot;, (string) parent transaction id\r\n... ]\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getmempoolentry &quot;mytxid&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getmempoolentry&quot;, &quot;params&quot;: [&quot;mytxid&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getmempoolinfo</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns details on the active state of the TX memory pool.\r\n\r\nResult:\r\n{\r\n&quot;size&quot;: xxxxx, (numeric) Current tx count\r\n&quot;bytes&quot;: xxxxx, (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\r\n&quot;usage&quot;: xxxxx, (numeric) Total memory usage for the mempool\r\n&quot;maxmempool&quot;: xxxxx, (numeric) Maximum memory usage for the mempool\r\n&quot;mempoolminfee&quot;: xxxxx (numeric) Minimum fee for tx to be accepted\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getmempoolinfo\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getmempoolinfo&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getrawmempool ( verbose )</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns all transaction ids in memory pool as a json array of string transaction ids.\r\n\r\nArguments:\r\n1. verbose (boolean, optional, default=false) True for a json object, false for array of transaction ids\r\n\r\nResult: (for verbose = false):\r\n[ (json array of string)\r\n&quot;transactionid&quot; (string) The transaction id\r\n,...\r\n]\r\n\r\nResult: (for verbose = true):\r\n{ (json object)\r\n&quot;transactionid&quot; : { (json object)\r\n&quot;size&quot; : n, (numeric) virtual transaction size as defined in BIP 141. This is different from actual serialized size for witness transactions as witness data is discounted.\r\n&quot;fee&quot; : n, (numeric) transaction fee in EMC\r\n&quot;modifiedfee&quot; : n, (numeric) transaction fee with fee deltas used for mining priority\r\n&quot;time&quot; : n, (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\r\n&quot;height&quot; : n, (numeric) block height when transaction entered pool\r\n&quot;startingpriority&quot; : n, (numeric) DEPRECATED. Priority when transaction entered pool\r\n&quot;currentpriority&quot; : n, (numeric) DEPRECATED. Transaction priority now\r\n&quot;descendantcount&quot; : n, (numeric) number of in-mempool descendant transactions (including this one)\r\n&quot;descendantsize&quot; : n, (numeric) virtual transaction size of in-mempool descendants (including this one)\r\n&quot;descendantfees&quot; : n, (numeric) modified fees (see above) of in-mempool descendants (including this one)\r\n&quot;ancestorcount&quot; : n, (numeric) number of in-mempool ancestor transactions (including this one)\r\n&quot;ancestorsize&quot; : n, (numeric) virtual transaction size of in-mempool ancestors (including this one)\r\n&quot;ancestorfees&quot; : n, (numeric) modified fees (see above) of in-mempool ancestors (including this one)\r\n&quot;depends&quot; : [ (array) unconfirmed transactions used as inputs for this transaction\r\n&quot;transactionid&quot;, (string) parent transaction id\r\n... ]\r\n}, ...\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getrawmempool true\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getrawmempool&quot;, &quot;params&quot;: [true] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>gettxlistfor &lt;fromblock&gt; &lt;toblock&gt; &lt;address&gt; [type=0] [verbose=0]</code></strong></p>\r\n\r\n<pre>\r\n<code>[type]: 0 - sent/received, 1 - received, 2 - sent\r\n[verbose]: 0 - false, 1 - true</code></pre>\r\n\r\n<p><strong><code>gettxout &quot;txid&quot; n ( include_mempool )</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns details about an unspent transaction output.\r\n\r\nArguments:\r\n1. &quot;txid&quot; (string, required) The transaction id\r\n2. n (numeric, required) vout number\r\n3. include_mempool (boolean, optional) Whether to include the mempool\r\n\r\nResult:\r\n{\r\n&quot;bestblock&quot; : &quot;hash&quot;, (string) the block hash\r\n&quot;confirmations&quot; : n, (numeric) The number of confirmations\r\n&quot;value&quot; : x.xxx, (numeric) The transaction value in EMC\r\n&quot;scriptPubKey&quot; : { (json object)\r\n&quot;asm&quot; : &quot;code&quot;, (string)\r\n&quot;hex&quot; : &quot;hex&quot;, (string)\r\n&quot;reqSigs&quot; : n, (numeric) Number of required signatures\r\n&quot;type&quot; : &quot;pubkeyhash&quot;, (string) The type, eg pubkeyhash\r\n&quot;addresses&quot; : [ (array of string) array of emercoin addresses\r\n&quot;address&quot; (string) emercoin address\r\n,...\r\n]\r\n},\r\n&quot;version&quot; : n, (numeric) The version\r\n&quot;coinbase&quot; : true|false (boolean) Coinbase or not\r\n}\r\n\r\nExamples:\r\n\r\nGet unspent transactions\r\n&gt; emercoin-cli listunspent\r\n\r\nView the details\r\n&gt; emercoin-cli gettxout &quot;txid&quot; 1\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;gettxout&quot;, &quot;params&quot;: [&quot;txid&quot;, 1] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>gettxoutproof [&quot;txid&quot;,...] ( blockhash )</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns a hex-encoded proof that &quot;txid&quot; was included in a block.\r\n\r\nNOTE: By default this function only works sometimes. This is when there is an\r\nunspent output in the utxo for this transaction. To make it always work,\r\nyou need to maintain a transaction index, using the -txindex command line option or\r\nspecify the block in which the transaction is included manually (by blockhash).\r\n\r\nArguments:\r\n1. &quot;txids&quot; (string) A json array of txids to filter\r\n[\r\n&quot;txid&quot; (string) A transaction hash\r\n,...\r\n]\r\n2. &quot;blockhash&quot; (string, optional) If specified, looks for txid in the block with this hash\r\n\r\nResult:\r\n&quot;data&quot; (string) A string that is a serialized, hex-encoded data for the proof.</code></pre>\r\n\r\n<p><strong><code>gettxoutsetinfo</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns statistics about the unspent transaction output set.\r\nNote this call may take some time.\r\n\r\nResult:\r\n{\r\n&quot;height&quot;:n, (numeric) The current block height (index)\r\n&quot;bestblock&quot;: &quot;hex&quot;, (string) the best block hash hex\r\n&quot;transactions&quot;: n, (numeric) The number of transactions\r\n&quot;txouts&quot;: n, (numeric) The number of output transactions\r\n&quot;bytes_serialized&quot;: n, (numeric) The serialized size\r\n&quot;hash_serialized&quot;: &quot;hash&quot;, (string) The serialized hash\r\n&quot;total_amount&quot;: x.xxx (numeric) The total amount\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli gettxoutsetinfo\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;gettxoutsetinfo&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>name_filter [regexp] [maxage=0] [from=0] [nb=0] [stat] [valuetype]</code></strong></p>\r\n\r\n<pre>\r\n<code>scan and filter names\r\n[regexp] : apply [regexp] on names, empty means all names\r\n[maxage] : look in last [maxage] blocks\r\n[from] : show results from number [from]\r\n[nb] : show [nb] results, 0 means all\r\n[stat] : show some stats instead of results\r\n[valuetype] : if &quot;hex&quot; or &quot;base64&quot; is specified then it will print value in corresponding format instead of string.\r\nname_filter &quot;&quot; 5 # list names updated in last 5 blocks\r\nname_filter &quot;^id/&quot; # list all names from the &quot;id&quot; namespace\r\nname_filter &quot;^id/&quot; 0 0 0 stat # display stats (number of names) on active names from the &quot;id&quot; namespace</code></pre>\r\n\r\n<p><strong><code>name_history &lt;name&gt; [fullhistory] [valuetype]</code></strong></p>\r\n\r\n<pre>\r\n<code>Look up the current and all past data for the given name.\r\n\r\nArguments:\r\n1. name (string, required) the name to query for\r\n2. fullhistory (boolean, optional) shows full history, even if name is not active\r\n3. valuetype (string, optional) If &quot;hex&quot; or &quot;base64&quot; is specified then it will print value in corresponding format instead of string.\r\n\r\nResult:\r\n[\r\n{\r\n&quot;txid&quot;: &quot;xxxx&quot;, (string) transaction id &quot;time&quot;: xxxxx, (numeric) transaction time &quot;height&quot;: xxxxx, (numeric) height of block with this transaction &quot;address&quot;: &quot;xxxx&quot;, (string) address to which transaction was sent &quot;address_is_mine&quot;: &quot;xxxx&quot;, (string) shows &quot;true&quot; if this is your address, otherwise not visible &quot;operation&quot;: &quot;xxxx&quot;, (string) name operation that was performed in this transaction &quot;days_added&quot;: xxxx, (numeric) days added (1 day = 175 blocks) to name expiration time, not visible if 0 &quot;value&quot;: xxxx, (numeric) name value in this transaction; not visible when name_delete was used }\r\n]\r\n\r\nExamples:\r\n&gt; emercoin-cli name_history &quot;myname&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;name_history&quot;, &quot;params&quot;: [&quot;myname&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>name_mempool [valuetype]</code></strong></p>\r\n\r\n<pre>\r\n<code>Arguments:\r\n1. valuetype (string, optional) If &quot;hex&quot; or &quot;base64&quot; is specified then it will print value in corresponding format instead of string.\r\n\r\nList pending name transactions in mempool.\r\n\r\nResult:\r\n[\r\n{\r\n&quot;name&quot;: &quot;xxxx&quot;, (string) name &quot;txid&quot;: &quot;xxxx&quot;, (string) transaction id &quot;time&quot;: xxxxx, (numeric) transaction time &quot;address&quot;: &quot;xxxx&quot;, (string) address to which transaction was sent &quot;address_is_mine&quot;: &quot;xxxx&quot;, (string) shows &quot;true&quot; if this is your address, otherwise not visible &quot;operation&quot;: &quot;xxxx&quot;, (string) name operation that was performed in this transaction &quot;days_added&quot;: xxxx, (numeric) days added (1 day = 175 blocks) to name expiration time, not visible if 0 &quot;value&quot;: xxxx, (numeric) name value in this transaction; not visible when name_delete was used }\r\n]\r\n\r\nExamples:\r\n&gt; emercoin-cli name_mempool\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;name_mempool&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>name_scan [start-name] [max-returned] [max-value-length=0] [valuetype]</code></strong></p>\r\n\r\n<pre>\r\n<code>Scan all names, starting at [start-name] and returning [max-returned] number of entries (default 500)\r\n[max-value-length] : control how much of value is shown (0 = full value)\r\n[valuetype] : if &quot;hex&quot; or &quot;base64&quot; is specified then it will print value in corresponding format instead of a string.</code></pre>\r\n\r\n<p><strong><code>name_scan_address &lt;address&gt; [max-value-length=0] [valuetype]</code></strong></p>\r\n\r\n<pre>\r\n<code>Print names that belong to specific address\r\n[max-value-length] : control how much of name value is shown (0 = full value)\r\n[valuetype] : if &quot;hex&quot; or &quot;base64&quot; is specified then it will print value in corresponding format instead of a string.</code></pre>\r\n\r\n<p><strong><code>name_show &lt;name&gt; [valuetype] [filepath]</code></strong></p>\r\n\r\n<pre>\r\n<code>Show values of a name.\r\n\r\nArguments:\r\n1. name (string, required).\r\n2. valuetype (string, optional) If &quot;hex&quot; or &quot;base64&quot; is specified then it will print value in corresponding format instead of string.\r\n3. filepath (string, optional) save name value in binary format in specified file (file will be overwritten!).</code></pre>\r\n\r\n<p><strong><code>preciousblock &quot;blockhash&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Treats a block as if it were received before others with the same work.\r\n\r\nA later preciousblock call can override the effect of an earlier one.\r\n\r\nThe effects of preciousblock are not retained across restarts.\r\n\r\nArguments:\r\n1. &quot;blockhash&quot; (string, required) the hash of the block to mark as precious\r\n\r\nResult:\r\n\r\nExamples:\r\n&gt; emercoin-cli preciousblock &quot;blockhash&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;preciousblock&quot;, &quot;params&quot;: [&quot;blockhash&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>verifychain ( checklevel nblocks )</code></strong></p>\r\n\r\n<pre>\r\n<code>Verifies blockchain database.\r\n\r\nArguments:\r\n1. checklevel (numeric, optional, 0-4, default=3) How thorough the block verification is.\r\n2. nblocks (numeric, optional, default=6, 0=all) The number of blocks to check.\r\n\r\nResult:\r\ntrue|false (boolean) Verified or not\r\n\r\nExamples:\r\n&gt; emercoin-cli verifychain\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;verifychain&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>verifytxoutproof &quot;proof&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Verifies that a proof points to a transaction in a block, returning the transaction it commits to\r\nand throwing an RPC error if the block is not in our best chain\r\n\r\nArguments:\r\n1. &quot;proof&quot; (string, required) The hex-encoded proof generated by gettxoutproof\r\n\r\nResult:\r\n[&quot;txid&quot;] (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>== Control ==</strong></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><code>getinfo</code></strong></p>\r\n\r\n<pre>\r\n<code>DEPRECATED. Returns an object containing various state info.\r\n\r\nResult:\r\n{\r\n&quot;version&quot;: xxxxx, (numeric) the server version\r\n&quot;protocolversion&quot;: xxxxx, (numeric) the protocol version\r\n&quot;walletversion&quot;: xxxxx, (numeric) the wallet version\r\n&quot;balance&quot;: xxxxxxx, (numeric) the total emercoin balance of the wallet\r\n&quot;blocks&quot;: xxxxxx, (numeric) the current number of blocks processed in the server\r\n&quot;timeoffset&quot;: xxxxx, (numeric) the time offset\r\n&quot;connections&quot;: xxxxx, (numeric) the number of connections\r\n&quot;proxy&quot;: &quot;host:port&quot;, (string, optional) the proxy used by the server\r\n&quot;difficulty&quot;: xxxxxx, (numeric) the current difficulty\r\n&quot;testnet&quot;: true|false, (boolean) if the server is using testnet or not\r\n&quot;keypoololdest&quot;: xxxxxx, (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\r\n&quot;keypoolsize&quot;: xxxx, (numeric) how many new keys are pre-generated\r\n&quot;unlocked_until&quot;: ttt, (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\r\n&quot;paytxfee&quot;: x.xxxx, (numeric) the transaction fee set in EMC/kB\r\n&quot;relayfee&quot;: x.xxxx, (numeric) minimum relay fee for non-free transactions in EMC/kB\r\n&quot;errors&quot;: &quot;...&quot; (string) any error messages\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getinfo\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getinfo&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getmemoryinfo</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns an object containing information about memory usage.\r\n\r\nResult:\r\n{\r\n&quot;locked&quot;: { (json object) Information about locked memory manager\r\n&quot;used&quot;: xxxxx, (numeric) Number of bytes used\r\n&quot;free&quot;: xxxxx, (numeric) Number of bytes available in current arenas\r\n&quot;total&quot;: xxxxxxx, (numeric) Total number of bytes managed\r\n&quot;locked&quot;: xxxxxx, (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\r\n&quot;chunks_used&quot;: xxxxx, (numeric) Number allocated chunks\r\n&quot;chunks_free&quot;: xxxxx, (numeric) Number unused chunks\r\n}\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getmemoryinfo\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getmemoryinfo&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>help ( &quot;command&quot; )</code></strong></p>\r\n\r\n<pre>\r\n<code>List all commands, or get help for a specified command.\r\n\r\nArguments:\r\n1. &quot;command&quot; (string, optional) The command to get help on\r\n\r\nResult:\r\n&quot;text&quot; (string) The help text</code></pre>\r\n\r\n<p><strong><code>stop</code></strong></p>\r\n\r\n<pre>\r\n<code>Stop Emercoin server.</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>== Generating ==</strong></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><code>generate nblocks ( maxtries )</code></strong></p>\r\n\r\n<pre>\r\n<code>Mine up to nblocks blocks immediately (before the RPC call returns)\r\n\r\nArguments:\r\n1. nblocks (numeric, required) How many blocks are generated immediately.\r\n2. maxtries (numeric, optional) How many iterations to try (default = 1000000).\r\n\r\nResult:\r\n[ blockhashes ] (array) hashes of blocks generated\r\n\r\nExamples:\r\n\r\nGenerate 11 blocks\r\n&gt; emercoin-cli generate 11</code></pre>\r\n\r\n<p><strong><code>generatetoaddress nblocks address (maxtries)</code></strong></p>\r\n\r\n<pre>\r\n<code>Mine blocks immediately to a specified address (before the RPC call returns)\r\n\r\nArguments:\r\n1. nblocks (numeric, required) How many blocks are generated immediately.\r\n2. address (string, required) The address to send the newly generated emercoin to.\r\n3. maxtries (numeric, optional) How many iterations to try (default = 1000000).\r\n\r\nResult:\r\n[ blockhashes ] (array) hashes of blocks generated\r\n\r\nExamples:\r\n\r\nGenerate 11 blocks to myaddress\r\n&gt; emercoin-cli generatetoaddress 11 &quot;myaddress&quot;</code></pre>\r\n\r\n<p><strong><code>getgenerate</code></strong></p>\r\n\r\n<pre>\r\n<code>Return if the server is set to generate coins or not. The default is false.\r\nIt is set with the command line argument -gen (or emercoin.conf setting gen)\r\nIt can also be set with the setgenerate call.\r\n\r\nResult\r\ntrue|false (boolean) If the server is set to generate coins or not\r\n\r\nExamples:\r\n&gt; emercoin-cli getgenerate\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getgenerate&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>setgenerate generate ( genproclimit )</code></strong></p>\r\n\r\n<pre>\r\n<code>Set &#39;generate&#39; true or false to turn generation on or off.\r\nGeneration is limited to &#39;genproclimit&#39; processors, -1 is unlimited.\r\nSee the getgenerate call for the current setting.\r\n\r\nArguments:\r\n1. generate (boolean, required) Set to true to turn on generation, off to turn off.\r\n2. genproclimit (numeric, optional) Set the processor limit for when generation is on. Can be -1 for unlimited.\r\n\r\nExamples:\r\n\r\nSet the generation on with a limit of one processor\r\n&gt; emercoin-cli setgenerate true 1\r\n\r\nCheck the setting\r\n&gt; emercoin-cli getgenerate\r\n\r\nTurn off generation\r\n&gt; emercoin-cli setgenerate false\r\n\r\nUsing json rpc\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;setgenerate&quot;, &quot;params&quot;: [true, 1] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>== Mining ==</strong></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><code>getauxblock [&lt;hash&gt; &lt;auxpow&gt;]</code></strong></p>\r\n\r\n<pre>\r\n<code>create a new blockIf &lt;hash&gt;, &lt;auxpow&gt; is not specified, returns a new block hash.\r\nIf &lt;hash&gt;, &lt;auxpow&gt; is specified, tries to solve the block based on the aux proof of work and returns true if it was successful.</code></pre>\r\n\r\n<p><strong><code>getblocktemplate ( TemplateRequest )</code></strong></p>\r\n\r\n<pre>\r\n<code>If the request parameters include a &#39;mode&#39; key, that is used to explicitly select between the default &#39;template&#39; request or a &#39;proposal&#39;.\r\nIt returns data needed to construct a block to work on.\r\nFor full specification, see BIPs 22, 23, 9, and 145:\r\nhttps://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\r\nhttps://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\r\nhttps://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\r\nhttps://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\r\n\r\nArguments:\r\n1. template_request (json object, optional) A json object in the following spec\r\n{\r\n&quot;mode&quot;:&quot;template&quot; (string, optional) This must be set to &quot;template&quot;, &quot;proposal&quot; (see BIP 23), or omitted\r\n&quot;capabilities&quot;:[ (array, optional) A list of strings\r\n&quot;support&quot; (string) client side supported feature, &#39;longpoll&#39;, &#39;coinbasetxn&#39;, &#39;coinbasevalue&#39;, &#39;proposal&#39;, &#39;serverlist&#39;, &#39;workid&#39;\r\n,...\r\n],\r\n&quot;rules&quot;:[ (array, optional) A list of strings\r\n&quot;support&quot; (string) client side supported softfork deployment\r\n,...\r\n]\r\n}\r\n\r\nResult:\r\n{\r\n&quot;version&quot; : n, (numeric) The preferred block version\r\n&quot;rules&quot; : [ &quot;rulename&quot;, ... ], (array of strings) specific block rules that are to be enforced\r\n&quot;previousblockhash&quot; : &quot;xxxx&quot;, (string) The hash of current highest block\r\n&quot;transactions&quot; : [ (array) contents of non-coinbase transactions that should be included in the next block\r\n{\r\n&quot;data&quot; : &quot;xxxx&quot;, (string) transaction data encoded in hexadecimal (byte-for-byte)\r\n&quot;txid&quot; : &quot;xxxx&quot;, (string) transaction id encoded in little-endian hexadecimal\r\n&quot;hash&quot; : &quot;xxxx&quot;, (string) hash encoded in little-endian hexadecimal (including witness data)\r\n&quot;depends&quot; : [ (array) array of numbers\r\nn (numeric) transactions before this one (by 1-based index in &#39;transactions&#39; list) that must be present in the final block if this one is\r\n,...\r\n],\r\n&quot;fee&quot;: n, (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn&#39;t one\r\n&quot;sigops&quot; : n, (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\r\n&quot;weight&quot; : n, (numeric) total transaction weight, as counted for purposes of block limits\r\n&quot;required&quot; : true|false (boolean) if provided and true, this transaction must be in the final block\r\n}\r\n,...\r\n],\r\n&quot;coinbaseaux&quot; : { (json object) data that should be included in the coinbase&#39;s scriptSig content\r\n&quot;flags&quot; : &quot;xx&quot; (string) key name is to be ignored, and value included in scriptSig\r\n},\r\n&quot;coinbasevalue&quot; : n, (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)\r\n&quot;coinbasetxn&quot; : { ... }, (json object) information for coinbase transaction\r\n&quot;target&quot; : &quot;xxxx&quot;, (string) The hash target\r\n&quot;mintime&quot; : xxx, (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\r\n&quot;mutable&quot; : [ (array of string) list of ways the block template may be changed\r\n&quot;value&quot; (string) A way the block template may be changed, e.g. &#39;time&#39;, &#39;transactions&#39;, &#39;prevblock&#39;\r\n,...\r\n],\r\n&quot;noncerange&quot; : &quot;00000000ffffffff&quot;,(string) A range of valid nonces\r\n&quot;sigoplimit&quot; : n, (numeric) limit of sigops in blocks\r\n&quot;sizelimit&quot; : n, (numeric) limit of block size\r\n&quot;weightlimit&quot; : n, (numeric) limit of block weight\r\n&quot;curtime&quot; : ttt, (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\r\n&quot;bits&quot; : &quot;xxxxxxxx&quot;, (string) compressed target of next block\r\n&quot;height&quot; : n (numeric) The height of the next block\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getblocktemplate\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getblocktemplate&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getmininginfo</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns a json object containing mining-related information.\r\nResult:\r\n{\r\n&quot;blocks&quot;: nnn, (numeric) The current block\r\n&quot;currentblocksize&quot;: nnn, (numeric) The last block size\r\n&quot;currentblockweight&quot;: nnn, (numeric) The last block weight\r\n&quot;currentblocktx&quot;: nnn, (numeric) The last block transaction\r\n&quot;difficulty&quot;: xxx.xxxxx (numeric) The current difficulty\r\n&quot;errors&quot;: &quot;...&quot; (string) Current errors\r\n&quot;generate&quot;: true|false (boolean) If the generation is on or off (see getgenerate or setgenerate calls)\r\n&quot;genproclimit&quot;: n (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)\r\n&quot;networkhashps&quot;: nnn, (numeric) The network hashes per second\r\n&quot;pooledtx&quot;: n (numeric) The size of the mempool\r\n&quot;chain&quot;: &quot;xxxx&quot;, (string) current network name as defined in BIP70 (main, test, regtest)\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getmininginfo\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getmininginfo&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getnetworkhashps ( nblocks height )</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns the estimated network hashes per second based on the last n blocks.\r\nPass in [blocks] to override # of blocks, -1 specifies since last difficulty change.\r\nPass in [height] to estimate the network speed at the time when a certain block was found.\r\n\r\nArguments:\r\n1. nblocks (numeric, optional, default=120) The number of blocks, or -1 for blocks since last difficulty change.\r\n2. height (numeric, optional, default=-1) To estimate at the time of the given height.\r\n\r\nResult:\r\nx (numeric) Hashes per second estimated\r\n\r\nExamples:\r\n&gt; emercoin-cli getnetworkhashps\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnetworkhashps&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>prioritisetransaction &lt;txid&gt; &lt;priority delta&gt; &lt;fee delta&gt;</code></strong></p>\r\n\r\n<pre>\r\n<code>Accepts the transaction into mined blocks at a higher (or lower) priority\r\n\r\nArguments:\r\n1. &quot;txid&quot; (string, required) The transaction id.\r\n2. priority_delta (numeric, required) The priority to add or subtract.\r\nThe transaction selection algorithm considers the tx as it would have a higher priority.\r\n(priority of a transaction is calculated: coinage * value_in_satoshis / txsize)\r\n3. fee_delta (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\r\nThe fee is not actually paid, only the algorithm for selecting transactions into a block\r\nconsiders the transaction as it would have paid a higher (or lower) fee.\r\n\r\nResult:\r\ntrue (boolean) Returns true\r\n\r\nExamples:\r\n&gt; emercoin-cli prioritisetransaction &quot;txid&quot; 0.0 10000\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;prioritisetransaction&quot;, &quot;params&quot;: [&quot;txid&quot;, 0.0, 10000] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>submitblock &quot;hexdata&quot; ( &quot;jsonparametersobject&quot; )</code></strong></p>\r\n\r\n<pre>\r\n<code>Attempts to submit new block to network.\r\nThe &#39;jsonparametersobject&#39; parameter is currently ignored.\r\nSee https://en.bitcoin.it/wiki/BIP_0022 for full specification.\r\n\r\nArguments\r\n1. &quot;hexdata&quot; (string, required) the hex-encoded block data to submit\r\n2. &quot;parameters&quot; (string, optional) object of optional parameters\r\n{\r\n&quot;workid&quot; : &quot;id&quot; (string, optional) if the server provided a workid, it MUST be included with submissions\r\n}\r\n\r\nResult:\r\n\r\nExamples:\r\n&gt; emercoin-cli submitblock &quot;mydata&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;submitblock&quot;, &quot;params&quot;: [&quot;mydata&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>== Network ==</strong></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><code>addnode &quot;node&quot; &quot;add|remove|onetry&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Attempts add or remove a node from the addnode list.\r\nOr try a connection to a node once.\r\n\r\nArguments:\r\n1. &quot;node&quot; (string, required) The node (see getpeerinfo for nodes)\r\n2. &quot;command&quot; (string, required) &#39;add&#39; to add a node to the list, &#39;remove&#39; to remove a node from the list, &#39;onetry&#39; to try a connection to the node once\r\n\r\nExamples:\r\n&gt; emercoin-cli addnode &quot;192.168.0.6:8333&quot; &quot;onetry&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;addnode&quot;, &quot;params&quot;: [&quot;192.168.0.6:8333&quot;, &quot;onetry&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>clearbanned</code></strong></p>\r\n\r\n<pre>\r\n<code>Clear all banned IPs.\r\n\r\nExamples:\r\n&gt; emercoin-cli clearbanned\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;clearbanned&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>disconnectnode &quot;address&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Immediately disconnects from the specified node.\r\n\r\nArguments:\r\n1. &quot;address&quot; (string, required) The IP address/port of the node\r\n\r\nExamples:\r\n&gt; emercoin-cli disconnectnode &quot;192.168.0.6:8333&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;disconnectnode&quot;, &quot;params&quot;: [&quot;192.168.0.6:8333&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getaddednodeinfo ( &quot;node&quot; )</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns information about the given added node, or all added nodes\r\n(note that onetry addnodes are not listed here)\r\n\r\nArguments:\r\n1. &quot;node&quot; (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.\r\n\r\nResult:\r\n[\r\n{\r\n&quot;addednode&quot; : &quot;192.168.0.201&quot;, (string) The node ip address or name (as provided to addnode)\r\n&quot;connected&quot; : true|false, (boolean) If connected\r\n&quot;addresses&quot; : [ (list of objects) Only when connected = true\r\n{\r\n&quot;address&quot; : &quot;192.168.0.201:8333&quot;, (string) The emercoin server IP and port we&#39;re connected to\r\n&quot;connected&quot; : &quot;outbound&quot; (string) connection, inbound or outbound\r\n}\r\n]\r\n}\r\n,...\r\n]\r\n\r\nExamples:\r\n&gt; emercoin-cli getaddednodeinfo true\r\n&gt; emercoin-cli getaddednodeinfo true &quot;192.168.0.201&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getaddednodeinfo&quot;, &quot;params&quot;: [true, &quot;192.168.0.201&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getcheckpoint</code></strong></p>\r\n\r\n<pre>\r\n<code>Show info of synchronized checkpoint.</code></pre>\r\n\r\n<p><strong><code>getconnectioncount</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns the number of connections to other nodes.\r\n\r\nResult:\r\nn (numeric) The connection count\r\n\r\nExamples:\r\n&gt; emercoin-cli getconnectioncount\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getconnectioncount&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getnettotals</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns information about network traffic, including bytes in, bytes out,\r\nand current time.\r\n\r\nResult:\r\n{\r\n&quot;totalbytesrecv&quot;: n, (numeric) Total bytes received\r\n&quot;totalbytessent&quot;: n, (numeric) Total bytes sent\r\n&quot;timemillis&quot;: t, (numeric) Current UNIX time in milliseconds\r\n&quot;uploadtarget&quot;:\r\n{\r\n&quot;timeframe&quot;: n, (numeric) Length of the measuring timeframe in seconds\r\n&quot;target&quot;: n, (numeric) Target in bytes\r\n&quot;target_reached&quot;: true|false, (boolean) True if target is reached\r\n&quot;serve_historical_blocks&quot;: true|false, (boolean) True if serving historical blocks\r\n&quot;bytes_left_in_cycle&quot;: t, (numeric) Bytes left in current time cycle\r\n&quot;time_left_in_cycle&quot;: t (numeric) Seconds left in current time cycle\r\n}\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getnettotals\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnettotals&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getnetworkinfo</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns an object containing various state info regarding P2P networking.\r\n\r\nResult:\r\n{\r\n&quot;version&quot;: xxxxx, (numeric) the server version\r\n&quot;subversion&quot;: &quot;/Satoshi:x.x.x/&quot;, (string) the server subversion string\r\n&quot;protocolversion&quot;: xxxxx, (numeric) the protocol version\r\n&quot;localservices&quot;: &quot;xxxxxxxxxxxxxxxx&quot;, (string) the services we offer to the network\r\n&quot;localrelay&quot;: true|false, (bool) true if transaction relay is requested from peers\r\n&quot;timeoffset&quot;: xxxxx, (numeric) the time offset\r\n&quot;connections&quot;: xxxxx, (numeric) the number of connections\r\n&quot;networkactive&quot;: true|false, (bool) whether p2p networking is enabled\r\n&quot;networks&quot;: [ (array) information per network\r\n{\r\n&quot;name&quot;: &quot;xxx&quot;, (string) network (ipv4, ipv6 or onion)\r\n&quot;limited&quot;: true|false, (boolean) is the network limited using -onlynet?\r\n&quot;reachable&quot;: true|false, (boolean) is the network reachable?\r\n&quot;proxy&quot;: &quot;host:port&quot; (string) the proxy that is used for this network, or empty if none\r\n&quot;proxy_randomize_credentials&quot;: true|false, (string) Whether randomized credentials are used\r\n}\r\n,...\r\n],\r\n&quot;relayfee&quot;: x.xxxxxxxx, (numeric) minimum relay fee for non-free transactions in EMC/kB\r\n&quot;incrementalfee&quot;: x.xxxxxxxx, (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in EMC/kB\r\n&quot;localaddresses&quot;: [ (array) list of local addresses\r\n{\r\n&quot;address&quot;: &quot;xxxx&quot;, (string) network address\r\n&quot;port&quot;: xxx, (numeric) network port\r\n&quot;score&quot;: xxx (numeric) relative score\r\n}\r\n,...\r\n]\r\n&quot;warnings&quot;: &quot;...&quot; (string) any network warnings\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getnetworkinfo\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnetworkinfo&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getpeerinfo</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns data about each connected network node as a json array of objects.\r\n\r\nResult:\r\n[\r\n{\r\n&quot;id&quot;: n, (numeric) Peer index\r\n&quot;addr&quot;:&quot;host:port&quot;, (string) The ip address and port of the peer\r\n&quot;addrlocal&quot;:&quot;ip:port&quot;, (string) local address\r\n&quot;services&quot;:&quot;xxxxxxxxxxxxxxxx&quot;, (string) The services offered\r\n&quot;relaytxes&quot;:true|false, (boolean) Whether peer has asked us to relay transactions to it\r\n&quot;lastsend&quot;: ttt, (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\r\n&quot;lastrecv&quot;: ttt, (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\r\n&quot;bytessent&quot;: n, (numeric) The total bytes sent\r\n&quot;bytesrecv&quot;: n, (numeric) The total bytes received\r\n&quot;conntime&quot;: ttt, (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\r\n&quot;timeoffset&quot;: ttt, (numeric) The time offset in seconds\r\n&quot;pingtime&quot;: n, (numeric) ping time (if available)\r\n&quot;minping&quot;: n, (numeric) minimum observed ping time (if any at all)\r\n&quot;pingwait&quot;: n, (numeric) ping wait (if non-zero)\r\n&quot;version&quot;: v, (numeric) The peer version, such as 7001\r\n&quot;subver&quot;: &quot;/Satoshi:0.8.5/&quot;, (string) The string version\r\n&quot;inbound&quot;: true|false, (boolean) Inbound (true) or Outbound (false)\r\n&quot;addnode&quot;: true|false, (boolean) Whether connection was due to addnode and is using an addnode slot\r\n&quot;startingheight&quot;: n, (numeric) The starting height (block) of the peer\r\n&quot;banscore&quot;: n, (numeric) The ban score\r\n&quot;synced_headers&quot;: n, (numeric) The last header we have in common with this peer\r\n&quot;synced_blocks&quot;: n, (numeric) The last block we have in common with this peer\r\n&quot;inflight&quot;: [\r\nn, (numeric) The heights of blocks we&#39;re currently asking from this peer\r\n...\r\n],\r\n&quot;whitelisted&quot;: true|false, (boolean) Whether the peer is whitelisted\r\n&quot;bytessent_per_msg&quot;: {\r\n&quot;addr&quot;: n, (numeric) The total bytes sent aggregated by message type\r\n...\r\n},\r\n&quot;bytesrecv_per_msg&quot;: {\r\n&quot;addr&quot;: n, (numeric) The total bytes received aggregated by message type\r\n...\r\n}\r\n}\r\n,...\r\n]\r\n\r\nExamples:\r\n&gt; emercoin-cli getpeerinfo\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getpeerinfo&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>listbanned</code></strong></p>\r\n\r\n<pre>\r\n<code>List all banned IPs/Subnets.\r\n\r\nExamples:\r\n&gt; emercoin-cli listbanned\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;listbanned&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>ping</code></strong></p>\r\n\r\n<pre>\r\n<code>Requests that a ping be sent to all other nodes, to measure ping time.\r\nResults provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\r\nPing command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\r\n\r\nExamples:\r\n&gt; emercoin-cli ping\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;ping&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>setban &quot;subnet&quot; &quot;add|remove&quot; (bantime) (absolute)</code></strong></p>\r\n\r\n<pre>\r\n<code>Attempts add or remove a IP/Subnet from the banned list.\r\n\r\nArguments:\r\n1. &quot;subnet&quot; (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\r\n2. &quot;command&quot; (string, required) &#39;add&#39; to add a IP/Subnet to the list, &#39;remove&#39; to remove a IP/Subnet from the list\r\n3. &quot;bantime&quot; (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\r\n4. &quot;absolute&quot; (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\r\n\r\nExamples:\r\n&gt; emercoin-cli setban &quot;192.168.0.6&quot; &quot;add&quot; 86400\r\n&gt; emercoin-cli setban &quot;192.168.0.0/24&quot; &quot;add&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;setban&quot;, &quot;params&quot;: [&quot;192.168.0.6&quot;, &quot;add&quot;, 86400] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>setnetworkactive true|false</code></strong></p>\r\n\r\n<pre>\r\n<code>Disable/enable all p2p network activity.\r\n\r\nArguments:\r\n1. &quot;state&quot; (boolean, required) true to enable networking, false to disable</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>== Rawtransactions ==</strong></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><code>createrawtransaction [{&quot;txid&quot;:&quot;id&quot;,&quot;vout&quot;:n},...] {&quot;address&quot;:amount,&quot;data&quot;:&quot;hex&quot;,...} ( locktime )</code></strong></p>\r\n\r\n<pre>\r\n<code>Create a transaction spending the given inputs and creating new outputs.\r\nOutputs can be addresses or data.\r\nReturns hex-encoded raw transaction.\r\nNote that the transaction&#39;s inputs are not signed, and\r\nit is not stored in the wallet or transmitted to the network.\r\n\r\nArguments:\r\n1. &quot;inputs&quot; (array, required) A json array of json objects\r\n[\r\n{\r\n&quot;txid&quot;:&quot;id&quot;, (string, required) The transaction id\r\n&quot;vout&quot;:n, (numeric, required) The output number\r\n&quot;sequence&quot;:n (numeric, optional) The sequence number\r\n}\r\n,...\r\n]\r\n2. &quot;outputs&quot; (object, required) a json object with outputs\r\n{\r\n&quot;address&quot;: x.xxx, (numeric or string, required) The key is the emercoin address, the numeric value (can be string) is the EMC amount\r\n&quot;data&quot;: &quot;hex&quot; (string, required) The key is &quot;data&quot;, the value is hex encoded data\r\n,...\r\n}\r\n3. locktime (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\r\n\r\nResult:\r\n&quot;transaction&quot; (string) hex string of the transaction\r\n\r\nExamples:\r\n&gt; emercoin-cli createrawtransaction &quot;[{\\&quot;txid\\&quot;:\\&quot;myid\\&quot;,\\&quot;vout\\&quot;:0}]&quot; &quot;{\\&quot;address\\&quot;:0.01}&quot;\r\n&gt; emercoin-cli createrawtransaction &quot;[{\\&quot;txid\\&quot;:\\&quot;myid\\&quot;,\\&quot;vout\\&quot;:0}]&quot; &quot;{\\&quot;data\\&quot;:\\&quot;00010203\\&quot;}&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;createrawtransaction&quot;, &quot;params&quot;: [&quot;[{\\&quot;txid\\&quot;:\\&quot;myid\\&quot;,\\&quot;vout\\&quot;:0}]&quot;, &quot;{\\&quot;address\\&quot;:0.01}&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;createrawtransaction&quot;, &quot;params&quot;: [&quot;[{\\&quot;txid\\&quot;:\\&quot;myid\\&quot;,\\&quot;vout\\&quot;:0}]&quot;, &quot;{\\&quot;data\\&quot;:\\&quot;00010203\\&quot;}&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>decoderawtransaction &quot;hexstring&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Return a JSON object representing the serialized, hex-encoded transaction.\r\n\r\nArguments:\r\n1. &quot;hexstring&quot; (string, required) The transaction hex string\r\n\r\nResult:\r\n{\r\n&quot;txid&quot; : &quot;id&quot;, (string) The transaction id\r\n&quot;hash&quot; : &quot;id&quot;, (string) The transaction hash (differs from txid for witness transactions)\r\n&quot;size&quot; : n, (numeric) The transaction size\r\n&quot;vsize&quot; : n, (numeric) The virtual transaction size (differs from size for witness transactions)\r\n&quot;version&quot; : n, (numeric) The version\r\n&quot;locktime&quot; : ttt, (numeric) The lock time\r\n&quot;vin&quot; : [ (array of json objects)\r\n{\r\n&quot;txid&quot;: &quot;id&quot;, (string) The transaction id\r\n&quot;vout&quot;: n, (numeric) The output number\r\n&quot;scriptSig&quot;: { (json object) The script\r\n&quot;asm&quot;: &quot;asm&quot;, (string) asm\r\n&quot;hex&quot;: &quot;hex&quot; (string) hex\r\n},\r\n&quot;txinwitness&quot;: [&quot;hex&quot;, ...] (array of string) hex-encoded witness data (if any)\r\n&quot;sequence&quot;: n (numeric) The script sequence number\r\n}\r\n,...\r\n],\r\n&quot;vout&quot; : [ (array of json objects)\r\n{\r\n&quot;value&quot; : x.xxx, (numeric) The value in EMC\r\n&quot;n&quot; : n, (numeric) index\r\n&quot;scriptPubKey&quot; : { (json object)\r\n&quot;asm&quot; : &quot;asm&quot;, (string) the asm\r\n&quot;hex&quot; : &quot;hex&quot;, (string) the hex\r\n&quot;reqSigs&quot; : n, (numeric) The required sigs\r\n&quot;type&quot; : &quot;pubkeyhash&quot;, (string) The type, eg &#39;pubkeyhash&#39;\r\n&quot;addresses&quot; : [ (json array of string)\r\n&quot;12tvKAXCxZjSmdNbao16dKXC8tRWfcF5oc&quot; (string) emercoin address\r\n,...\r\n]\r\n}\r\n}\r\n,...\r\n],\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli decoderawtransaction &quot;hexstring&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;decoderawtransaction&quot;, &quot;params&quot;: [&quot;hexstring&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>decodescript &quot;hexstring&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Decode a hex-encoded script.\r\n\r\nArguments:\r\n1. &quot;hexstring&quot; (string) the hex encoded script\r\n\r\nResult:\r\n{\r\n&quot;asm&quot;:&quot;asm&quot;, (string) Script public key\r\n&quot;hex&quot;:&quot;hex&quot;, (string) hex encoded public key\r\n&quot;type&quot;:&quot;type&quot;, (string) The output type\r\n&quot;reqSigs&quot;: n, (numeric) The required signatures\r\n&quot;addresses&quot;: [ (json array of string)\r\n&quot;address&quot; (string) emercoin address\r\n,...\r\n],\r\n&quot;p2sh&quot;,&quot;address&quot; (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli decodescript &quot;hexstring&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;decodescript&quot;, &quot;params&quot;: [&quot;hexstring&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>fundrawtransaction &quot;hexstring&quot; ( options )</code></strong></p>\r\n\r\n<pre>\r\n<code>Add inputs to a transaction until it has enough in value to meet its out value.\r\nThis will not modify existing inputs, and will add at most one change output to the outputs.\r\nNo existing outputs will be modified unless &quot;subtractFeeFromOutputs&quot; is specified.\r\nNote that inputs which were signed may need to be resigned after completion since in/outputs have been added.\r\nThe inputs added will not be signed, use signrawtransaction for that.\r\nNote that all existing inputs must have their previous output transaction be in the wallet.\r\nNote that all inputs selected must be of standard form and P2SH scripts must be\r\nin the wallet using importaddress or addmultisigaddress (to calculate fees).\r\nYou can see whether this is the case by checking the &quot;solvable&quot; field in the listunspent output.\r\nOnly pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only\r\n\r\nArguments:\r\n1. &quot;hexstring&quot; (string, required) The hex string of the raw transaction\r\n2. options (object, optional)\r\n{\r\n&quot;changeAddress&quot; (string, optional, default pool address) The emercoin address to receive the change\r\n&quot;changePosition&quot; (numeric, optional, default random) The index of the change output\r\n&quot;includeWatching&quot; (boolean, optional, default false) Also select inputs which are watch only\r\n&quot;lockUnspents&quot; (boolean, optional, default false) Lock selected unspent outputs\r\n&quot;reserveChangeKey&quot; (boolean, optional, default true) Reserves the change output key from the keypool\r\n&quot;feeRate&quot; (numeric, optional, default not set: makes wallet determine the fee) Set a specific feerate (EMC per KB)\r\n&quot;subtractFeeFromOutputs&quot; (array, optional) A json array of integers.\r\nThe fee will be equally deducted from the amount of each specified output.\r\nThe outputs are specified by their zero-based index, before any change output is added.\r\nThose recipients will receive less emercoins than you enter in their corresponding amount field.\r\nIf no outputs are specified here, the sender pays the fee.\r\n[vout_index,...]\r\n}\r\nfor backward compatibility: passing in a true instead of an object will result in {&quot;includeWatching&quot;:true}\r\n\r\nResult:\r\n{\r\n&quot;hex&quot;: &quot;value&quot;, (string) The resulting raw transaction (hex-encoded string)\r\n&quot;fee&quot;: n, (numeric) Fee in EMC the resulting transaction pays\r\n&quot;changepos&quot;: n (numeric) The position of the added change output, or -1\r\n}\r\n\r\nExamples:\r\n\r\nCreate a transaction with no inputs\r\n&gt; emercoin-cli createrawtransaction &quot;[]&quot; &quot;{\\&quot;myaddress\\&quot;:0.01}&quot;\r\n\r\nAdd sufficient unsigned inputs to meet the output value\r\n&gt; emercoin-cli fundrawtransaction &quot;rawtransactionhex&quot;\r\n\r\nSign the transaction\r\n&gt; emercoin-cli signrawtransaction &quot;fundedtransactionhex&quot;\r\n\r\nSend the transaction\r\n&gt; emercoin-cli sendrawtransaction &quot;signedtransactionhex&quot;</code></pre>\r\n\r\n<p><strong><code>getrawtransaction &quot;txid&quot; ( verbose )</code></strong></p>\r\n\r\n<pre>\r\n<code>NOTE: By default this function only works for mempool transactions. If the -txindex option is\r\nenabled, it also works for blockchain transactions.\r\nDEPRECATED: for now, it also works for transactions with unspent outputs.\r\n\r\nReturn the raw transaction data.\r\n\r\nIf verbose is &#39;true&#39;, returns an Object with information about &#39;txid&#39;.\r\nIf verbose is &#39;false&#39; or omitted, returns a string that is serialized, hex-encoded data for &#39;txid&#39;.\r\n\r\nArguments:\r\n1. &quot;txid&quot; (string, required) The transaction id\r\n2. verbose (bool, optional, default=false) If false, return a string, otherwise return a json object\r\n\r\nResult (if verbose is not set or set to false):\r\n&quot;data&quot; (string) The serialized, hex-encoded data for &#39;txid&#39;\r\n\r\nResult (if verbose is set to true):\r\n{\r\n&quot;hex&quot; : &quot;data&quot;, (string) The serialized, hex-encoded data for &#39;txid&#39;\r\n&quot;txid&quot; : &quot;id&quot;, (string) The transaction id (same as provided)\r\n&quot;hash&quot; : &quot;id&quot;, (string) The transaction hash (differs from txid for witness transactions)\r\n&quot;size&quot; : n, (numeric) The serialized transaction size\r\n&quot;vsize&quot; : n, (numeric) The virtual transaction size (differs from size for witness transactions)\r\n&quot;version&quot; : n, (numeric) The version\r\n&quot;locktime&quot; : ttt, (numeric) The lock time\r\n&quot;vin&quot; : [ (array of json objects)\r\n{\r\n&quot;txid&quot;: &quot;id&quot;, (string) The transaction id\r\n&quot;vout&quot;: n, (numeric)\r\n&quot;scriptSig&quot;: { (json object) The script\r\n&quot;asm&quot;: &quot;asm&quot;, (string) asm\r\n&quot;hex&quot;: &quot;hex&quot; (string) hex\r\n},\r\n&quot;sequence&quot;: n (numeric) The script sequence number\r\n&quot;txinwitness&quot;: [&quot;hex&quot;, ...] (array of string) hex-encoded witness data (if any)\r\n}\r\n,...\r\n],\r\n&quot;vout&quot; : [ (array of json objects)\r\n{\r\n&quot;value&quot; : x.xxx, (numeric) The value in EMC\r\n&quot;n&quot; : n, (numeric) index\r\n&quot;scriptPubKey&quot; : { (json object)\r\n&quot;asm&quot; : &quot;asm&quot;, (string) the asm\r\n&quot;hex&quot; : &quot;hex&quot;, (string) the hex\r\n&quot;reqSigs&quot; : n, (numeric) The required sigs\r\n&quot;type&quot; : &quot;pubkeyhash&quot;, (string) The type, eg &#39;pubkeyhash&#39;\r\n&quot;addresses&quot; : [ (json array of string)\r\n&quot;address&quot; (string) emercoin address\r\n,...\r\n]\r\n}\r\n}\r\n,...\r\n],\r\n&quot;blockhash&quot; : &quot;hash&quot;, (string) the block hash\r\n&quot;confirmations&quot; : n, (numeric) The confirmations\r\n&quot;time&quot; : ttt, (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)\r\n&quot;blocktime&quot; : ttt (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getrawtransaction &quot;mytxid&quot;\r\n&gt; emercoin-cli getrawtransaction &quot;mytxid&quot; true\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getrawtransaction&quot;, &quot;params&quot;: [&quot;mytxid&quot;, true] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>sendrawtransaction &quot;hexstring&quot; ( allowhighfees )</code></strong></p>\r\n\r\n<pre>\r\n<code>Submits raw transaction (serialized, hex-encoded) to local node and network.\r\n\r\nAlso see createrawtransaction and signrawtransaction calls.\r\n\r\nArguments:\r\n1. &quot;hexstring&quot; (string, required) The hex string of the raw transaction)\r\n2. allowhighfees (boolean, optional, default=false) Allow high fees\r\n\r\nResult:\r\n&quot;hex&quot; (string) The transaction hash in hex\r\n\r\nExamples:\r\n\r\nCreate a transaction\r\n&gt; emercoin-cli createrawtransaction &quot;[{\\&quot;txid\\&quot; : \\&quot;mytxid\\&quot;,\\&quot;vout\\&quot;:0}]&quot; &quot;{\\&quot;myaddress\\&quot;:0.01}&quot;\r\nSign the transaction, and get back the hex\r\n&gt; emercoin-cli signrawtransaction &quot;myhex&quot;\r\n\r\nSend the transaction (signed hex)\r\n&gt; emercoin-cli sendrawtransaction &quot;signedhex&quot;\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;sendrawtransaction&quot;, &quot;params&quot;: [&quot;signedhex&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>signrawtransaction &quot;hexstring&quot; ( [{&quot;txid&quot;:&quot;id&quot;,&quot;vout&quot;:n,&quot;scriptPubKey&quot;:&quot;hex&quot;,&quot;redeemScript&quot;:&quot;hex&quot;},...] [&quot;privatekey1&quot;,...] sighashtype )</code></strong></p>\r\n\r\n<pre>\r\n<code>Sign inputs for raw transaction (serialized, hex-encoded).\r\nThe second optional argument (may be null) is an array of previous transaction outputs that\r\nthis transaction depends on but may not yet be in the block chain.\r\nThe third optional argument (may be null) is an array of base58-encoded private\r\nkeys that, if given, will be the only keys used to sign the transaction.\r\n\r\nArguments:\r\n1. &quot;hexstring&quot; (string, required) The transaction hex string\r\n2. &quot;prevtxs&quot; (string, optional) An json array of previous dependent transaction outputs\r\n[ (json array of json objects, or &#39;null&#39; if none provided)\r\n{\r\n&quot;txid&quot;:&quot;id&quot;, (string, required) The transaction id\r\n&quot;vout&quot;:n, (numeric, required) The output number\r\n&quot;scriptPubKey&quot;: &quot;hex&quot;, (string, required) script key\r\n&quot;redeemScript&quot;: &quot;hex&quot;, (string, required for P2SH or P2WSH) redeem script\r\n&quot;amount&quot;: value (numeric, required) The amount spent\r\n}\r\n,...\r\n]\r\n3. &quot;privkeys&quot; (string, optional) A json array of base58-encoded private keys for signing\r\n[ (json array of strings, or &#39;null&#39; if none provided)\r\n&quot;privatekey&quot; (string) private key in base58-encoding\r\n,...\r\n]\r\n4. &quot;sighashtype&quot; (string, optional, default=ALL) The signature hash type. Must be one of\r\n&quot;ALL&quot;\r\n&quot;NONE&quot;\r\n&quot;SINGLE&quot;\r\n&quot;ALL|ANYONECANPAY&quot;\r\n&quot;NONE|ANYONECANPAY&quot;\r\n&quot;SINGLE|ANYONECANPAY&quot;\r\n\r\nResult:\r\n{\r\n&quot;hex&quot; : &quot;value&quot;, (string) The hex-encoded raw transaction with signature(s)\r\n&quot;complete&quot; : true|false, (boolean) If the transaction has a complete set of signatures\r\n&quot;errors&quot; : [ (json array of objects) Script verification errors (if there are any)\r\n{\r\n&quot;txid&quot; : &quot;hash&quot;, (string) The hash of the referenced, previous transaction\r\n&quot;vout&quot; : n, (numeric) The index of the output to spent and used as input\r\n&quot;scriptSig&quot; : &quot;hex&quot;, (string) The hex-encoded signature script\r\n&quot;sequence&quot; : n, (numeric) Script sequence number\r\n&quot;error&quot; : &quot;text&quot; (string) Verification or signing error related to the input\r\n}\r\n,...\r\n]\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli signrawtransaction &quot;myhex&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;signrawtransaction&quot;, &quot;params&quot;: [&quot;myhex&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>== Util ==</strong></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><code>createmultisig nrequired [&quot;key&quot;,...]</code></strong></p>\r\n\r\n<pre>\r\n<code>Creates a multi-signature address with n signature of m keys required.\r\nIt returns a json object with the address and redeemScript.\r\n\r\nArguments:\r\n1. nrequired (numeric, required) The number of required signatures out of the n keys or addresses.\r\n2. &quot;keys&quot; (string, required) A json array of keys which are emercoin addresses or hex-encoded public keys\r\n[\r\n&quot;key&quot; (string) emercoin address or hex-encoded public key\r\n,...\r\n]\r\n\r\nResult:\r\n{\r\n&quot;address&quot;:&quot;multisigaddress&quot;, (string) The value of the new multisig address.\r\n&quot;redeemScript&quot;:&quot;script&quot; (string) The string value of the hex-encoded redemption script.\r\n}\r\n\r\nExamples:\r\n\r\nCreate a multisig address from 2 addresses\r\n&gt; emercoin-cli createmultisig 2 &quot;[\\&quot;16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\&quot;,\\&quot;171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\&quot;]&quot;\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;createmultisig&quot;, &quot;params&quot;: [2, &quot;[\\&quot;16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\&quot;,\\&quot;171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\&quot;]&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>estimatefee nblocks</code></strong></p>\r\n\r\n<pre>\r\n<code>Estimates the approximate fee per kilobyte needed for a transaction to begin\r\nconfirmation within nblocks blocks. Uses virtual transaction size of transaction\r\nas defined in BIP 141 (witness data is discounted).\r\n\r\nArguments:\r\n1. nblocks (numeric, does nothing - backward compatability with emercoin RPC)\r\n\r\nResult:\r\nn (numeric) estimated fee-per-kilobyte\r\n\r\nA negative value is returned if not enough transactions and blocks\r\nhave been observed to make an estimate.\r\n-1 is always returned for nblocks == 1 as it is impossible to calculate\r\na fee that is high enough to get reliably included in the next block.\r\n\r\nExample:\r\n&gt; emercoin-cli estimatefee 6</code></pre>\r\n\r\n<p><strong><code>estimatepriority nblocks</code></strong></p>\r\n\r\n<pre>\r\n<code>DEPRECATED. Estimates the approximate priority a zero-fee transaction needs to begin\r\nconfirmation within nblocks blocks.\r\n\r\nArguments:\r\n1. nblocks (numeric, required)\r\n\r\nResult:\r\nn (numeric) estimated priority\r\n\r\nA negative value is returned if not enough transactions and blocks\r\nhave been observed to make an estimate.\r\n\r\nExample:\r\n&gt; emercoin-cli estimatepriority 6</code></pre>\r\n\r\n<p><strong><code>estimatesmartpriority nblocks</code></strong></p>\r\n\r\n<pre>\r\n<code>DEPRECATED. WARNING: This interface is unstable and may disappear or change!\r\n\r\nEstimates the approximate priority a zero-fee transaction needs to begin\r\nconfirmation within nblocks blocks if possible and return the number of blocks\r\nfor which the estimate is valid.\r\n\r\nArguments:\r\n1. nblocks (numeric, required)\r\n\r\nResult:\r\n{\r\n&quot;priority&quot; : x.x, (numeric) estimated priority\r\n&quot;blocks&quot; : n (numeric) block number where estimate was found\r\n}\r\n\r\nA negative value is returned if not enough transactions and blocks\r\nhave been observed to make an estimate for any number of blocks.\r\nHowever if the mempool reject fee is set it will return 1e9 * MAX_MONEY.\r\n\r\nExample:\r\n&gt; emercoin-cli estimatesmartpriority 6</code></pre>\r\n\r\n<p><strong><code>signmessagewithprivkey &quot;privkey&quot; &quot;message&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Sign a message with the private key of an address\r\n\r\nArguments:\r\n1. &quot;privkey&quot; (string, required) The private key to sign the message with.\r\n2. &quot;message&quot; (string, required) The message to create a signature of.\r\n\r\nResult:\r\n&quot;signature&quot; (string) The signature of the message encoded in base 64\r\n\r\nExamples:\r\n\r\nCreate the signature\r\n&gt; emercoin-cli signmessagewithprivkey &quot;privkey&quot; &quot;my message&quot;\r\n\r\nVerify the signature\r\n&gt; emercoin-cli verifymessage &quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot; &quot;signature&quot; &quot;my message&quot;\r\n\r\nAs json rpc\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;signmessagewithprivkey&quot;, &quot;params&quot;: [&quot;privkey&quot;, &quot;my message&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>validateaddress &quot;emercoinaddress&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Return information about the given emercoin address.\r\n\r\nArguments:\r\n1. &quot;emercoinaddress&quot; (string, required) The emercoin address to validate\r\n\r\nResult:\r\n{\r\n&quot;isvalid&quot; : true|false, (boolean) If the address is valid or not. If not, this is the only property returned.\r\n&quot;address&quot; : &quot;address&quot;, (string) The emercoin address validated\r\n&quot;scriptPubKey&quot; : &quot;hex&quot;, (string) The hex encoded scriptPubKey generated by the address\r\n&quot;ismine&quot; : true|false, (boolean) If the address is yours or not\r\n&quot;iswatchonly&quot; : true|false, (boolean) If the address is watchonly\r\n&quot;isscript&quot; : true|false, (boolean) If the key is a script\r\n&quot;pubkey&quot; : &quot;publickeyhex&quot;, (string) The hex value of the raw public key\r\n&quot;iscompressed&quot; : true|false, (boolean) If the address is compressed\r\n&quot;account&quot; : &quot;account&quot; (string) DEPRECATED. The account associated with the address, &quot;&quot; is the default account\r\n&quot;timestamp&quot; : timestamp, (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\r\n&quot;hdkeypath&quot; : &quot;keypath&quot; (string, optional) The HD keypath if the key is HD and available\r\n&quot;hdmasterkeyid&quot; : &quot;&lt;hash160&gt;&quot; (string, optional) The Hash160 of the HD master pubkey\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli validateaddress &quot;1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;validateaddress&quot;, &quot;params&quot;: [&quot;1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>verifymessage &quot;address&quot; &quot;signature&quot; &quot;message&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Verify a signed message\r\n\r\nArguments:\r\n1. &quot;address&quot; (string, required) The emercoin address to use for the signature.\r\n2. &quot;signature&quot; (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\r\n3. &quot;message&quot; (string, required) The message that was signed.\r\n\r\nResult:\r\ntrue|false (boolean) If the signature is verified or not.\r\n\r\nExamples:\r\n\r\nUnlock the wallet for 30 seconds\r\n&gt; emercoin-cli walletpassphrase &quot;mypassphrase&quot; 30\r\n\r\nCreate the signature\r\n&gt; emercoin-cli signmessage &quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot; &quot;my message&quot;\r\n\r\nVerify the signature\r\n&gt; emercoin-cli verifymessage &quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot; &quot;signature&quot; &quot;my message&quot;\r\n\r\nAs json rpc\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;verifymessage&quot;, &quot;params&quot;: [&quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot;, &quot;signature&quot;, &quot;my message&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>== Wallet ==</strong></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><code>abandontransaction &quot;txid&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Mark in-wallet transaction &lt;txid&gt; as abandoned\r\nThis will mark this transaction and all its in-wallet descendants as abandoned which will allow\r\nfor their inputs to be respent. It can be used to replace &quot;stuck&quot; or evicted transactions.\r\nIt only works on transactions which are not included in a block and are not currently in the mempool.\r\nIt has no effect on transactions which are already conflicted or abandoned.\r\n\r\nArguments:\r\n1. &quot;txid&quot; (string, required) The transaction id\r\n\r\nResult:\r\n\r\nExamples:\r\n&gt; emercoin-cli abandontransaction &quot;1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;abandontransaction&quot;, &quot;params&quot;: [&quot;1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>addmultisigaddress nrequired [&quot;key&quot;,...] ( &quot;account&quot; )</code></strong></p>\r\n\r\n<pre>\r\n<code>Add a nrequired-to-sign multisignature address to the wallet.\r\nEach key is a Emercoin address or hex-encoded public key.\r\nIf &#39;account&#39; is specified (DEPRECATED), assign address to that account.\r\n\r\nArguments:\r\n1. nrequired (numeric, required) The number of required signatures out of the n keys or addresses.\r\n2. &quot;keys&quot; (string, required) A json array of emercoin addresses or hex-encoded public keys\r\n[\r\n&quot;address&quot; (string) emercoin address or hex-encoded public key\r\n...,\r\n]\r\n3. &quot;account&quot; (string, optional) DEPRECATED. An account to assign the addresses to.\r\n\r\nResult:\r\n&quot;address&quot; (string) A emercoin address associated with the keys.\r\n\r\nExamples:\r\n\r\nAdd a multisig address from 2 addresses\r\n&gt; emercoin-cli addmultisigaddress 2 &quot;[\\&quot;16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\&quot;,\\&quot;171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\&quot;]&quot;\r\n\r\nAs json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;addmultisigaddress&quot;, &quot;params&quot;: [2, &quot;[\\&quot;16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\&quot;,\\&quot;171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\&quot;]&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>addwitnessaddress &quot;address&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Add a witness address for a script (with pubkey or redeemscript known).\r\nIt returns the witness script.\r\n\r\nArguments:\r\n1. &quot;address&quot; (string, required) An address known to the wallet\r\n\r\nResult:\r\n&quot;witnessaddress&quot;, (string) The value of the new address (P2SH of witness script).\r\n}</code></pre>\r\n\r\n<p><strong><code>backupwallet &quot;destination&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Safely copies current wallet file to destination, which can be a directory or a path with filename.\r\n\r\nArguments:\r\n1. &quot;destination&quot; (string) The destination directory or file\r\n\r\nExamples:\r\n&gt; emercoin-cli backupwallet &quot;backup.dat&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;backupwallet&quot;, &quot;params&quot;: [&quot;backup.dat&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>bumpfee &quot;txid&quot; ( options )</code></strong></p>\r\n\r\n<pre>\r\n<code>Bumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\r\nAn opt-in RBF transaction with the given txid must be in the wallet.\r\nThe command will pay the additional fee by decreasing (or perhaps removing) its change output.\r\nIf the change output is not big enough to cover the increased fee, the command will currently fail\r\ninstead of adding new inputs to compensate. (A future implementation could improve this.)\r\nThe command will fail if the wallet or mempool contains a transaction that spends one of T&#39;s outputs.\r\nBy default, the new fee will be calculated automatically using estimatefee.\r\nThe user can specify a confirmation target for estimatefee.\r\nAlternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\r\nAt a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\r\nreturned by getnetworkinfo) to enter the node&#39;s mempool.\r\n\r\nArguments:\r\n1. txid (string, required) The txid to be bumped\r\n2. options (object, optional)\r\n{\r\n&quot;confTarget&quot; (numeric, optional) Confirmation target (in blocks)\r\n&quot;totalFee&quot; (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\r\nIn rare cases, the actual fee paid might be slightly higher than the specified\r\ntotalFee if the tx change output has to be removed because it is too close to\r\nthe dust threshold.\r\n&quot;replaceable&quot; (boolean, optional, default true) Whether the new transaction should still be\r\nmarked bip-125 replaceable. If true, the sequence numbers in the transaction will\r\nbe left unchanged from the original. If false, any input sequence numbers in the\r\noriginal transaction that were less than 0xfffffffe will be increased to 0xfffffffe\r\nso the new transaction will not be explicitly bip-125 replaceable (though it may\r\nstill be replacable in practice, for example if it has unconfirmed ancestors which\r\nare replaceable).\r\n}\r\n\r\nResult:\r\n{\r\n&quot;txid&quot;: &quot;value&quot;, (string) The id of the new transaction\r\n&quot;origfee&quot;: n, (numeric) Fee of the replaced transaction\r\n&quot;fee&quot;: n, (numeric) Fee of the new transaction\r\n&quot;errors&quot;: [ str... ] (json array of strings) Errors encountered during processing (may be empty)\r\n}\r\n\r\nExamples:\r\n\r\nBump the fee, get the new transaction&#39;s txid\r\n&gt; emercoin-cli bumpfee &lt;txid&gt;</code></pre>\r\n\r\n<p><strong><code>dumpprivkey &quot;address&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Reveals the private key corresponding to &#39;address&#39;.\r\nThen the importprivkey can be used with this output\r\n\r\nArguments:\r\n1. &quot;address&quot; (string, required) The emercoin address for the private key\r\n\r\nResult:\r\n&quot;key&quot; (string) The private key\r\n\r\nExamples:\r\n&gt; emercoin-cli dumpprivkey &quot;myaddress&quot;\r\n&gt; emercoin-cli importprivkey &quot;mykey&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;dumpprivkey&quot;, &quot;params&quot;: [&quot;myaddress&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>dumpwallet &quot;filename&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Dumps all wallet keys in a human-readable format.\r\n\r\nArguments:\r\n1. &quot;filename&quot; (string, required) The filename\r\n\r\nExamples:\r\n&gt; emercoin-cli dumpwallet &quot;test&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;dumpwallet&quot;, &quot;params&quot;: [&quot;test&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>encryptwallet &quot;passphrase&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Encrypts the wallet with &#39;passphrase&#39;. This is for first time encryption.\r\nAfter this, any calls that interact with private keys such as sending or signing\r\nwill require the passphrase to be set prior the making these calls.\r\nUse the walletpassphrase call for this, and then walletlock call.\r\nIf the wallet is already encrypted, use the walletpassphrasechange call.\r\nNote that this will shutdown the server.\r\n\r\nArguments:\r\n1. &quot;passphrase&quot; (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\r\n\r\nExamples:\r\n\r\nEncrypt you wallet\r\n&gt; emercoin-cli encryptwallet &quot;my pass phrase&quot;\r\n\r\nNow set the passphrase to use the wallet, such as for signing or sending emercoin\r\n&gt; emercoin-cli walletpassphrase &quot;my pass phrase&quot;\r\n\r\nNow we can so something like sign\r\n&gt; emercoin-cli signmessage &quot;address&quot; &quot;test message&quot;\r\n\r\nNow lock the wallet again by removing the passphrase\r\n&gt; emercoin-cli walletlock\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;encryptwallet&quot;, &quot;params&quot;: [&quot;my pass phrase&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getaccount &quot;address&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>DEPRECATED. Returns the account associated with the given address.\r\n\r\nArguments:\r\n1. &quot;address&quot; (string, required) The emercoin address for account lookup.\r\n\r\nResult:\r\n&quot;accountname&quot; (string) the account address\r\n\r\nExamples:\r\n&gt; emercoin-cli getaccount &quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getaccount&quot;, &quot;params&quot;: [&quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getaccountaddress &quot;account&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>DEPRECATED. Returns the current Emercoin address for receiving payments to this account.\r\n\r\nArguments:\r\n1. &quot;account&quot; (string, required) The account name for the address. It can also be set to the empty string &quot;&quot; to represent the default account. The account does not need to exist, it will be created and a new address created if there is no account by the given name.\r\n\r\nResult:\r\n&quot;address&quot; (string) The account emercoin address\r\n\r\nExamples:\r\n&gt; emercoin-cli getaccountaddress\r\n&gt; emercoin-cli getaccountaddress &quot;&quot;\r\n&gt; emercoin-cli getaccountaddress &quot;myaccount&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getaccountaddress&quot;, &quot;params&quot;: [&quot;myaccount&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getaddressesbyaccount &quot;account&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>DEPRECATED. Returns the list of addresses for the given account.\r\n\r\nArguments:\r\n1. &quot;account&quot; (string, required) The account name.\r\n\r\nResult:\r\n[ (json array of string)\r\n&quot;address&quot; (string) a emercoin address associated with the given account\r\n,...\r\n]\r\n\r\nExamples:\r\n&gt; emercoin-cli getaddressesbyaccount &quot;tabby&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getaddressesbyaccount&quot;, &quot;params&quot;: [&quot;tabby&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getbalance ( &quot;account&quot; minconf include_watchonly )</code></strong></p>\r\n\r\n<pre>\r\n<code>If account is not specified, returns the server&#39;s total available balance.\r\nIf account is specified (DEPRECATED), returns the balance in the account.\r\nNote that the account &quot;&quot; is not the same as leaving the parameter out.\r\nThe server total may be different to the balance in the default &quot;&quot; account.\r\n\r\nArguments:\r\n1. &quot;account&quot; (string, optional) DEPRECATED. The account string may be given as a\r\nspecific account name to find the balance associated with wallet keys in\r\na named account, or as the empty string (&quot;&quot;) to find the balance\r\nassociated with wallet keys not in any named account, or as &quot;*&quot; to find\r\nthe balance associated with all wallet keys regardless of account.\r\nWhen this option is specified, it calculates the balance in a different\r\nway than when it is not specified, and which can count spends twice when\r\nthere are conflicting pending transactions (such as those created by\r\nthe bumpfee command), temporarily resulting in low or even negative\r\nbalances. In general, account balance calculation is not considered\r\nreliable and has resulted in confusing outcomes, so it is recommended to\r\navoid passing this argument.\r\n2. minconf (numeric, optional, default=1) Only include transactions confirmed at least this many times.\r\n3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see &#39;importaddress&#39;)\r\n\r\nResult:\r\namount (numeric) The total amount in EMC received for this account.\r\n\r\nExamples:\r\n\r\nThe total amount in the wallet\r\n&gt; emercoin-cli getbalance\r\n\r\nThe total amount in the wallet at least 5 blocks confirmed\r\n&gt; emercoin-cli getbalance &quot;*&quot; 6\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getbalance&quot;, &quot;params&quot;: [&quot;*&quot;, 6] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getnewaddress ( &quot;account&quot; )</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns a new Emercoin address for receiving payments.\r\nIf &#39;account&#39; is specified (DEPRECATED), it is added to the address book\r\nso payments received with the address will be credited to &#39;account&#39;.\r\n\r\nArguments:\r\n1. &quot;account&quot; (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account &quot;&quot; is used. It can also be set to the empty string &quot;&quot; to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\r\n\r\nResult:\r\n&quot;address&quot; (string) The new emercoin address\r\n\r\nExamples:\r\n&gt; emercoin-cli getnewaddress\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getnewaddress&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getrawchangeaddress</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns a new Emercoin address, for receiving change.\r\nThis is for use with raw transactions, NOT normal use.\r\n\r\nResult:\r\n&quot;address&quot; (string) The address\r\n\r\nExamples:\r\n&gt; emercoin-cli getrawchangeaddress\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getrawchangeaddress&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getreceivedbyaccount &quot;account&quot; ( minconf )</code></strong></p>\r\n\r\n<pre>\r\n<code>DEPRECATED. Returns the total amount received by addresses with &lt;account&gt; in transactions with at least [minconf] confirmations.\r\n\r\nArguments:\r\n1. &quot;account&quot; (string, required) The selected account, may be the default account using &quot;&quot;.\r\n2. minconf (numeric, optional, default=1) Only include transactions confirmed at least this many times.\r\n\r\nResult:\r\namount (numeric) The total amount in EMC received for this account.\r\n\r\nExamples:\r\n\r\nAmount received by the default account with at least 1 confirmation\r\n&gt; emercoin-cli getreceivedbyaccount &quot;&quot;\r\n\r\nAmount received at the tabby account including unconfirmed amounts with zero confirmations\r\n&gt; emercoin-cli getreceivedbyaccount &quot;tabby&quot; 0\r\n\r\nThe amount with at least 6 confirmation, very safe\r\n&gt; emercoin-cli getreceivedbyaccount &quot;tabby&quot; 6\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getreceivedbyaccount&quot;, &quot;params&quot;: [&quot;tabby&quot;, 6] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getreceivedbyaddress &quot;address&quot; ( minconf )</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns the total amount received by the given address in transactions with at least minconf confirmations.\r\n\r\nArguments:\r\n1. &quot;address&quot; (string, required) The emercoin address for transactions.\r\n2. minconf (numeric, optional, default=1) Only include transactions confirmed at least this many times.\r\n\r\nResult:\r\namount (numeric) The total amount in EMC received at this address.\r\n\r\nExamples:\r\n\r\nThe amount from transactions with at least 1 confirmation\r\n&gt; emercoin-cli getreceivedbyaddress &quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot;\r\n\r\nThe amount including unconfirmed transactions, zero confirmations\r\n&gt; emercoin-cli getreceivedbyaddress &quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot; 0\r\n\r\nThe amount with at least 6 confirmation, very safe\r\n&gt; emercoin-cli getreceivedbyaddress &quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot; 6\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getreceivedbyaddress&quot;, &quot;params&quot;: [&quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot;, 6] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>gettransaction &quot;txid&quot; ( include_watchonly )</code></strong></p>\r\n\r\n<pre>\r\n<code>Get detailed information about in-wallet transaction &lt;txid&gt;\r\n\r\nArguments:\r\n1. &quot;txid&quot; (string, required) The transaction id\r\n2. &quot;include_watchonly&quot; (bool, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]\r\n\r\nResult:\r\n{\r\n&quot;amount&quot; : x.xxx, (numeric) The transaction amount in EMC\r\n&quot;fee&quot;: x.xxx, (numeric) The amount of the fee in EMC. This is negative and only available for the\r\n&#39;send&#39; category of transactions.\r\n&quot;confirmations&quot; : n, (numeric) The number of confirmations\r\n&quot;blockhash&quot; : &quot;hash&quot;, (string) The block hash\r\n&quot;blockindex&quot; : xx, (numeric) The index of the transaction in the block that includes it\r\n&quot;blocktime&quot; : ttt, (numeric) The time in seconds since epoch (1 Jan 1970 GMT)\r\n&quot;txid&quot; : &quot;transactionid&quot;, (string) The transaction id.\r\n&quot;time&quot; : ttt, (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\r\n&quot;timereceived&quot; : ttt, (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\r\n&quot;bip125-replaceable&quot;: &quot;yes|no|unknown&quot;, (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\r\nmay be unknown for unconfirmed transactions not in the mempool\r\n&quot;details&quot; : [\r\n{\r\n&quot;account&quot; : &quot;accountname&quot;, (string) DEPRECATED. The account name involved in the transaction, can be &quot;&quot; for the default account.\r\n&quot;address&quot; : &quot;address&quot;, (string) The emercoin address involved in the transaction\r\n&quot;category&quot; : &quot;send|receive&quot;, (string) The category, either &#39;send&#39; or &#39;receive&#39;\r\n&quot;amount&quot; : x.xxx, (numeric) The amount in EMC\r\n&quot;label&quot; : &quot;label&quot;, (string) A comment for the address/transaction, if any\r\n&quot;vout&quot; : n, (numeric) the vout value\r\n&quot;fee&quot;: x.xxx, (numeric) The amount of the fee in EMC. This is negative and only available for the\r\n&#39;send&#39; category of transactions.\r\n&quot;abandoned&quot;: xxx (bool) &#39;true&#39; if the transaction has been abandoned (inputs are respendable). Only available for the\r\n&#39;send&#39; category of transactions.\r\n}\r\n,...\r\n],\r\n&quot;hex&quot; : &quot;data&quot; (string) Raw data for transaction\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli gettransaction &quot;1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d&quot;\r\n&gt; emercoin-cli gettransaction &quot;1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d&quot; true\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;gettransaction&quot;, &quot;params&quot;: [&quot;1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>getunconfirmedbalance</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns the server&#39;s total unconfirmed balance</code></pre>\r\n\r\n<p><strong><code>getwalletinfo</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns an object containing various wallet state info.\r\n\r\nResult:\r\n{\r\n&quot;walletversion&quot;: xxxxx, (numeric) the wallet version\r\n&quot;balance&quot;: xxxxxxx, (numeric) the total confirmed balance of the wallet in EMC\r\n&quot;unconfirmed_balance&quot;: xxx, (numeric) the total unconfirmed balance of the wallet in EMC\r\n&quot;immature_balance&quot;: xxxxxx, (numeric) the total immature balance of the wallet in EMC\r\n&quot;txcount&quot;: xxxxxxx, (numeric) the total number of transactions in the wallet\r\n&quot;keypoololdest&quot;: xxxxxx, (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\r\n&quot;keypoolsize&quot;: xxxx, (numeric) how many new keys are pre-generated\r\n&quot;unlocked_until&quot;: ttt, (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\r\n&quot;paytxfee&quot;: x.xxxx, (numeric) the transaction fee configuration, set in EMC/kB\r\n&quot;hdmasterkeyid&quot;: &quot;&lt;hash160&gt;&quot; (string) the Hash160 of the HD master pubkey\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli getwalletinfo\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;getwalletinfo&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>importaddress &quot;address&quot; ( &quot;label&quot; rescan p2sh )</code></strong></p>\r\n\r\n<pre>\r\n<code>Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.\r\n\r\nArguments:\r\n1. &quot;script&quot; (string, required) The hex-encoded script (or address)\r\n2. &quot;label&quot; (string, optional, default=&quot;&quot;) An optional label\r\n3. rescan (boolean, optional, default=true) Rescan the wallet for transactions\r\n4. p2sh (boolean, optional, default=false) Add the P2SH version of the script as well\r\n\r\nNote: This call can take minutes to complete if rescan is true.\r\nIf you have the full public key, you should call importpubkey instead of this.\r\n\r\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\r\nas change, and not show up in many RPCs.\r\n\r\nExamples:\r\n\r\nImport a script with rescan\r\n&gt; emercoin-cli importaddress &quot;myscript&quot;\r\n\r\nImport using a label without rescan\r\n&gt; emercoin-cli importaddress &quot;myscript&quot; &quot;testing&quot; false\r\n\r\nAs a JSON-RPC call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;importaddress&quot;, &quot;params&quot;: [&quot;myscript&quot;, &quot;testing&quot;, false] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>importmulti &quot;requests&quot; &quot;options&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options).\r\n\r\nArguments:\r\n1. requests (array, required) Data to be imported\r\n[ (array of json objects)\r\n{\r\n&quot;scriptPubKey&quot;: &quot;&lt;script&gt;&quot; | { &quot;address&quot;:&quot;&lt;address&gt;&quot; }, (string / json, required) Type of scriptPubKey (string for script, json for address)\r\n&quot;timestamp&quot;: timestamp | &quot;now&quot; , (integer / string, required) Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\r\nor the string &quot;now&quot; to substitute the current synced blockchain time. The timestamp of the oldest\r\nkey will determine how far back blockchain rescans need to begin for missing wallet transactions.\r\n&quot;now&quot; can be specified to bypass scanning, for keys which are known to never have been used, and\r\n0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\r\ncreation time of all keys being imported by the importmulti call will be scanned.\r\n&quot;redeemscript&quot;: &quot;&lt;script&gt;&quot; , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\r\n&quot;pubkeys&quot;: [&quot;&lt;pubKey&gt;&quot;, ... ] , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\r\n&quot;keys&quot;: [&quot;&lt;key&gt;&quot;, ... ] , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\r\n&quot;internal&quot;: &lt;true&gt; , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments\r\n&quot;watchonly&quot;: &lt;true&gt; , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they&#39;re not spendable, only allowed if keys are empty\r\n&quot;label&quot;: &lt;label&gt; , (string, optional, default: &#39;&#39;) Label to assign to the address (aka account name, for now), only allowed with internal=false\r\n}\r\n,...\r\n]\r\n2. options (json, optional)\r\n{\r\n&quot;rescan&quot;: &lt;false&gt;, (boolean, optional, default: true) Stating if should rescan the blockchain after all imports\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli importmulti &#39;[{ &quot;scriptPubKey&quot;: { &quot;address&quot;: &quot;&lt;my address&gt;&quot; }, &quot;timestamp&quot;:1455191478 }, { &quot;scriptPubKey&quot;: { &quot;address&quot;: &quot;&lt;my 2nd address&gt;&quot; }, &quot;label&quot;: &quot;example 2&quot;, &quot;timestamp&quot;: 1455191480 }]&#39;\r\n&gt; emercoin-cli importmulti &#39;[{ &quot;scriptPubKey&quot;: { &quot;address&quot;: &quot;&lt;my address&gt;&quot; }, &quot;timestamp&quot;:1455191478 }]&#39; &#39;{ &quot;rescan&quot;: false}&#39;\r\n\r\nResponse is an array with the same size as the input that has the execution result :\r\n[{ &quot;success&quot;: true } , { &quot;success&quot;: false, &quot;error&quot;: { &quot;code&quot;: -1, &quot;message&quot;: &quot;Internal Server Error&quot;} }, ... ]</code></pre>\r\n\r\n<p><strong><code>importprivkey &quot;emercoinprivkey&quot; ( &quot;label&quot; ) ( rescan )</code></strong></p>\r\n\r\n<pre>\r\n<code>Adds a private key (as returned by dumpprivkey) to your wallet.\r\n\r\nArguments:\r\n1. &quot;emercoinprivkey&quot; (string, required) The private key (see dumpprivkey)\r\n2. &quot;label&quot; (string, optional, default=&quot;&quot;) An optional label\r\n3. rescan (boolean, optional, default=true) Rescan the wallet for transactions\r\n\r\nNote: This call can take minutes to complete if rescan is true.\r\n\r\nExamples:\r\n\r\nDump a private key\r\n&gt; emercoin-cli dumpprivkey &quot;myaddress&quot;\r\n\r\nImport the private key with rescan\r\n&gt; emercoin-cli importprivkey &quot;mykey&quot;\r\n\r\nImport using a label and without rescan\r\n&gt; emercoin-cli importprivkey &quot;mykey&quot; &quot;testing&quot; false\r\n\r\nImport using default blank label and without rescan\r\n&gt; emercoin-cli importprivkey &quot;mykey&quot; &quot;&quot; false\r\n\r\nAs a JSON-RPC call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;importprivkey&quot;, &quot;params&quot;: [&quot;mykey&quot;, &quot;testing&quot;, false] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>importprunedfunds</code></strong></p>\r\n\r\n<pre>\r\n<code>Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\r\n\r\nArguments:\r\n1. &quot;rawtransaction&quot; (string, required) A raw transaction in hex funding an already-existing address in wallet\r\n2. &quot;txoutproof&quot; (string, required) The hex output from gettxoutproof that contains the transaction</code></pre>\r\n\r\n<p><strong><code>importpubkey &quot;pubkey&quot; ( &quot;label&quot; rescan )</code></strong></p>\r\n\r\n<pre>\r\n<code>Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\r\n\r\nArguments:\r\n1. &quot;pubkey&quot; (string, required) The hex-encoded public key\r\n2. &quot;label&quot; (string, optional, default=&quot;&quot;) An optional label\r\n3. rescan (boolean, optional, default=true) Rescan the wallet for transactions\r\n\r\nNote: This call can take minutes to complete if rescan is true.\r\n\r\nExamples:\r\n\r\nImport a public key with rescan\r\n&gt; emercoin-cli importpubkey &quot;mypubkey&quot;\r\n\r\nImport using a label without rescan\r\n&gt; emercoin-cli importpubkey &quot;mypubkey&quot; &quot;testing&quot; false\r\n\r\nAs a JSON-RPC call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;importpubkey&quot;, &quot;params&quot;: [&quot;mypubkey&quot;, &quot;testing&quot;, false] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>importwallet &quot;filename&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Imports keys from a wallet dump file (see dumpwallet).\r\n\r\nArguments:\r\n1. &quot;filename&quot; (string, required) The wallet file\r\n\r\nExamples:\r\n\r\nDump the wallet\r\n&gt; emercoin-cli dumpwallet &quot;test&quot;\r\n\r\nImport the wallet\r\n&gt; emercoin-cli importwallet &quot;test&quot;\r\n\r\nImport using the json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;importwallet&quot;, &quot;params&quot;: [&quot;test&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>keypoolrefill ( newsize )</code></strong></p>\r\n\r\n<pre>\r\n<code>Fills the keypool.\r\n\r\nArguments\r\n1. newsize (numeric, optional, default=100) The new keypool size\r\n\r\nExamples:\r\n&gt; emercoin-cli keypoolrefill\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;keypoolrefill&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>listaccounts ( minconf include_watchonly)</code></strong></p>\r\n\r\n<pre>\r\n<code>DEPRECATED. Returns Object that has account names as keys, account balances as values.\r\n\r\nArguments:\r\n1. minconf (numeric, optional, default=1) Only include transactions with at least this many confirmations\r\n2. include_watchonly (bool, optional, default=false) Include balances in watch-only addresses (see &#39;importaddress&#39;)\r\n\r\nResult:\r\n{ (json object where keys are account names, and values are numeric balances\r\n&quot;account&quot;: x.xxx, (numeric) The property name is the account name, and the value is the total balance for the account.\r\n...\r\n}\r\n\r\nExamples:\r\n\r\nList account balances where there at least 1 confirmation\r\n&gt; emercoin-cli listaccounts\r\n\r\nList account balances including zero confirmation transactions\r\n&gt; emercoin-cli listaccounts 0\r\n\r\nList account balances for 6 or more confirmations\r\n&gt; emercoin-cli listaccounts 6\r\n\r\nAs json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;listaccounts&quot;, &quot;params&quot;: [6] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>listaddressgroupings</code></strong></p>\r\n\r\n<pre>\r\n<code>Lists groups of addresses which have had their common ownership\r\nmade public by common use as inputs or as the resulting change\r\nin past transactions\r\n\r\nResult:\r\n[\r\n[\r\n[\r\n&quot;address&quot;, (string) The emercoin address\r\namount, (numeric) The amount in EMC\r\n&quot;account&quot; (string, optional) DEPRECATED. The account\r\n]\r\n,...\r\n]\r\n,...\r\n]\r\n\r\nExamples:\r\n&gt; emercoin-cli listaddressgroupings\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;listaddressgroupings&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>listlockunspent</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns list of temporarily unspendable outputs.\r\nSee the lockunspent call to lock and unlock transactions for spending.\r\n\r\nResult:\r\n[\r\n{\r\n&quot;txid&quot; : &quot;transactionid&quot;, (string) The transaction id locked\r\n&quot;vout&quot; : n (numeric) The vout value\r\n}\r\n,...\r\n]\r\n\r\nExamples:\r\n\r\nList the unspent transactions\r\n&gt; emercoin-cli listunspent\r\n\r\nLock an unspent transaction\r\n&gt; emercoin-cli lockunspent false &quot;[{\\&quot;txid\\&quot;:\\&quot;a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\&quot;,\\&quot;vout\\&quot;:1}]&quot;\r\n\r\nList the locked transactions\r\n&gt; emercoin-cli listlockunspent\r\n\r\nUnlock the transaction again\r\n&gt; emercoin-cli lockunspent true &quot;[{\\&quot;txid\\&quot;:\\&quot;a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\&quot;,\\&quot;vout\\&quot;:1}]&quot;\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;listlockunspent&quot;, &quot;params&quot;: [] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>listreceivedbyaccount ( minconf include_empty include_watchonly)</code></strong></p>\r\n\r\n<pre>\r\n<code>DEPRECATED. List balances by account.\r\n\r\nArguments:\r\n1. minconf (numeric, optional, default=1) The minimum number of confirmations before payments are included.\r\n2. include_empty (bool, optional, default=false) Whether to include accounts that haven&#39;t received any payments.\r\n3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see &#39;importaddress&#39;).\r\n\r\nResult:\r\n[\r\n{\r\n&quot;involvesWatchonly&quot; : true, (bool) Only returned if imported addresses were involved in transaction\r\n&quot;account&quot; : &quot;accountname&quot;, (string) The account name of the receiving account\r\n&quot;amount&quot; : x.xxx, (numeric) The total amount received by addresses with this account\r\n&quot;confirmations&quot; : n, (numeric) The number of confirmations of the most recent transaction included\r\n&quot;label&quot; : &quot;label&quot; (string) A comment for the address/transaction, if any\r\n}\r\n,...\r\n]\r\n\r\nExamples:\r\n&gt; emercoin-cli listreceivedbyaccount\r\n&gt; emercoin-cli listreceivedbyaccount 6 true\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;listreceivedbyaccount&quot;, &quot;params&quot;: [6, true, true] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>listreceivedbyaddress ( minconf include_empty include_watchonly)</code></strong></p>\r\n\r\n<pre>\r\n<code>List balances by receiving address.\r\n\r\nArguments:\r\n1. minconf (numeric, optional, default=1) The minimum number of confirmations before payments are included.\r\n2. include_empty (bool, optional, default=false) Whether to include addresses that haven&#39;t received any payments.\r\n3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see &#39;importaddress&#39;).\r\n\r\nResult:\r\n[\r\n{\r\n&quot;involvesWatchonly&quot; : true, (bool) Only returned if imported addresses were involved in transaction\r\n&quot;address&quot; : &quot;receivingaddress&quot;, (string) The receiving address\r\n&quot;account&quot; : &quot;accountname&quot;, (string) DEPRECATED. The account of the receiving address. The default account is &quot;&quot;.\r\n&quot;amount&quot; : x.xxx, (numeric) The total amount in EMC received by the address\r\n&quot;confirmations&quot; : n, (numeric) The number of confirmations of the most recent transaction included\r\n&quot;label&quot; : &quot;label&quot;, (string) A comment for the address/transaction, if any\r\n&quot;txids&quot;: [\r\nn, (numeric) The ids of transactions received with the address\r\n...\r\n]\r\n}\r\n,...\r\n]\r\n\r\nExamples:\r\n&gt; emercoin-cli listreceivedbyaddress\r\n&gt; emercoin-cli listreceivedbyaddress 6 true\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;listreceivedbyaddress&quot;, &quot;params&quot;: [6, true, true] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>listsinceblock ( &quot;blockhash&quot; target_confirmations include_watchonly)</code></strong></p>\r\n\r\n<pre>\r\n<code>Get all transactions in blocks since block [blockhash], or all transactions if omitted\r\n\r\nArguments:\r\n1. &quot;blockhash&quot; (string, optional) The block hash to list transactions since\r\n2. target_confirmations: (numeric, optional) The confirmations required, must be 1 or more\r\n3. include_watchonly: (bool, optional, default=false) Include transactions to watch-only addresses (see &#39;importaddress&#39;)\r\nResult:\r\n{\r\n&quot;transactions&quot;: [\r\n&quot;account&quot;:&quot;accountname&quot;, (string) DEPRECATED. The account name associated with the transaction. Will be &quot;&quot; for the default account.\r\n&quot;address&quot;:&quot;address&quot;, (string) The emercoin address of the transaction. Not present for move transactions (category = move).\r\n&quot;category&quot;:&quot;send|receive&quot;, (string) The transaction category. &#39;send&#39; has negative amounts, &#39;receive&#39; has positive amounts.\r\n&quot;amount&quot;: x.xxx, (numeric) The amount in EMC. This is negative for the &#39;send&#39; category, and for the &#39;move&#39; category for moves\r\noutbound. It is positive for the &#39;receive&#39; category, and for the &#39;move&#39; category for inbound funds.\r\n&quot;vout&quot; : n, (numeric) the vout value\r\n&quot;fee&quot;: x.xxx, (numeric) The amount of the fee in EMC. This is negative and only available for the &#39;send&#39; category of transactions.\r\n&quot;confirmations&quot;: n, (numeric) The number of confirmations for the transaction. Available for &#39;send&#39; and &#39;receive&#39; category of transactions.\r\nWhen it&#39;s &lt; 0, it means the transaction conflicted that many blocks ago.\r\n&quot;blockhash&quot;: &quot;hashvalue&quot;, (string) The block hash containing the transaction. Available for &#39;send&#39; and &#39;receive&#39; category of transactions.\r\n&quot;blockindex&quot;: n, (numeric) The index of the transaction in the block that includes it. Available for &#39;send&#39; and &#39;receive&#39; category of transactions.\r\n&quot;blocktime&quot;: xxx, (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\r\n&quot;txid&quot;: &quot;transactionid&quot;, (string) The transaction id. Available for &#39;send&#39; and &#39;receive&#39; category of transactions.\r\n&quot;time&quot;: xxx, (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).\r\n&quot;timereceived&quot;: xxx, (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for &#39;send&#39; and &#39;receive&#39; category of transactions.\r\n&quot;bip125-replaceable&quot;: &quot;yes|no|unknown&quot;, (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\r\nmay be unknown for unconfirmed transactions not in the mempool\r\n&quot;abandoned&quot;: xxx, (bool) &#39;true&#39; if the transaction has been abandoned (inputs are respendable). Only available for the &#39;send&#39; category of transactions.\r\n&quot;comment&quot;: &quot;...&quot;, (string) If a comment is associated with the transaction.\r\n&quot;label&quot; : &quot;label&quot; (string) A comment for the address/transaction, if any\r\n&quot;to&quot;: &quot;...&quot;, (string) If a comment to is associated with the transaction.\r\n],\r\n&quot;lastblock&quot;: &quot;lastblockhash&quot; (string) The hash of the last block\r\n}\r\n\r\nExamples:\r\n&gt; emercoin-cli listsinceblock\r\n&gt; emercoin-cli listsinceblock &quot;000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad&quot; 6\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;listsinceblock&quot;, &quot;params&quot;: [&quot;000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad&quot;, 6] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>listtransactions ( &quot;account&quot; count skip include_watchonly)</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns up to &#39;count&#39; most recent transactions skipping the first &#39;from&#39; transactions for account &#39;account&#39;.\r\n\r\nArguments:\r\n1. &quot;account&quot; (string, optional) DEPRECATED. The account name. Should be &quot;*&quot;.\r\n2. count (numeric, optional, default=10) The number of transactions to return\r\n3. skip (numeric, optional, default=0) The number of transactions to skip\r\n4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see &#39;importaddress&#39;)\r\n\r\nResult:\r\n[\r\n{\r\n&quot;account&quot;:&quot;accountname&quot;, (string) DEPRECATED. The account name associated with the transaction.\r\nIt will be &quot;&quot; for the default account.\r\n&quot;address&quot;:&quot;address&quot;, (string) The emercoin address of the transaction. Not present for\r\nmove transactions (category = move).\r\n&quot;category&quot;:&quot;send|receive|move&quot;, (string) The transaction category. &#39;move&#39; is a local (off blockchain)\r\ntransaction between accounts, and not associated with an address,\r\ntransaction id or block. &#39;send&#39; and &#39;receive&#39; transactions are\r\nassociated with an address, transaction id and block details\r\n&quot;amount&quot;: x.xxx, (numeric) The amount in EMC. This is negative for the &#39;send&#39; category, and for the\r\n&#39;move&#39; category for moves outbound. It is positive for the &#39;receive&#39; category,\r\nand for the &#39;move&#39; category for inbound funds.\r\n&quot;label&quot;: &quot;label&quot;, (string) A comment for the address/transaction, if any\r\n&quot;vout&quot;: n, (numeric) the vout value\r\n&quot;fee&quot;: x.xxx, (numeric) The amount of the fee in EMC. This is negative and only available for the\r\n&#39;send&#39; category of transactions.\r\n&quot;confirmations&quot;: n, (numeric) The number of confirmations for the transaction. Available for &#39;send&#39; and\r\n&#39;receive&#39; category of transactions. Negative confirmations indicate the\r\ntransaction conflicts with the block chain\r\n&quot;trusted&quot;: xxx, (bool) Whether we consider the outputs of this unconfirmed transaction safe to spend.\r\n&quot;blockhash&quot;: &quot;hashvalue&quot;, (string) The block hash containing the transaction. Available for &#39;send&#39; and &#39;receive&#39;\r\ncategory of transactions.\r\n&quot;blockindex&quot;: n, (numeric) The index of the transaction in the block that includes it. Available for &#39;send&#39; and &#39;receive&#39;\r\ncategory of transactions.\r\n&quot;blocktime&quot;: xxx, (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\r\n&quot;txid&quot;: &quot;transactionid&quot;, (string) The transaction id. Available for &#39;send&#39; and &#39;receive&#39; category of transactions.\r\n&quot;time&quot;: xxx, (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\r\n&quot;timereceived&quot;: xxx, (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available\r\nfor &#39;send&#39; and &#39;receive&#39; category of transactions.\r\n&quot;comment&quot;: &quot;...&quot;, (string) If a comment is associated with the transaction.\r\n&quot;otheraccount&quot;: &quot;accountname&quot;, (string) DEPRECATED. For the &#39;move&#39; category of transactions, the account the funds came\r\nfrom (for receiving funds, positive amounts), or went to (for sending funds,\r\nnegative amounts).\r\n&quot;bip125-replaceable&quot;: &quot;yes|no|unknown&quot;, (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\r\nmay be unknown for unconfirmed transactions not in the mempool\r\n&quot;abandoned&quot;: xxx (bool) &#39;true&#39; if the transaction has been abandoned (inputs are respendable). Only available for the\r\n&#39;send&#39; category of transactions.\r\n}\r\n]\r\n\r\nExamples:\r\n\r\nList the most recent 10 transactions in the systems\r\n&gt; emercoin-cli listtransactions\r\n\r\nList transactions 100 to 120\r\n&gt; emercoin-cli listtransactions &quot;*&quot; 20 100\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;listtransactions&quot;, &quot;params&quot;: [&quot;*&quot;, 20, 100] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>listunspent ( minconf maxconf [&quot;addresses&quot;,...] [include_unsafe] )</code></strong></p>\r\n\r\n<pre>\r\n<code>Returns array of unspent transaction outputs\r\nwith between minconf and maxconf (inclusive) confirmations.\r\nOptionally filter to only include txouts paid to specified addresses.\r\n\r\nArguments:\r\n1. minconf (numeric, optional, default=1) The minimum confirmations to filter\r\n2. maxconf (numeric, optional, default=9999999) The maximum confirmations to filter\r\n3. &quot;addresses&quot; (string) A json array of emercoin addresses to filter\r\n[\r\n&quot;address&quot; (string) emercoin address\r\n,...\r\n]\r\n4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend\r\nbecause they come from unconfirmed untrusted transactions or unconfirmed\r\nreplacement transactions (cases where we are less sure that a conflicting\r\ntransaction won&#39;t be mined).\r\n\r\nResult\r\n[ (array of json object)\r\n{\r\n&quot;txid&quot; : &quot;txid&quot;, (string) the transaction id\r\n&quot;vout&quot; : n, (numeric) the vout value\r\n&quot;address&quot; : &quot;address&quot;, (string) the emercoin address\r\n&quot;account&quot; : &quot;account&quot;, (string) DEPRECATED. The associated account, or &quot;&quot; for the default account\r\n&quot;scriptPubKey&quot; : &quot;key&quot;, (string) the script key\r\n&quot;amount&quot; : x.xxx, (numeric) the transaction output amount in EMC\r\n&quot;confirmations&quot; : n, (numeric) The number of confirmations\r\n&quot;redeemScript&quot; : n (string) The redeemScript if scriptPubKey is P2SH\r\n&quot;spendable&quot; : xxx, (bool) Whether we have the private keys to spend this output\r\n&quot;solvable&quot; : xxx (bool) Whether we know how to spend this output, ignoring the lack of keys\r\n}\r\n,...\r\n]\r\n\r\nExamples\r\n&gt; emercoin-cli listunspent\r\n&gt; emercoin-cli listunspent 6 9999999 &quot;[\\&quot;1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\&quot;,\\&quot;1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\&quot;]&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;listunspent&quot;, &quot;params&quot;: [6, 9999999 &quot;[\\&quot;1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\&quot;,\\&quot;1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\&quot;]&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>lockunspent unlock ([{&quot;txid&quot;:&quot;txid&quot;,&quot;vout&quot;:n},...])</code></strong></p>\r\n\r\n<pre>\r\n<code>Updates list of temporarily unspendable outputs.\r\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\r\nIf no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\r\nA locked transaction output will not be chosen by automatic coin selection, when spending emercoins.\r\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\r\nis always cleared (by virtue of process exit) when a node stops or fails.\r\nAlso see the listunspent call\r\n\r\nArguments:\r\n1. unlock (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\r\n2. &quot;transactions&quot; (string, optional) A json array of objects. Each object the txid (string) vout (numeric)\r\n[ (json array of json objects)\r\n{\r\n&quot;txid&quot;:&quot;id&quot;, (string) The transaction id\r\n&quot;vout&quot;: n (numeric) The output number\r\n}\r\n,...\r\n]\r\n\r\nResult:\r\ntrue|false (boolean) Whether the command was successful or not\r\n\r\nExamples:\r\n\r\nList the unspent transactions\r\n&gt; emercoin-cli listunspent\r\n\r\nLock an unspent transaction\r\n&gt; emercoin-cli lockunspent false &quot;[{\\&quot;txid\\&quot;:\\&quot;a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\&quot;,\\&quot;vout\\&quot;:1}]&quot;\r\n\r\nList the locked transactions\r\n&gt; emercoin-cli listlockunspent\r\n\r\nUnlock the transaction again\r\n&gt; emercoin-cli lockunspent true &quot;[{\\&quot;txid\\&quot;:\\&quot;a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\&quot;,\\&quot;vout\\&quot;:1}]&quot;\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;lockunspent&quot;, &quot;params&quot;: [false, &quot;[{\\&quot;txid\\&quot;:\\&quot;a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\&quot;,\\&quot;vout\\&quot;:1}]&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>makekeypair [prefix]</code></strong></p>\r\n\r\n<pre>\r\n<code>Make a public/private key pair.\r\n[prefix] is optional preferred prefix for the public key.</code></pre>\r\n\r\n<p><strong><code>move &quot;fromaccount&quot; &quot;toaccount&quot; amount ( minconf &quot;comment&quot; )</code></strong></p>\r\n\r\n<pre>\r\n<code>DEPRECATED. Move a specified amount from one account in your wallet to another.\r\n\r\nArguments:\r\n1. &quot;fromaccount&quot; (string, required) The name of the account to move funds from. May be the default account using &quot;&quot;.\r\n2. &quot;toaccount&quot; (string, required) The name of the account to move funds to. May be the default account using &quot;&quot;.\r\n3. amount (numeric) Quantity of EMC to move between accounts.\r\n4. (dummy) (numeric, optional) Ignored. Remains for backward compatibility.\r\n5. &quot;comment&quot; (string, optional) An optional comment, stored in the wallet only.\r\n\r\nResult:\r\ntrue|false (boolean) true if successful.\r\n\r\nExamples:\r\n\r\nMove 0.01 EMC from the default account to the account named tabby\r\n&gt; emercoin-cli move &quot;&quot; &quot;tabby&quot; 0.01\r\n\r\nMove 0.01 EMC timotei to akiko with a comment and funds have 6 confirmations\r\n&gt; emercoin-cli move &quot;timotei&quot; &quot;akiko&quot; 0.01 6 &quot;happy birthday!&quot;\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;move&quot;, &quot;params&quot;: [&quot;timotei&quot;, &quot;akiko&quot;, 0.01, 6, &quot;happy birthday!&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>name_delete &lt;name&gt;</code></strong></p>\r\n\r\n<pre>\r\n<code>Delete a name if you own it. Others may do name_new after this command.</code></pre>\r\n\r\n<p><strong><code>name_list [name] [valuetype]</code></strong></p>\r\n\r\n<pre>\r\n<code>list my own names.\r\n\r\nArguments:\r\n1. name (string, required) Restrict output to specific name.\r\n2. valuetype (string, optional) If &quot;hex&quot; or &quot;base64&quot; is specified then it will print value in corresponding format instead of string.</code></pre>\r\n\r\n<p><strong><code>name_new &lt;name&gt; &lt;value&gt; &lt;days&gt; [toaddress] [valuetype]</code></strong></p>\r\n\r\n<pre>\r\n<code>Creates new key-&gt;value pair which expires after specified number of days.\r\nCost is square root of (1% of last PoW + 1% per year of last PoW).\r\nArguments:\r\n1. name (string, required) Name to create.\r\n2. value (string, required) Value to write.\r\n3. days (number, required) How many days this name will be active (1 day~=175 blocks).\r\n4. toaddress (string, optional) Address of recipient. Empty string = transaction to yourself.\r\n5. valuetype (string, optional) Interpretation of value string. Can be &quot;hex&quot;, &quot;base64&quot; or filepath.\r\nnot specified or empty - Write value as a unicode string.\r\n&quot;hex&quot; or &quot;base64&quot; - Decode value string as a binary data in hex or base64 string format.\r\notherwise - Decode value string as a filepath from which to read the data.</code></pre>\r\n\r\n<p><strong><code>name_update &lt;name&gt; &lt;value&gt; &lt;days&gt; [toaddress] [valuetype]</code></strong></p>\r\n\r\n<pre>\r\n<code>Update name value, add days to expiration time and possibly transfer a name to diffrent address.\r\n\r\nArguments:\r\n1. name (string, required) Name to update.\r\n2. value (string, required) Value to write. Empty string = use previous value.\r\n3. days (number, required) How many days to add to this name (1 day~=175 blocks).\r\n4. toaddress (string, optional) Address of recipient. Empty string = transaction to yourself.\r\n5. valuetype (string, optional) Interpretation of value string. Can be &quot;hex&quot;, &quot;base64&quot; or filepath.\r\nnot specified or empty - Write value as a unicode string.\r\n&quot;hex&quot; or &quot;base64&quot; - Decode value string as a binary data in hex or base64 string format.\r\notherwise - Decode value string as a filepath from which to read the data.</code></pre>\r\n\r\n<p><strong><code>removeprunedfunds &quot;txid&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will effect wallet balances.\r\n\r\nArguments:\r\n1. &quot;txid&quot; (string, required) The hex-encoded id of the transaction you are deleting\r\n\r\nExamples:\r\n&gt; emercoin-cli removeprunedfunds &quot;a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5&quot;\r\n\r\nAs a JSON-RPC call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;removprunedfunds&quot;, &quot;params&quot;: [&quot;a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>reservebalance [&lt;reserve&gt; [amount]]</code></strong></p>\r\n\r\n<pre>\r\n<code>&lt;reserve&gt; is true or false to turn balance reserve on or off.\r\n&lt;amount&gt; is a real and rounded to cent.\r\nSet reserve amount not participating in network protection.\r\nIf no parameters provided current setting is printed.</code></pre>\r\n\r\n<p><strong><code>sendfrom &quot;fromaccount&quot; &quot;toaddress&quot; amount ( minconf &quot;comment&quot; &quot;comment_to&quot; )</code></strong></p>\r\n\r\n<pre>\r\n<code>DEPRECATED (use sendtoaddress). Sent an amount from an account to a emercoin address.\r\n\r\nArguments:\r\n1. &quot;fromaccount&quot; (string, required) The name of the account to send funds from. May be the default account using &quot;&quot;.\r\nSpecifying an account does not influence coin selection, but it does associate the newly created\r\ntransaction with the account, so the account&#39;s balance computation and transaction history can reflect\r\nthe spend.\r\n2. &quot;toaddress&quot; (string, required) The emercoin address to send funds to.\r\n3. amount (numeric or string, required) The amount in EMC (transaction fee is added on top).\r\n4. minconf (numeric, optional, default=1) Only use funds with at least this many confirmations.\r\n5. &quot;comment&quot; (string, optional) A comment used to store what the transaction is for.\r\nThis is not part of the transaction, just kept in your wallet.\r\n6. &quot;comment_to&quot; (string, optional) An optional comment to store the name of the person or organization\r\nto which you&#39;re sending the transaction. This is not part of the transaction,\r\nit is just kept in your wallet.\r\n\r\nResult:\r\n&quot;txid&quot; (string) The transaction id.\r\n\r\nExamples:\r\n\r\nSend 0.01 EMC from the default account to the address, must have at least 1 confirmation\r\n&gt; emercoin-cli sendfrom &quot;&quot; &quot;1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd&quot; 0.01\r\n\r\nSend 0.01 from the tabby account to the given address, funds must have at least 6 confirmations\r\n&gt; emercoin-cli sendfrom &quot;tabby&quot; &quot;1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd&quot; 0.01 6 &quot;donation&quot; &quot;seans outpost&quot;\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;sendfrom&quot;, &quot;params&quot;: [&quot;tabby&quot;, &quot;1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd&quot;, 0.01, 6, &quot;donation&quot;, &quot;seans outpost&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>sendmany &quot;fromaccount&quot; {&quot;address&quot;:amount,...} ( minconf &quot;comment&quot; [&quot;address&quot;,...] )</code></strong></p>\r\n\r\n<pre>\r\n<code>Send multiple times. Amounts are double-precision floating point numbers.\r\n\r\nArguments:\r\n1. &quot;fromaccount&quot; (string, required) DEPRECATED. The account to send the funds from. Should be &quot;&quot; for the default account\r\n2. &quot;amounts&quot; (string, required) A json object with addresses and amounts\r\n{\r\n&quot;address&quot;:amount (numeric or string) The emercoin address is the key, the numeric amount (can be string) in EMC is the value\r\n,...\r\n}\r\n3. minconf (numeric, optional, default=1) Only use the balance confirmed at least this many times.\r\n4. &quot;comment&quot; (string, optional) A comment\r\n5. subtractfeefrom (array, optional) A json array with addresses.\r\nThe fee will be equally deducted from the amount of each selected address.\r\nThose recipients will receive less emercoins than you enter in their corresponding amount field.\r\nIf no addresses are specified here, the sender pays the fee.\r\n[\r\n&quot;address&quot; (string) Subtract fee from this address\r\n,...\r\n]\r\n\r\nResult:\r\n&quot;txid&quot; (string) The transaction id for the send. Only 1 transaction is created regardless of\r\nthe number of addresses.\r\n\r\nExamples:\r\n\r\nSend two amounts to two different addresses:\r\n&gt; emercoin-cli sendmany &quot;&quot; &quot;{\\&quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\&quot;:0.01,\\&quot;1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\&quot;:0.02}&quot;\r\n\r\nSend two amounts to two different addresses setting the confirmation and comment:\r\n&gt; emercoin-cli sendmany &quot;&quot; &quot;{\\&quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\&quot;:0.01,\\&quot;1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\&quot;:0.02}&quot; 6 &quot;testing&quot;\r\n\r\nSend two amounts to two different addresses, subtract fee from amount:\r\n&gt; emercoin-cli sendmany &quot;&quot; &quot;{\\&quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\&quot;:0.01,\\&quot;1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\&quot;:0.02}&quot; 1 &quot;&quot; &quot;[\\&quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\&quot;,\\&quot;1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\&quot;]&quot;\r\n\r\nAs a json rpc call\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;sendmany&quot;, &quot;params&quot;: [&quot;&quot;, &quot;{\\&quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\&quot;:0.01,\\&quot;1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\&quot;:0.02}&quot;, 6, &quot;testing&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>sendtoaddress &quot;address&quot; amount ( &quot;comment&quot; &quot;comment_to&quot; subtractfeefromamount )</code></strong></p>\r\n\r\n<pre>\r\n<code>Send an amount to a given address.\r\n\r\nArguments:\r\n1. &quot;address&quot; (string, required) The emercoin address to send to.\r\n2. &quot;amount&quot; (numeric or string, required) The amount in EMC to send. eg 0.1\r\n3. &quot;comment&quot; (string, optional) A comment used to store what the transaction is for.\r\nThis is not part of the transaction, just kept in your wallet.\r\n4. &quot;comment_to&quot; (string, optional) A comment to store the name of the person or organization\r\nto which you&#39;re sending the transaction. This is not part of the\r\ntransaction, just kept in your wallet.\r\n5. subtractfeefromamount (boolean, optional, default=false) The fee will be deducted from the amount being sent.\r\nThe recipient will receive less emercoins than you enter in the amount field.\r\n\r\nResult:\r\n&quot;txid&quot; (string) The transaction id.\r\n\r\nExamples:\r\n&gt; emercoin-cli sendtoaddress &quot;1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd&quot; 0.1\r\n&gt; emercoin-cli sendtoaddress &quot;1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd&quot; 0.1 &quot;donation&quot; &quot;seans outpost&quot;\r\n&gt; emercoin-cli sendtoaddress &quot;1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd&quot; 0.1 &quot;&quot; &quot;&quot; true\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;sendtoaddress&quot;, &quot;params&quot;: [&quot;1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd&quot;, 0.1, &quot;donation&quot;, &quot;seans outpost&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>sendtoname &lt;name&gt; &lt;amount&gt; [comment] [comment-to]</code></strong></p>\r\n\r\n<pre>\r\n<code>&lt;amount&gt; is a real and is rounded to the nearest 0.01</code></pre>\r\n\r\n<p><strong><code>setaccount &quot;address&quot; &quot;account&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>DEPRECATED. Sets the account associated with the given address.\r\n\r\nArguments:\r\n1. &quot;address&quot; (string, required) The emercoin address to be associated with an account.\r\n2. &quot;account&quot; (string, required) The account to assign the address to.\r\n\r\nExamples:\r\n&gt; emercoin-cli setaccount &quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot; &quot;tabby&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;setaccount&quot;, &quot;params&quot;: [&quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot;, &quot;tabby&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>settxfee amount</code></strong></p>\r\n\r\n<pre>\r\n<code>Set the transaction fee per kB. Overwrites the paytxfee parameter.\r\n\r\nArguments:\r\n1. amount (numeric or string, required) The transaction fee in EMC/kB\r\n\r\nResult\r\ntrue|false (boolean) Returns true if successful\r\n\r\nExamples:\r\n&gt; emercoin-cli settxfee 0.00001\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;settxfee&quot;, &quot;params&quot;: [0.00001] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><strong><code>signmessage &quot;address&quot; &quot;message&quot;</code></strong></p>\r\n\r\n<pre>\r\n<code>Sign a message with the private key of an address\r\n\r\nArguments:\r\n1. &quot;address&quot; (string, required) The emercoin address to use for the private key.\r\n2. &quot;message&quot; (string, required) The message to create a signature of.\r\n\r\nResult:\r\n&quot;signature&quot; (string) The signature of the message encoded in base 64\r\n\r\nExamples:\r\n\r\nUnlock the wallet for 30 seconds\r\n&gt; emercoin-cli walletpassphrase &quot;mypassphrase&quot; 30\r\n\r\nCreate the signature\r\n&gt; emercoin-cli signmessage &quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot; &quot;my message&quot;\r\n\r\nVerify the signature\r\n&gt; emercoin-cli verifymessage &quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot; &quot;signature&quot; &quot;my message&quot;\r\n\r\nAs json rpc\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;signmessage&quot;, &quot;params&quot;: [&quot;1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX&quot;, &quot;my message&quot;] }&#39; -H &#39;content-type: text/plain;&#39; http://127.0.0.1:8332/</code></pre>\r\n\r\n<p><em>Note: An important command,&nbsp;<code>reencodeoldprivkey</code>, is missing from the current debug help that may be helpful for users of older wallet versions prior to 0.5.x:</em></p>\r\n\r\n<pre>\r\n<code>reencodeoldprivkey XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code></pre>\r\n\r\n<p>The command&nbsp;<code>reencodeoldprivkey</code>&nbsp;returns the same key to you, but in a format suitable for Emercoin version 0.5.x and higher. Then you can use&nbsp;<code>importprivkey</code>&nbsp;as usual.</p>\r\n\r\n<h2>Additional help for each API command</h2>\r\n\r\n<p>Additional help can be requested for any of the above API commands. e.g:</p>\r\n\r\n<pre>\r\n<code>$&nbsp;emc&nbsp;help&nbsp;name_new</code></pre>\r\n\r\n<pre>\r\n<code>name_new &lt;name&gt; &lt;value&gt; &lt;days&gt; [toaddress] [valuetype]\r\nCreates new key-&gt;value pair which expires after specified number of days.\r\nCost is square root of (1% of last PoW + 1% per year of last PoW).\r\nArguments:\r\n1. name      (string, required) Name to create.\r\n2. value     (string, required) Value to write.\r\n3. toaddress (string, optional) Address of recipient. Empty string = transaction to yourself.\r\n4. valuetype (string, optional) Interpretation of value string. Can be &quot;hex&quot;, &quot;base64&quot; or filepath.\r\n   not specified or empty - Write value as a unicode string.\r\n   &quot;hex&quot; or &quot;base64&quot; - Decode value string as a binary data in hex or base64 string format.\r\n   otherwise - Decode value string as a filepath from which to read the data.</code></pre>\r\n\r\n<pre>\r\n<code>$ emc help sendtoaddress</code></pre>\r\n\r\n<pre>\r\n<code>sendtoaddress &quot;emercoinaddress&quot; amount ( &quot;comment&quot; &quot;comment-to&quot; )\r\n\r\nSend an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001\r\n\r\nRequires wallet passphrase to be set with walletpassphrase call.\r\nArguments:\r\n1. &quot;emercoinaddress&quot;  (string, required) The emercoin address to send to.\r\n2. &quot;amount&quot;      (numeric, required) The amount in emc to send. eg 0.1\r\n3. &quot;comment&quot;     (string, optional) A comment used to store what the transaction is for. \r\n                             This is not part of the transaction, just kept in your wallet.\r\n4. &quot;comment-to&quot;  (string, optional) A comment to store the name of the person or organization \r\n                             to which you&#39;re sending the transaction. This is not part of the \r\n                             transaction, just kept in your wallet.\r\n\r\nResult:\r\n&quot;transactionid&quot;  (string) The transaction id.\r\n\r\nExamples:\r\n&gt; emercoin-cli sendtoaddress &quot;1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd&quot; 0.1\r\n&gt; emercoin-cli sendtoaddress &quot;1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd&quot; 0.1 &quot;donation&quot; &quot;seans outpost&quot;\r\n&gt; curl --user myusername --data-binary &#39;{&quot;jsonrpc&quot;: &quot;1.0&quot;, &quot;id&quot;:&quot;curltest&quot;, &quot;method&quot;: &quot;sendtoaddress&quot;</code></pre>\r\n\r\n<p>&nbsp;</p>"}}]
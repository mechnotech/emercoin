/*Миксин media-query max-width*/
@mixin max-width($point) {
  @media all and (max-width: $point) {
    @content;
  }
}

/*Миксин media-query min-width*/
@mixin min-width($point) {
  @media all and (min-width: $point) {
    @content;
  }
}

/*Миксин media-query для определенного промежутка*/
@mixin min-max($min, $max) {
  @media (min-width: $min) and (max-width: $max) {
    @content;
  }
}

/*Миксин media-query min-width для ie*/
@mixin ie11($content) {
  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
    @content;
  }
}

/* Миксин задающий прозрачность и цвет placeholder */
@mixin placeholder($opacity, $color) {
  &::-webkit-input-placeholder {
    opacity: $opacity;
    color: $color;
  }
  &::-moz-placeholder {
    opacity: $opacity;
    color: $color;
  }
  /* Firefox 19+ */
  &:-moz-placeholder {
    opacity: $opacity;
    color: $color;
  }
  /* Firefox 18- */
  &:-ms-input-placeholder {
    opacity: $opacity;
    color: $color;
  }
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

@mixin background-size($size) {
  -moz-background-size: $size;
  -o-background-size: $size;
  -webkit-background-size: $size;
  -khtml-background-size: $size;
  background-size: $size;
}

@mixin box-shadow($shadows...) {
  -moz-box-shadow: $shadows;
  -webkit-box-shadow: $shadows;
  box-shadow: $shadows;
}

@mixin text-shadow($shadows...) {
  -moz-text-shadow: $shadows;
  -webkit-text-shadow: $shadows;
  text-shadow: $shadows;
}

@mixin animation($animation...) {
  -webkit-animation: $animation;
  -moz-animation: $animation;
  -ms-animation: $animation;
  -o-animation: $animation;
  animation: $animation;
}

@mixin transition($transition...) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -ms-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

@mixin user-select($user-select) {
  -webkit-user-select: $user-select;
  -khtml-user-select: $user-select;
  -moz-user-select: $user-select;
  -ms-user-select: $user-select;
  user-select: $user-select;
}

@mixin animation-name($animation-name) {
  -webkit-animation-name: $animation-name;
  animation-name: $animation-name;
}

@mixin animation-duration($animation-duration) {
  -webkit-animation-duration: $animation-duration;
  animation-duration: $animation-duration;
}

@mixin animation-fill-mode($animation-fill-mode) {
  -webkit-animation-fill-mode: $animation-fill-mode;
  animation-fill-mode: $animation-fill-mode;
}

@mixin transform-style($transform-style) {
  -webkit-transform-style: $transform-style;
  transform-style: $transform-style;
}

@mixin column-count($column-count) {
  -moz-column-count: $column-count;
  -webkit-column-count: $column-count;
}

@mixin column-gap($column-gap) {
  -moz-column-gap: $column-gap;
  -webkit-column-gap: $column-gap;
}

@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
}

// translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

// skew
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

//transform origin
@mixin transform-origin($origin) {
  moz-transform-origin: $origin;
  -o-transform-origin: $origin;
  -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
  transform-origin: $origin;
}

// User select
// For selecting text on the page
@mixin user-select($select) {
  -webkit-user-select: $select;
  -moz-user-select: $select;
  -ms-user-select: $select; // IE10+
  user-select: $select;
}

// mouse grab
@mixin grab-cursor {
  cursor: -webkit-grab;
  cursor: -moz-grab;
  cursor: -o-grab;
  cursor: -ms-grab;
  cursor: grab;
}

@mixin grabbing-cursor {
  cursor: move;
  cursor: -webkit-grabbing;
  cursor: -moz-grabbing;
  cursor: -o-grabbing;
  cursor: -ms-grabbing;
  cursor: grabbing;
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @-ms-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

// Background Gradient:
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
          to top : bottom,
          to top right : bottom left,
          to right top : left bottom,
          to right : left,
          to bottom right : top left,
          to right bottom : left top,
          to bottom : top,
          to bottom left : top right,
          to left bottom : right top,
          to left : right,
          to left top : right bottom,
          to top left : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, 'deg');
}

@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}